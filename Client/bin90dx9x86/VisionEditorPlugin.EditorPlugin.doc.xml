<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VisionEditorPlugin.EditorPlugin</name>
    </assembly>
    <members>
        <member name="M:VisionEditorPlugin.Tests.WaterShapeTest.SetUp">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Tests.WaterShapeTest.TearDown">
            <summary>
            Clears the test data
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.StaticMeshGroupShape">
            <summary>
            StaticMeshGroupShape : Bakes multiple static meshes into one mesh
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshGroupShape.CAT_CONVERT">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshGroupShape.CATORDER_CONVERT">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshGroupShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="nodeName"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.SetEngineInstanceBaseProperties">
            <summary>
            overridden function to set/update all specific properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            overridden function to render the shape
            </summary>
            <param name="view">destination view</param>
            <param name="mode">render mode</param>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshGroupShape._objectKey">
            <summary>
            Object key string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshGroupShape._exportFileName">
            <summary>
            Object key string
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.GetUniqueExportFileName(System.String)">
            <summary>
            gets a unique export filename 
            </summary>
            <param name="wantedFileName">The filename that should be make unique</param>
            <returns>The new unique filename. May be equal the parameter wantedFileName when the name is already unique</returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.Clone">
            <summary>
            This function must be overridden, since we have to reset the hotspots
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.OnSelected">
            <summary>
            Called when the shape is selected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.OnUnSelected">
            <summary>
            Called when the shape is unselected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when user starts dragging a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Called while the user drags a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when the user releases the mouse button on a hotspot
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshGroupShape.ObjectKey">
            <summary>
            Gets or sets the object key, so the object can be searched in the engine
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshGroupShape.Active">
            <summary>
            If enabled, this visibility object performs hardware occlusion test
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshGroupShape.ExportFileName">
            <summary>
            Gets or sets the object key, so the object can be searched in the engine
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.StaticMeshGroupShape.CheckExportFileNameUniqueVisitor">
            <summary>
            Visitor that checks if the export file name is already used for any StaticMeshGroupShape in the scene
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.StaticMeshGroupShape.GetExportFileNameMaxIndexVisitor">
            <summary>
            Visitor that searches for the max index for a specific ExportFileName property
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshGroupShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.HotSpotAddPathNode">
            <summary>
            Hot spot button that inserts a path node
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.HotSpotAddPathNode.#ctor(VisionEditorPlugin.Shapes.PathShape,System.Int32,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="owner">owner shape</param>
            <param name="iInsert">node index to insert at</param>
            <param name="t">time value [0..1] position on the path</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.HotSpotAddPathNode.EvaluatePosition">
            <summary>
            overridden function that evaluates the position on the path
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.HotSpotAddPathNode.OnClicked(CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function to insert the path node
            </summary>
            <param name="view"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.HotSpotAddPathNode.Path">
            <summary>
            returns the owner as a path shape
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.LinkTargetPath">
            <summary>
            Link target class for paths
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkTargetPath.#ctor(VisionEditorPlugin.Shapes.PathShape,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="primaryStringId"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkTargetPath.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Default constructor used by the factory class
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkTargetPath.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkTargetPath.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.PathShape">
            <summary>
            Spline path shape.
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathShape.CAT_PATH">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathShape.CATORDER_PATH">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathShape.CAT_DISPLAY">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathShape.CATORDER_DISPLAY">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.SetEngineInstanceBaseProperties">
            <summary>
            overridden function to set/update all specific properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            overridden function to render the shape
            </summary>
            <param name="view">destination view</param>
            <param name="mode">render mode</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.OnTraceShape(CSharpFramework.ShapeTraceMode_e,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.ShapeTraceResult@)">
            <summary>
            Overridden trace function
            </summary>
            <param name="mode"></param>
            <param name="rayStart">ray start position</param>
            <param name="rayEnd">ray end position</param>
            <param name="result">trace result</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.AddChild(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Overridden function
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.RemoveChild(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Overridden function
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.Update">
            <summary>
            Re-creates the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.OnSingleNodeChangedPosition(VisionEditorPlugin.Shapes.PathNodeShape)">
            <summary>
            Must be called from each node when it changed position
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.EvaluatePathPosition(System.Single)">
            <summary>
            Returns the absolute position at the specified time value
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.EvaluatePathDirection(System.Single)">
            <summary>
            Returns the normalized path direction vector at the specified time value
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.SmoothAll(System.Boolean)">
            <summary>
            Smooths all path node tangents. Optionally via an action
            </summary>
            <param name="bViaAction"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.PerformRelevantOperation(System.String,System.Int32,System.Int32)">
            <summary>
            Perform the relevant operation
            </summary>
            <param name="name"></param>
            <param name="iShapeIndex"></param>
            <param name="iShapeCount"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.Clone">
            <summary>
            Overridden clone function
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.CreateInsertNodeHotSpots">
            <summary>
            Create all hotspot buttons that allow to add nodes
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.RemoveInsertNodeHotSpots">
            <summary>
            Remove all hotspot buttons that allow to add nodes
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.OnSelected">
            <summary>
            Overridden OnSelected function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.OnUnSelected">
            <summary>
            Overridden OnUnSelected function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathShape.EnginePath">
            <summary>
            accesses the engine instance as an object of type EngineInstancePath
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathShape.Closed">
            <summary>
            Determines whether the path is closed or not
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathShape.PathKey">
            <summary>
            Gets or sets the path key
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathShape.DisplayColor">
            <summary>
            Gets or sets the display color of the path (in vForge)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathShape.DisplayColorLiveUpdate">
            <summary>
            Proxy property used for color live update (See PropertyLiveUpdate attribute in LightColor property)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathShape.LineDisplay">
            <summary>
            Gets or sets the display color of the path (in vForge)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathShape.BeforeFirstNodePosition">
            <summary>
            Returns an extrapolated position before the first node (for the hotspot)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathShape.AfterLastNodePosition">
            <summary>
            Returns an extrapolated position after the last node (for the hotspot)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathShape.PathNodeCount">
            <summary>
            Counts the number of path nodes in the child collection
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathShape.PathNodes">
            <summary>
            Returns an array of path nodes in the child collection
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathShape.RelevantOperations">
            <summary>
            Get the relevant operations
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.PathNodeShape">
            <summary>
            Shape that represents a single path node
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathNodeShape.CAT_TANGENTS">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathNodeShape.CATORDER_TANGENTS">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathNodeShape.CAT_DISPLAY">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathNodeShape.CATORDER_DISPLAY">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathNodeShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.OnTraceShape(CSharpFramework.ShapeTraceMode_e,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.ShapeTraceResult@)">
            <summary>
            Overridden trace function
            </summary>
            <param name="mode"></param>
            <param name="rayStart">ray start position</param>
            <param name="rayEnd">ray end position</param>
            <param name="result">trace result</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.EnsureHasEngineInstance">
            <summary>
            Helper function to guarantee that the node has a valid engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.SetEngineInstanceBaseProperties">
            <summary>
            overridden function to set/update all specific properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            overridden function to render the shape
            </summary>
            <param name="view">destination view</param>
            <param name="mode">render mode</param>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathNodeShape.IsPathCloning">
            <summary>
            Indicates whether the path is currently inside a cloning operation
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.AllowsToSetParent(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            This shape type cannot be dragged in the tree view
            </summary>
            <param name="newParent"></param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.PerformRelevantOperation(System.String,System.Int32,System.Int32)">
            <summary>
            Perform the relevant operation
            </summary>
            <param name="name"></param>
            <param name="iShapeIndex"></param>
            <param name="iShapeCount"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.Clone">
            <summary>
            Overridden clone function
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.UpdateTangentHotSpots">
            <summary>
            Creates or removes the hotspots. Important when mode changes
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.OnSelected">
            <summary>
            Overridden OnSelected function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.OnUnSelected">
            <summary>
            Overridden OnUnSelected function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.OnHotSpotRender(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathNodeShape._iPathNodeIndex">
            <summary>
            Internal value, do not use (use PathNodeIndex property instead)
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.UpdateNode">
            <summary>
            Updates the node's tangents because it changed position or a neighbour changed position
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.OnTransformationChanged">
            <summary>
            Overridden function to notify the parent path
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathNodeShape.SmoothTangents">
            <summary>
            Smooth the in/out tangent (without going through an action)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.EnginePathNode">
            <summary>
            accesses the engine instance as an object of type EngineInstancePathNode
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.CanCopyPaste">
            <summary>
            This shape type can not be copied or pasted
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.ParentPath">
            <summary>
            Returns the owner path shape
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.RelevantOperations">
            <summary>
            Get the relevant operations
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.ObjectKey">
            <summary>
            Gets or sets the object key, so the object can be searched in the engine
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.PathNodeIndex">
            <summary>
            Returns the index of this path node inside the parent's path
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.InType">
            <summary>
            Sets the tangent in-type to bezier (or linear)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.OutType">
            <summary>
            Sets the tangent in-type to bezier (or linear)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.TangentIn">
            <summary>
            The tangent-in vector (node local space)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.TangentOut">
            <summary>
            The tangent-out vector (node local space)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.DisplayMode">
            <summary>
            Editor display mode of path nodes (valid for all nodes)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.PreviousNode">
            <summary>
            Returns the previous node in the path
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.NextNode">
            <summary>
            Returns the next node in the path
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.InPosition">
            <summary>
            Return absolute position of the in-control point
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.OutPosition">
            <summary>
            Return absolute position of the out-control point
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.SmoothInTangent">
            <summary>
            Calculates the new tangent in vector for smooth mode
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.SmoothOutTangent">
            <summary>
            Calculates the new tangent out vector for smooth mode
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.BezierInTangent">
            <summary>
            Calculates the new tangent in vector for bezier mode
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathNodeShape.BezierOutTangent">
            <summary>
            Calculates the new tangent out vector for bezier mode
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.PathNodeShape.PathNodeInOutType">
            <summary>
            Enum type for path node in and out type.
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathNodeShape.PathNodeInOutType.Custom">
            <summary>
            User defined tangent
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathNodeShape.PathNodeInOutType.Linear">
            <summary>
            Always linear type
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathNodeShape.PathNodeInOutType.Smooth">
            <summary>
            Always smooth bezier type
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShapeCreator.GetPluginName">
            <summary>
            Get the name of the creator
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShapeCreator.GetPluginCategory">
            <summary>
            Get the category's name
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathShapeCreator.CreateShapeInstance">
            <summary>
            Overridden function to create the shape instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathShapeCreator.PathNodeIconIndex">
            <summary>
            Returns the icon index for path nodes
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CircleShapeCreator.GetPluginName">
            <summary>
            Get the name of the creator
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CircleShapeCreator.GetPluginCategory">
            <summary>
            Get the category's name
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CircleShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CircleShapeCreator.CreateShapeInstance">
            <summary>
            Overridden function to create the shape instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CircleShapeCreator.PathNodeIconIndex">
            <summary>
            Returns the icon index for path nodes
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.RecenterPivotAction">
            <summary>
            Action that recenter the pivot of the path
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.RecenterPivotAction.iImageIcon">
            <summary>
            get the icon
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.RecenterPivotAction.IconIndex">
            <summary>
            Get the layer icon that is also used in the layer list view
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Dialogs.SearchToolDlg">
            <summary>
            Search Panel.
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Dialogs.SearchToolDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.SearchToolDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.SearchToolDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.SearchToolDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Dialogs.SearchToolDlg.Active">
            <summary>
            Gets or sets the activate status of this tool
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.RenderTargetShape">
            <summary>
            DEPRECATED.
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.RenderTargetShape.CAT_VIEW">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.RenderTargetShape.CATORDER_VIEW">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.RenderTargetShape.CAT_TARGET">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.RenderTargetShape.CATORDER_TARGET">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.RenderTargetShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Overridden function
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.SetEngineInstanceBaseProperties">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.Clone">
            <summary>
            Overridden clone function
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Overridden function
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.OnSelected">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.SafeRemoveHotSpot(CSharpFramework.View.HotSpotBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.OnUnSelected">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.RenderTargetShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.RenderTargetShape.EngineRenderTarget">
            <summary>
            Returns the engine instance as a EngineInstanceRenderTarget
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.RenderTargetShape.CameraAngleX">
            <summary>
            The FOV in x-direction (degree)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.RenderTargetShape.CameraAngleY">
            <summary>
            The FOV in y-direction (degree)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.RenderTargetShape.NearClipDistance">
            <summary>
            The near clipping plane distance
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.RenderTargetShape.FarClipDistance">
            <summary>
            The far clipping plane distance
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.RenderTargetShape.ResolutionX">
            <summary>
            Defines the x-resolution of the render target. Must be a power of two.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.RenderTargetShape.ResolutionY">
            <summary>
            Defines the y-resolution of the render target. Must be a power of two.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.RenderTargetShape.TargetType">
            <summary>
            Defines the render target buffer type (depends on actual usage)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.RenderTargetShape.TargetName">
            <summary>
            Defines the target key to find the texture as a render target
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.LightGridDetailShape">
            <summary>
            LightGridDetailShape : shape that adds detail subdivision to the light grid
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridDetailShape.CAT_BOXSIZE">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridDetailShape.CAT_BOXSUBDIV">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridDetailShape.CAT_GLOBAL">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridDetailShape.CATORDER_BOXSIZE">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridDetailShape.CATORDER_BOXSUBDIV">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridDetailShape.CATORDER_GLOBAL">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridDetailShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="nodeName"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.SetEngineInstanceBaseProperties">
            <summary>
            overridden function to set/update all specific properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            overridden function to render the shape
            </summary>
            <param name="view">destination view</param>
            <param name="mode">render mode</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.GetGridBox">
            <summary>
            Get the absolute bounding box
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.Clone">
            <summary>
            This function must be overridden, since we have to reset the hotspots
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.GetStaticLightInfo(CSharpFramework.Scene.StaticLightInfo)">
            <summary>
            virtual function to collect information for static light update
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.OnSelected">
            <summary>
            Called when the shape is selected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.OnUnSelected">
            <summary>
            Called when the shape is unselected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when user starts dragging a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Called while the user drags a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when the user releases the mouse button on a hotspot
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridDetailShape.ParentingMode">
            <summary>
            Sets parenting mode to scene graph
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridDetailShape.BoxSize">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridDetailShape.Preview">
            <summary>
            Gets or sets the status of displaying the grid preview (for all detail box shapes)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridDetailShape.BoxSizeX">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridDetailShape.BoxSizeY">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridDetailShape.BoxSizeZ">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridDetailShape.SubDivX">
            <summary>
            get or set the number of grid subdivisions (x)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridDetailShape.SubDivY">
            <summary>
            get or set the number of grid subdivisions (y)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridDetailShape.SubDivZ">
            <summary>
            get or set the number of grid subdivisions (z)
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridDetailBoxCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="F:VisionEditorPlugin.Dialogs.BillboardContextDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.BillboardContextDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.BillboardContextDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Dialogs.BillboardContextDlg.RelevantSelection">
            <summary>
            Returns either selected billboards or all instances
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Tools.ColorMatrixParams">
            <summary>
            An instance of this class defines relevant parameters for generating a color matrix
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Tools.ColorMatrixParams.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Tools.ColorMatrixParams.Reset">
            <summary>
            Sets the defaults
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Tools.ColorMatrixParams.Clone">
            <summary>
            Clones the settings
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Tools.ColorMatrixParams.Dirty">
            <summary>
            Gets or sets the dirty flag
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Tools.ColorMatrixParams.Brightness">
            <summary>
            Gets or sets the brightness
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Tools.ColorMatrixParams.Contrast">
            <summary>
            Gets or sets the contrast
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Tools.ColorMatrixParams.Saturation">
            <summary>
            Gets or sets the saturation
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Tools.ColorMatrixParams.ColorMatrix">
            <summary>
            Accesses the color transformation matrix. This accessor calculates the 4x4 matrix from the properties
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Tools.LightingTweakParameter">
            <summary>
            Structure that defines a lighting configuration
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Tools.LightingTweakParameter.bAvailable">
            <summary>
            lighting information available at all
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Tools.LightingTweakParameter.bBaseLightingAvailable">
            <summary>
            Defines whether base lighting is available
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Tools.LightingTweakParameter.bRadiosityAvailable">
            <summary>
            Defines whether extra radiosity is available
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Tools.LightingTweakParameter.BaseLightingParams">
            <summary>
            Parameter Matrix for base lighting
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Tools.LightingTweakParameter.RadiosityParams">
            <summary>
            Parameter Matrix for radiosity lighting
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.TriggerBoxShape.CAT_BOXSIZE">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.TriggerBoxShape.CAT_BEHAVIOR">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.TriggerBoxShape.CAT_PREVIEW">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.TriggerBoxShape.CATORDER_BOXSIZE">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.TriggerBoxShape.CATORDER_BEHAVIOR">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.TriggerBoxShape.CATORDER_PREVIEW">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.TriggerBoxShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="nodeName"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.SetEngineInstanceBaseProperties">
            <summary>
            overridden function to set/update all specific properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            overridden function to render the shape
            </summary>
            <param name="view">destination view</param>
            <param name="mode">render mode</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.Clone">
            <summary>
            This function must be overridden, since we have to reset the hotspots
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.OnSelected">
            <summary>
            Called when the shape is selected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.OnUnSelected">
            <summary>
            Called when the shape is unselected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when user starts dragging a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Called while the user drags a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when the user releases the mouse button on a hotspot
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.TriggerBoxShape.BoxSize">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.TriggerBoxShape.TriggerShape">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.TriggerBoxShape.BoxSizeX">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.TriggerBoxShape.BoxSizeY">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.TriggerBoxShape.BoxSizeZ">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.TriggerBoxShape.SphereRadius">
            <summary>
            Radius of the trigger sphere. Maps to box x size
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.TriggerBoxShape.Preview3D">
            <summary>
            Indicates whether box should be shown in 3D view also when not selected
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.TriggerBoxShape.Preview2D">
            <summary>
            Indicates whether box should be shown in the 2D overview map
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.TriggerBoxShape.PreviewColor">
            <summary>
            The color used to preview the box (both 3D and 2D)
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TriggerBoxShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.LinkTargetConstraint">
            <summary>
            Link target class for constraint target
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkTargetConstraint.#ctor(CSharpFramework.Shapes.Shape3D,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="primaryStringId"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkTargetConstraint.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Default constructor used by the factory class
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkTargetConstraint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkTargetConstraint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LinkTargetConstraint.DefaultHotspotIconFilename">
            <summary>
            get hot spot icon filename
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ParticleEditorArgs">
            <summary>
            Event args for the particle editor
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleEditorArgs.#ctor(VisionEditorPlugin.Shapes.ParticleGroupShape,VisionEditorPlugin.Shapes.ParticleEditorArgs.Action)">
            <summary>
            constructor
            </summary>
            <param name="_shape"></param>
            <param name="_action"></param>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ParticleEditorArgs.action">
            <summary>
            defines the action to be performed in the editor
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ParticleEditorArgs.ParticleShape">
            <summary>
            defines the particle shape that triggered the event
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ParticleEditorArgs.Success">
            <summary>
            Should be set to true by the editor
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ParticleEditorArgs.ErrorString">
            <summary>
            Should be set to error string if Success==false
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ParticleEditorArgs.Action">
            <summary>
            defines the action to be performed in the editor
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ParticleEditorArgs.Action.Edit">
            <summary>
            Informs the editor, that the template of this particle shape should be edited
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ParticleEditorArgs.Action.UpdateUI">
            <summary>
            Informs the editor, that the UI has to be updated
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ParticleGroupShape">
            <summary>
            Particle emitter shape.
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ParticleGroupShape.CAT_PROPERTIES">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ParticleGroupShape.CATORDER_PROPERTIES">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ParticleGroupShape.CAT_WIND">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ParticleGroupShape.CATORDER_WIND">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ParticleGroupShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleGroupShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="nodeName">shape name</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleGroupShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleGroupShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleGroupShape.SetEngineInstanceBaseProperties">
            <summary>
            overridden function to set/update all specific properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleGroupShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            overridden function to render the shape
            </summary>
            <param name="view">destination view</param>
            <param name="mode">render mode</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleGroupShape.PerformRelevantOperation(System.String,System.Int32,System.Int32)">
            <summary>
            Overridden function to perform the relevant operation
            </summary>
            <param name="name"></param>
            <param name="iShapeIndex"></param>
            <param name="iShapeCount"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleGroupShape.OnTraceShape(CSharpFramework.ShapeTraceMode_e,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.ShapeTraceResult@)">
            <summary>
            Overridden trace function
            </summary>
            <param name="mode"></param>
            <param name="rayStart">ray start position</param>
            <param name="rayEnd">ray end position</param>
            <param name="result">trace result</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleGroupShape.CreateAllLinks">
            <summary>
            Create all link sources and targets provided by this shape
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleGroupShape.CanLink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Check whether src can be linked to target. Either src or target has this shape as owner
            </summary>
            <param name="src">the link source</param>
            <param name="target">the link target</param>
            <returns>true, if the two can be linked</returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleGroupShape.OnLink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Perform the actual linking. Either src or target has this shape as owner
            </summary>
            <param name="src">the link source</param>
            <param name="target">the link target</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleGroupShape.OnUnlink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            unlinks a target from a source. Either src or target has this shape as owner
            </summary>
            <param name="src">the link source</param>
            <param name="target">the link target</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleGroupShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleGroupShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ParticleGroupShape.LayerDescriptionEditor">
            <summary>
            Static instance of user-installable string editor. This string editor is used to edit the description of the layer
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleGroupShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ParticleGroupShape.EnginePGroup">
            <summary>
            Return the engine instance casted to EngineInstanceParticleGroup
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ParticleGroupShape.RelevantOperations">
            <summary>
            Overridden function to get the relevant operations for this shape type
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ParticleGroupShape.EffectFile">
            <summary>
            get or set particle effect XML file
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ParticleGroupShape.HasEffect">
            <summary>
            Indicates whether this instance has an effect
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ParticleGroupShape.VisibleBitmask">
            <summary>
            Effect visibility bitmask that determines the visible status in the rendering contexts
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ParticleGroupShape.AmbientColor">
            <summary>
            Defines the individual effect ambient lighting color
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ParticleGroupShape.AmbientColorLiveUpdate">
            <summary>
            Proxy property used for color live update (See PropertyLiveUpdate attribute in LightColor property)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ParticleGroupShape.Paused">
            <summary>
            Gets or sets the paused status
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ParticleGroupShape.Halted">
            <summary>
            Gets or sets the paused status
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ParticleGroupShape.RandomBaseSeed">
            <summary>
            Gets or sets the custom random number generator seed
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ParticleGroupShape.Intensity">
            <summary>
            Individual intensity of the instance
            </summary>
        </member>
        <member name="E:VisionEditorPlugin.Shapes.ParticleGroupShape.Editor">
            <summary>
            This event gets triggered if something happed that might or should affect the particle editor
            which listens to this event
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ParticleGroupShape.PreviewType">
            <summary>
            This global property should be set by the particle editor so that the engine instance can render some preview properties
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ParticleGroupShape.EditorEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ParticleSystemCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.CameraPositionShape">
            <summary>
            Class that represents a camera position inside vForge. It uses shortcut keys to set the editor camera
            to the position of this shape
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.CameraPositionShape.CAT_CAMERA">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.CameraPositionShape.CATORDER_CAMERA">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.CameraPositionShape.CAT_VIEW">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.CameraPositionShape.CATORDER_VIEW">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.CameraPositionShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShape.OnAddedToScene">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShape.OnRemoveFromScene">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShape.GetLocalBoundingBox(CSharpFramework.Math.BoundingBox@)">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShape.OnDoubleClick">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShape.PerformRelevantOperation(System.String,System.Int32,System.Int32)">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShape.SetEditorCameraPosition">
            <summary>
            Modifies the editor camera position
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShape.Clone">
            <summary>
            Overridden clone function
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CameraPositionShape.RelevantOperations">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CameraPositionShape.ShortCut">
            <summary>
            Optionally defines a keyboard hotkey to jump to this camera in the editor. The hotkey binding must not overlap with other hotkeys.
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.CameraPositionShape.CameraPositionShortCut">
            <summary>
            Overridden shortcut class
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShapeCreator.GetPluginName">
            <summary>
            Get the name of the creator
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShapeCreator.GetPluginCategory">
            <summary>
            Get the category's name
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CameraPositionShapeCreator.CreateShapeInstance">
            <summary>
            Overridden function to create the shape instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.LinkSourceVisiblity">
            <summary>
            Link source class for a visibility object
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkSourceVisiblity.#ctor(CSharpFramework.Shapes.Shape3D,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="primaryStringId"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkSourceVisiblity.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Default constructor used by the factory class
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkSourceVisiblity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkSourceVisiblity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LinkSourceVisiblity.DefaultHotspotIconFilename">
            <summary>
            Get the icon filename
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.LinkTargetVisiblity">
            <summary>
            Link target class for constraint target
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkTargetVisiblity.#ctor(CSharpFramework.Shapes.Shape3D,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="primaryStringId"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkTargetVisiblity.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Default constructor used by the factory class
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkTargetVisiblity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkTargetVisiblity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LinkTargetVisiblity.DefaultHotspotIconFilename">
            <summary>
            get hot spot icon filename
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.VisibilityObjectShape">
            <summary>
            VisibilityObjectShape : corresponds to VisVisibilityObject_cl
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.VisibilityObjectShape.CAT_BOXSIZE">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.VisibilityObjectShape.CATORDER_BOXSIZE">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.VisibilityObjectShape.CAT_TESTFLAGS">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.VisibilityObjectShape.CATORDER_TESTFLAGS">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.VisibilityObjectShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="nodeName"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.SetEngineInstanceBaseProperties">
            <summary>
            overridden function to set/update all specific properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            overridden function to render the shape
            </summary>
            <param name="view">destination view</param>
            <param name="mode">render mode</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.Clone">
            <summary>
            This function must be overridden, since we have to reset the hotspots
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.OnSelected">
            <summary>
            Called when the shape is selected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.OnUnSelected">
            <summary>
            Called when the shape is unselected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when user starts dragging a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Called while the user drags a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when the user releases the mouse button on a hotspot
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.CreateAllLinks">
            <summary>
            Create all link sources and targets provided by this shape
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.CanLink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Check whether src can be linked to target. Either src or target has this shape as owner
            </summary>
            <param name="src">the link source</param>
            <param name="target">the link target</param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VisibilityObjectShape.BoxSize">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VisibilityObjectShape.BoxSizeX">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VisibilityObjectShape.BoxSizeY">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VisibilityObjectShape.BoxSizeZ">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VisibilityObjectShape.Active">
            <summary>
            If enabled, this visibility object performs hardware occlusion test
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VisibilityObjectShape.FrustumTest">
            <summary>
            If enabled, this visibility object performs a frustum test
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VisibilityObjectShape.PortalTest">
            <summary>
            If enabled, this visibility object performs portal tests
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VisibilityObjectShape.HardwareOcclusionTest">
            <summary>
            If enabled, this visibility object performs hardware occlusion test
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VisibilityObjectShape.FarclipDistance">
            <summary>
            Determines the distance to camera at which this visibility object is clipped. A value of smaller than zero will not clip the object at distance.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VisibilityObjectShape.ContextBitmask">
            <summary>
            Set the bitmask that is used to dtermine in which render context this object is active, e.g. 1 for main view.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VisibilityObjectCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.SunglareShape">
            <summary>
            Deprecated shape class, not used anymore
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.SunglareShape.CAT_PROPERTIES">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.SunglareShape.CATORDER_PROPERTIES">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.SunglareShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.SunglareShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="nodeName">Shape name</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.SunglareShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.SunglareShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.SunglareShape.SetEngineInstanceBaseProperties">
            <summary>
            overridden function to set/update all specific properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.SunglareShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            overridden function to render the shape
            </summary>
            <param name="view">destination view</param>
            <param name="mode">render mode</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.SunglareShape.Clone">
            <summary>
            This function must be overridden, since we have to reset the hotspots
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.SunglareShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.SunglareShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.SunglareShape.GlareColorColorLiveUpdate">
            <summary>
            Proxy property used for color live update (See PropertyLiveUpdate attribute in LightColor property)
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.CollisionLayerTypeConverter">
            <summary>
            String converter class to enumerate the 32 collision layer names
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CollisionLayerTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CollisionLayerTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CollisionLayerTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape.CAT_SETTINGS">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape.CATORDER_SETTINGS">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape.CAT_LOD">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape.CATORDER_LOD">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape.CAT_LIGHTING">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape.CATORDER_LIGHTING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape.CAT_STATICLIGHTING">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape.CATORDER_STATICLIGHTING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape.CAT_PHYSICS">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape.CATORDER_PHYSICS">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape.CAT_PREVIEW">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape.CATORDER_PREVIEW">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshShape.OnSceneEvent(CSharpFramework.SceneEventArgs)">
            <summary>
            Listen to the global SceneEvent callback to respond to mesh reloading
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape._navMeshUsage">
            <summary>
            Override this property to add support for it. Note that loading/saving is handled through base class already
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.StaticMeshShape._objectKey">
            <summary>
            Object key string
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshShape.OnSelected">
            <summary>
            Overridden selection function. Adds the hotspots
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshShape.OnUnSelected">
            <summary>
            Overridden un-selection function. Removes the hotspots
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridden hot spot handle function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridden hot spot handle function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridden hot spot handle function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Overridden hot spot handle function
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshShape.PerformRelevantOperation(System.String,System.Int32,System.Int32)">
            <summary>
            Overridden function to perform the relevant operation
            </summary>
            <param name="name"></param>
            <param name="iShapeIndex"></param>
            <param name="iShapeCount"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.MeshFileName">
            <summary>
            Mesh File Property (uses filename editor)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.LowResMeshFileName">
            <summary>
            Mesh File Property (uses filename editor)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.HasMeshFile">
            <summary>
            Indicates whether this mesh as a mesh file assigned
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.VisibleBitmask">
            <summary>
            Filter bitflags for context rendering
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.LightInfluenceBitmask">
            <summary>
            Filter bitflags for static/dynamic light influence (0 for not affected by light)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.CastStaticShadows">
            <summary>
            Indicates whether this mesh is supposed to cast a static shadow
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.CastDynamicShadows">
            <summary>
            Indicates whether this mesh is supposed to cast a dynamic stencil shadows
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.ShowLightgridWidget">
            <summary>
            If enabled, a 3D widget will be rendered that allows to modify the offset in the 3D view. This property wraps around a static bool so it affects all entities
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.LightGridSampleOfs">
            <summary>
            Defines the relative position offset that is used to gather the light grid sample
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.SampleOfsX">
            <summary>
            Gets or sets the relative x position offset that is used to gather the light grid sample
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.SampleOfsY">
            <summary>
            Gets or sets the relative y position offset that is used to gather the light grid sample
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.SampleOfsZ">
            <summary>
            Gets or sets the relative z position offset that is used to gather the light grid sample
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.LightmapSizeMultiplier">
            <summary>
            When materials in this mesh are lightmapped, this value defines a relative lightmap size factor to increase/decrease lightmap resolution for this instance
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.CollisionBitmask">
            <summary>
            Filter bitflags for collision. Depends on physics implementation
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.PreviewVisibility">
            <summary>
            If enabled, visibility zones and portals are rendered along with the selected mesh
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.MaterialProvider">
            <summary>
            Gets the material provider of this mesh's resource
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.ObjectKey">
            <summary>
            Gets or sets the object key, so the object can be searched in the engine
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.StaticMeshShape.RelevantOperations">
            <summary>
            Overridden function to get the relevant operations for this shape type
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.StaticMeshShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Dialogs.LightmapToolDlg">
            <summary>
            DEPRECATED.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.LightmapToolDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.LightmapToolDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.LightmapToolDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.LightmapToolDlg.OnCut">
            <summary>
            Overridden IEditorComponent function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.LightmapToolDlg.OnCopy">
            <summary>
            Overridden IEditorComponent function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.LightmapToolDlg.OnPaste">
            <summary>
            Overridden IEditorComponent function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.LightmapToolDlg.OnDelete">
            <summary>
            Overridden IEditorComponent function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.LightmapToolDlg.HasSelection">
            <summary>
            Overridden IEditorComponent function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Dialogs.LightmapToolDlg.Active">
            <summary>
            Gets or sets the activate status of this tool
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Dialogs.LightmapToolDlg.LightmapsEnabled">
            <summary>
            Enables or disables all lightmap relevant controls
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Dialogs.LightmapToolDlg.LightGridEnabled">
            <summary>
            Enables or disables all lightgrid relevant controls
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Dialogs.LightmapToolDlg.UpdateLockCounter">
            <summary>
            Allows to lock or unlock the update to perform multiple updates
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Dialogs.LightmapToolDlg.BaseParams">
            <summary>
            gets or sets the parameter for base lighting
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Dialogs.LightmapToolDlg.NewBaseParams">
            <summary>
            params while modifying
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Dialogs.LightmapToolDlg.RadiosityParams">
            <summary>
            gets or sets the parameter for radiosity lighting
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Dialogs.LightmapToolDlg.NewRadiosityParams">
            <summary>
            params while modifying
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Dialogs.LightmapToolDlg.Clipboard">
            <summary>
            Overridden IEditorComponent function
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Dialogs.LightmapToolDlg.Target">
            <summary>
            Gets or sets the tweak target
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Dialogs.LightmapToolDlg.TweakTarget">
            <summary>
            Defines the editing target
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Dialogs.LightmapToolDlg.TweakTarget.None">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Dialogs.LightmapToolDlg.TweakTarget.Lightmaps">
            <summary>
            LIghtmaps are edited
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Dialogs.LightmapToolDlg.TweakTarget.LightGrid">
            <summary>
            Light grid is edited
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Dialogs.ColorGradingToolDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.ColorGradingToolDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.ColorGradingToolDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.LocalIDDict">
            <summary>
            An instance of this class maps local ID (inside prefab) to scene local IDs
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LocalIDDict.SetCustomSerializationObject(System.UInt32,System.Object)">
            <summary>
            For ICustomPrefabSerialization implementations
            </summary>
            <param name="iLocalID"></param>
            <param name="customObj"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LocalIDDict.GetCustomSerializationObject(System.UInt32,System.Object@)">
            <summary>
            For ICustomPrefabSerialization implementations
            </summary>
            <param name="iLocalID"></param>
            <param name="customObj"></param>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.LocalIDDictDict">
            <summary>
            An instance of this class holds a list with prefab shape paths (string) each associated with an instance of LocalIDDict which in turn
            maps local IDs inside that nested prefab. An instance of this class is held by a non-nested prefab shape to be able to preserve unique IDs in
            nested sub-prefabs.
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PrefabShape.CAT_PREFAB">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PrefabShape.CATORDER_PREFAB">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PrefabShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.TriggerBeforePrefabCollapsed">
            <summary>
            Triggers OnBeforePrefabCollapsed event
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.TriggerAfterPrefabCollapsed">
            <summary>
            Triggers OnAfterPrefabCollapsed event 
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Overridden function
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.SetEngineInstanceBaseProperties">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.GetPropertyFlags(CSharpFramework.Scene.PropertyFlagsProviderInfo)">
            <summary>
            Hide some properties under certain circumstances
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.SetParent(CSharpFramework.Shapes.ShapeBase,System.Boolean)">
            <summary>
            Makes sure that child shapes are properly attached to the new parent
            </summary>
            <param name="newParent"></param>
            <param name="bValidateName"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.Clone">
            <summary>
            This function must be overridden, since we have to reset the hotspots
            </summary>
            <returns></returns>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PrefabShape._nestedPrefabs">
            <summary>
            This list holds instances of class LocalIDDict for every nested prefab. The reference to the nested prefab is done by path string, 
            because local IDs are not yet resolved - this would be too complicated.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.BuildNestedPrefabIDTables(CSharpFramework.ShapeCollection)">
            <summary>
            Before saving, a fresh list with nested prefabs is generated
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.SetPrefabInternal(CSharpFramework.Scene.PrefabDesc)">
            <summary>
            Just sets the reference; For internal use
            </summary>
            <param name="newPrefab"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.AllowsToAddChild(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Can only add children in editable mode
            </summary>
            <param name="newChild"></param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.RecursiveFlagShape(CSharpFramework.Shapes.ShapeBase,System.Boolean)">
            <summary>
            Recursively flags all children shapes
            </summary>
            <param name="shape"></param>
            <param name="bStatus"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.RecursiveMatchUniqueID(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Reassign unique IDs under which the shapes were saved
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.GetIDMappingFromPrefabRoot(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Traverses the graph up until it finds the root prefab. From that it grabs the ID lookup dictionary that corresponds to this nested prefab
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.RecreateShapes(System.Boolean,CSharpFramework.Scene.PrefabDesc)">
            <summary>
            Rebuilds the sub shapes defined by the prefab with the current filename
            </summary>
            <param name="bFromLoading">if true, this function does not call the OnAddedToScene functions</param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.PrefabDesc_OnPrefabSaved(System.Object,System.EventArgs)">
            <summary>
            Respond to changes of prefabs
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.IScene_PropertyChanged(System.Object,CSharpFramework.PropertyChangedArgs)">
            <summary>
            Callback to propagate per-instance changes to the shapes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.GetSnapPointList">
            <summary>
            Overridden function, collect all snap points from children
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PrefabShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="E:VisionEditorPlugin.Shapes.PrefabShape.OnBeforePrefabCollapsed">
            <summary>
            This event gets fired before a prefab is collapsed in vForge. The sender is the prefab shape
            </summary>
        </member>
        <member name="E:VisionEditorPlugin.Shapes.PrefabShape.OnAfterPrefabCollapsed">
            <summary>
            This event gets fired after a prefab is collapsed in vForge. The sender is the prefab shape
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PrefabShape.Broken">
            <summary>
            Indicates whether the prefab file could not be loaded
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PrefabShape.Convertible">
            <summary>
            Hint flag from the header files that indicates whether this prefab can be made editable in vForge
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PrefabShape.EditableInPrefab">
            <summary>
            Internal property for prefab
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PrefabShape.Filename">
            <summary>
            Gets/sets the filename of the prefab (implements the IPrefabShape function)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PrefabShape.PerInstanceParameter">
            <summary>
            A prefab definition can expose per-instance variables which can be edited here
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PrefabShape.PerInstanceParameterString">
            <summary>
            Expose the per-instance parameters as a string for nested prefabs
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PrefabShape.Prefab">
            <summary>
            Overidden function
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.MakePrefabEditableAction">
            <summary>
            Action that makes a prefab editable
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.MakePrefabEditableAction.iImageIcon">
            <summary>
            get the icon
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MakePrefabEditableAction.IconIndex">
            <summary>
            Get the layer icon that is also used in the layer list view
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ResavePrefabAction">
            <summary>
            Action that makes a prefab editable
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ResavePrefabAction.DelegateUniqueIDInPrefabChange(System.Collections.Generic.Dictionary{CSharpFramework.Shapes.ShapePath,System.UInt64})">
            <summary>
            This function fires the IScene.SendUniqueIDInPrefabChangedEvent and builds up appropriate argument list
            </summary>
            <param name="prefabChildrenPathsWithOldUniqueID">Dictionary containing the ShapePath as Key and the old UniqueID as value</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ResavePrefabAction.AddChildRecursiveToPrefabChildrenList(CSharpFramework.Shapes.ShapeBase,System.Collections.Generic.Dictionary{CSharpFramework.Shapes.ShapePath,System.UInt64})">
            <summary>
            helper function to add all shapePaths of a prefab recursively to a list and store their current uniqueID
            </summary>
            <param name="shape"></param>
            <param name="prefabChildrenPathsWithOldUniqueID"></param>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ResavePrefabAction.iImageIcon">
            <summary>
            get the icon
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ResavePrefabAction.IconIndex">
            <summary>
            Get the layer icon that is also used in the layer list view
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Actions.LightmapColorMatrixChangedAction">
            <summary>
            This action changes the color matrix (brightness, contrast, ...) for lightmap update
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Actions.LightmapColorMatrixChangedAction.#ctor(VisionEditorPlugin.Dialogs.LightmapToolDlg,System.String,VisionEditorPlugin.Tools.ColorMatrixParams,VisionEditorPlugin.Tools.ColorMatrixParams,VisionEditorPlugin.Tools.ColorMatrixParams,VisionEditorPlugin.Tools.ColorMatrixParams)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Actions.LightmapColorMatrixChangedAction.Undo">
            <summary>
            Sets the old color matrix
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Actions.LightmapColorMatrixChangedAction.Do">
            <summary>
            Sets the new color matrix
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Actions.LightmapColorMatrixChangedAction.ShortName">
            <summary>
            Short name of the action, to show in the menu
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Actions.LightmapColorMatrixChangedAction.LongName">
            <summary>
            Long name of the action, to show in the history
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Actions.LightmapColorMatrixChangedAction.IconIndex">
            <summary>
            Return the icon index for this action
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Tests.ProjectorShapeTest.SetUp">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Tests.ProjectorShapeTest.TearDown">
            <summary>
            Clears the test data
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.PostProcessingShape">
            <summary>
            Shape for post processor.
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PostProcessingShape.CAT_POSTPROCESSING">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PostProcessingShape.CATORDER_POSTPROCESSING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PostProcessingShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Overridden function to create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.RemoveEngineInstance(System.Boolean)">
            <summary>
            Overridden function to remove the engine instance
            </summary>
            <param name="bRemoveChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.SetEngineInstanceBaseProperties">
            <summary>
            Overridden function to set all shape's properties (color, ...) on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.Clone">
            <summary>
            Overridden clone function that removes the hotspots again
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.OnDeserialization">
            <summary>
            finalize the effect properties
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.PerformRelevantOperation(System.String,System.Int32,System.Int32)">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.Activate">
            <summary>
            Activate this postprocessing effect
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.DeActivate">
            <summary>
            Deactivate this postprocessing effect
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.OnAddedToScene">
            <summary>
            overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.OnRemoveFromScene">
            <summary>
            overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.GetPropertyValueAsString(System.String)">
            <summary>
            Returns the value of a property in the engine format (string representation)
            </summary>
            <param name="propertyName">Name of the entity property</param>
            <returns>String value of the property in the engine format</returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PostProcessingShape.EnginePostProcessing">
            <summary>
            helper function to access the engine instance as EngineInstancePostProcessingEffect
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PostProcessingShape.RelevantOperations">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PostProcessingShape.EffectClass">
            <summary>
            Effect template name
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PostProcessingShape.Key">
            <summary>
            Effect key
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PostProcessingShape.Active">
            <summary>
            Pseudo property that activates the effect
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PostProcessingShape.PropertyManager">
            <summary>
            The property manager that keeps the property type classes
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PostProcessingShape.EffectProperties">
            <summary>
            Effect specific property opject
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.PostProcessingShape.PostProcessingClassConverter">
            <summary>
            Class that provides the dynamic dropdown list for the classes
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.PostProcessingClassConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: We provide standard values
            </summary>
            <param name="context">The descriptor context</param>
            <returns>In our case : true</returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.PostProcessingClassConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: Returns the standard values that the dropdown should have
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Collection of standard values</returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShape.PostProcessingClassConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: 
            We also allow non-standard values (i.e. when an entity class is missing/unknown)
            </summary>
            <param name="context">The descriptor context</param>
            <returns>In our case : false</returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PostProcessingShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.LinkSourceConstraint">
            <summary>
            Link source class for a constraint
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkSourceConstraint.#ctor(CSharpFramework.Shapes.Shape3D,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="primaryStringId"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkSourceConstraint.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Default constructor used by the factory class
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkSourceConstraint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LinkSourceConstraint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LinkSourceConstraint.DefaultHotspotIconFilename">
            <summary>
            Get the icon filename
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ConstraintShape">
            <summary>
            The constraint shape class
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ConstraintShape.CAT_TYPE">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ConstraintShape.CAT_PROPERTIES">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ConstraintShape.CATORDER_TYPE">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ConstraintShape.CATORDER_PROPERTIES">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ConstraintShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.#ctor(System.String,VisionManaged.EngineInstanceConstraint.ConstraintType_e)">
            <summary>
            Constructor
            </summary>
            <param name="nodeName">name of the node</param>
            <param name="_type">constarint type. Can be changed but is used for some special init sizes</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.#ctor(System.String)">
            <summary>
            Base constructor using name only (important for prefabs)
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            overridden function to render the shape
            </summary>
            <param name="view">destination view</param>
            <param name="mode">render mode</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.SetEngineInstanceBaseProperties">
            <summary>
            overridden function to set/update all specific properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.Clone">
            <summary>
            This function must be overridden, since we have to reset the hotspots
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.OnSelected">
            <summary>
            Called when the shape is selected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.OnUnSelected">
            <summary>
            Called when the shape is unselected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when user starts dragging a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Called while the user drags a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when the user releases the mouse button on a hotspot
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.OnHotSpotRender(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.CreateAllLinks">
            <summary>
            Create all link sources and targets provided by this shape
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.CanLink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Check whether src can be linked to target
            </summary>
            <param name="src"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintType">
            <summary>
            Get the constraint type
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.OnCollide">
            <summary>
            Get the OnCollide behaviour
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.Persistance">
            <summary>
            Get the persistance
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.AffectBitmask">
            <summary>
            Get the bitmask for affecting particle layers
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties">
            <summary>
            Get the type specific sub-properties
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.Radius">
            <summary>
            Constraint radius
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.Inside">
            <summary>
            Inside flag
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.InfiniteExtent">
            <summary>
            Inside flag
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.Intensity">
            <summary>
            Constraint intensity
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConeAngle">
            <summary>
            Constraint cone angle
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.Length">
            <summary>
            Constraint length
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.Randomness">
            <summary>
            Constraint length
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.BoxSize">
            <summary>
            Constraint box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.BoxSizeX">
            <summary>
            Constraint box size x
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.BoxSizeY">
            <summary>
            Constraint box size y
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.BoxSizeZ">
            <summary>
            Constraint box size z
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ReflectionNoise">
            <summary>
            Perturbation noise for reflection
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintPropertiesBase">
            <summary>
            ConstraintPropertiesBase : Base class of specific constraint properties. Allows to set the properties of the parent,
            thus it needs the owner parent in the constructor
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintPropertiesBase.#ctor(VisionEditorPlugin.Shapes.ConstraintShape)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintPropertiesBase.Owner">
            <summary>
            Owner constraint
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_GroundPlane">
            <summary>
            plane specific constraint properties
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_GroundPlane.#ctor(VisionEditorPlugin.Shapes.ConstraintShape)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Plane">
            <summary>
            plane specific constraint properties
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Plane.#ctor(VisionEditorPlugin.Shapes.ConstraintShape)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Plane.InfiniteExtent">
            <summary>
            plane size property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Plane.PlaneSizeX">
            <summary>
            plane size property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Plane.PlaneSizeY">
            <summary>
            plane size property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Plane.PlaneThickness">
            <summary>
            plane size property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Plane.ReflectionNoise">
            <summary>
            Perturbation noise for reflection
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Sphere">
            <summary>
            sphere specific constraint properties (also used for cylinders)
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Sphere.#ctor(VisionEditorPlugin.Shapes.ConstraintShape)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Sphere.Radius">
            <summary>
            Radius property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Sphere.Inside">
            <summary>
            Inside property
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Point">
            <summary>
            point specific constraint properties (also used for cylinders)
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Point.#ctor(VisionEditorPlugin.Shapes.ConstraintShape)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Point.SearchRadius">
            <summary>
            Radius property
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Box">
            <summary>
            box specific constraint properties
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Box.#ctor(VisionEditorPlugin.Shapes.ConstraintShape)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Box.BoxSize">
            <summary>
            box size property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Box.SizeX">
            <summary>
            box size property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Box.SizeY">
            <summary>
            box size property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Box.SizeZ">
            <summary>
            box size property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Box.Inside">
            <summary>
            inside flag
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Fan">
            <summary>
            fan specific constraint properties
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Fan.#ctor(VisionEditorPlugin.Shapes.ConstraintShape)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Fan.Intensity">
            <summary>
            intensity property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Fan.ConeAngle">
            <summary>
            cone angle property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Fan.Randomness">
            <summary>
            cone angle property
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Cyclone">
            <summary>
            cyclone specific constraint properties
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Cyclone.#ctor(VisionEditorPlugin.Shapes.ConstraintShape)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Cyclone.Length">
            <summary>
            Length property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Cyclone.Radius">
            <summary>
            Radius property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_Cyclone.Intensity">
            <summary>
            Intensity property
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_GravityPoint">
            <summary>
            sphere specific constraint properties (also used for cylinders)
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_GravityPoint.#ctor(VisionEditorPlugin.Shapes.ConstraintShape)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_GravityPoint.Radius">
            <summary>
            Radius property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_GravityPoint.Intensity">
            <summary>
            Inside property
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_CameraBox">
            <summary>
            sphere specific constraint properties (also used for cylinders)
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_CameraBox.#ctor(VisionEditorPlugin.Shapes.ConstraintShape)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_CameraBox.SizeX">
            <summary>
            box size property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_CameraBox.SizeY">
            <summary>
            box size property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintProperties_CameraBox.SizeZ">
            <summary>
            box size property
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintClassConverter">
            <summary>
            Class that provides the dynamic dropdown list for the entity classes
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintClassConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: We provide standard values
            </summary>
            <param name="context">The descriptor context</param>
            <returns>In our case : true</returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintClassConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: Returns the standard values that the dropdown should have
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Collection of standard values</returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintShape.ConstraintClassConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: 
            We also allow non-standard values (i.e. when an entity class is missing/unknown)
            </summary>
            <param name="context">The descriptor context</param>
            <returns>In our case : false</returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ConstraintCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ClothObjectShape">
            <summary>
            This shape represents a cloth object in the engine
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ClothObjectShape.CAT_CLOTHMODEL">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ClothObjectShape.CATORDER_CLOTHMODEL">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ClothObjectShape.CAT_CLOTHPHYSICS">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ClothObjectShape.CATORDER_CLOTHPHYSICS">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ClothObjectShape.CAT_LIGHTING">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ClothObjectShape.CATORDER_LIGHTING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ClothObjectShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.#ctor(System.String,System.String)">
            <summary>
            Shape contructor
            </summary>
            <param name="name">name of the shape</param>
            <param name="modelFile">Initial model file. Can be null</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.SetEngineInstanceBaseProperties">
            <summary>
            Sets all properties of the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.Clone">
            <summary>
            This function must be overridden, since we have to reset the hotspots
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.CreateAllLinks">
            <summary>
            Create all link sources and targets provided by this shape
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.CanLink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Check whether src can be linked to target
            </summary>
            <param name="src"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.OnLink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Performs the actal linking on engine instances
            </summary>
            <param name="src"></param>
            <param name="target"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.OnUnlink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            unlinks a target from a source. Either src or target has this shape as owner
            </summary>
            <param name="src">the link source</param>
            <param name="target">the link target</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.OnSelected">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.OnUnSelected">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.OnHotSpotRender(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ClothObjectShape.EngineClothObj">
            <summary>
            Access the engine instance as EngineInstanceClothObject
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ClothObjectShape.ModelFile">
            <summary>
            Gets or sets the v3o model file that is used to generate a cloth mesh
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ClothObjectShape.VisibleBitmask">
            <summary>
            Cloth Entity visibility bitmask that determines the visible status in the rendering contexts
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ClothObjectShape.SimulationTicks">
            <summary>
            Get or set the number of physics simulation ticks per second. 0 for each frame
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ClothObjectShape.Gravity">
            <summary>
            Get or set the gravity constant
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ClothObjectShape.SimulateWhenVisible">
            <summary>
            Get or set the status for simulation
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ClothObjectShape.InitialPhysicsTickCount">
            <summary>
            Defines the number of physics simulation ticks that are performed at startup to avoid artifacts
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ClothObjectShape.LightGridSampleOfs">
            <summary>
            Defines the relative position offset that is used to gather the light grid sample
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ClothObjectShape.CastDynamicShadows">
            <summary>
            If enabled, the cloth mesh casts a dynamic stencil shadow for dynamic lights
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ClothObjectShape.LightInfluenceBitmask">
            <summary>
            Bitflag filter mask that determines which dynamic lights influence this entity. See also dynamic light's ObjectInfluenceMask property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ClothObjectShape.ShowLightgridWidget">
            <summary>
            If enabled, a 3D widget will be rendered that allows to modify the offset in the 3D view. This property wraps around a static bool so it affects all entities
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ClothObjectShape.SampleOfsX">
            <summary>
            Gets or sets the relative x position offset that is used to gather the light grid sample
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ClothObjectShape.SampleOfsY">
            <summary>
            Gets or sets the relative y position offset that is used to gather the light grid sample
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ClothObjectShape.SampleOfsZ">
            <summary>
            Gets or sets the relative z position offset that is used to gather the light grid sample
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ClothObjectCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.BillboardDropToFloorAction">
            <summary>
            Custom action that drops every single billboard to floor
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ModifyBillboardsAction">
            <summary>
            Generic action for modifying a subset of instances. Create an instance of this action, then access action.NewInstances
            and modify the elements in this array. Then fire this action.
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.BillboardGroupShape.CAT_BILLBOARDS">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.BillboardGroupShape.CATORDER_BILLBOARDS">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.BillboardGroupShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.BillboardGroupShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.BillboardGroupShape._objectKey">
            <summary>
            Object key string
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.BillboardGroupShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.BillboardGroupShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.BillboardGroupShape.Clone">
            <summary>
            Overridden clone function
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.BillboardGroupShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.BillboardGroupShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.BillboardGroupShape.EngineMesh">
            <summary>
            Helper to access engine instance as EngineInstanceBillboardGroup
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.BillboardGroupShape.ModulationColorLiveUpdate">
            <summary>
            Proxy property used for color live update (See PropertyLiveUpdate attribute in LightColor property)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.BillboardGroupShape.ObjectKey">
            <summary>
            Gets or sets the object key, so the object can be searched in the engine
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.BillboardGroupShapeCreator.GetPluginName">
            <summary>
            Get the name of the creator
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.BillboardGroupShapeCreator.GetPluginCategory">
            <summary>
            Get the category's name
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.BillboardGroupShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.BillboardGroupShapeCreator.CreateShapeInstance">
            <summary>
            Overridden function to create the shape instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Tests.StaticMeshTest.SetUp">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Tests.StaticMeshTest.TearDown">
            <summary>
            Clears the test data
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.VolumetricConeShape">
            <summary>
            Shape that defines a volumetric cone
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.VolumetricConeShape.CAT_PROPERTIES">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.VolumetricConeShape.CATORDER_PROPERTIES">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.VolumetricConeShape.CAT_DYNAMICSHADOWS">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.VolumetricConeShape.CATORDER_DYNAMICSHADOWS">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.VolumetricConeShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="nodeName">Shape name</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.Clone">
            <summary>
            This function must be overridden, since we have to reset the hotspots
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.OnTraceShape(CSharpFramework.ShapeTraceMode_e,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.ShapeTraceResult@)">
            <summary>
            Overridden trace function
            </summary>
            <param name="mode"></param>
            <param name="rayStart">ray start position</param>
            <param name="rayEnd">ray end position</param>
            <param name="result">trace result</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.SetEngineInstanceBaseProperties">
            <summary>
            overridden function to set/update all specific properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.OnSelected">
            <summary>
            Called when the shape is selected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.OnUnSelected">
            <summary>
            Called when the shape is unselected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when user starts dragging a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Called while the user drags a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when the user releases the mouse button on a hotspot
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.OnHotSpotRender(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VolumetricConeShape.ConeAngle">
            <summary>
            get or set the cone angle
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VolumetricConeShape.ConeAngleRad">
            <summary>
            Cone angle in measured in rad
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VolumetricConeShape.LightColor">
            <summary>
            get or set light color
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VolumetricConeShape.LightColorLiveUpdate">
            <summary>
            Proxy property used for color live update (See PropertyLiveUpdate attribute in LightColor property)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VolumetricConeShape.Density">
            <summary>
            get or set density
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VolumetricConeShape.Length">
            <summary>
            get or set cone length
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VolumetricConeShape.StartSize">
            <summary>
            get or set start diameter
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VolumetricConeShape.StartDistance">
            <summary>
            get or set start distance
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VolumetricConeShape.UsesDynamicShadows">
            <summary>
            Determines whether this cone uses dynamic shadows, i.e. if either entity or world bitmask is set
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VolumetricConeShape.ShadowmapResolution">
            <summary>
            The bitmask that is used for rendering entities into the shadow buffer. 0 for no shadows
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VolumetricConeShape.DynamicShadowsEntityMask">
            <summary>
            The bitmask that is used for rendering entities into the shadow buffer. 0 for no shadows
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.VolumetricConeShape.DynamicShadowsWorldMask">
            <summary>
            get or set start distance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.VolumetricConeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Tests.EntityShapeTest">
            <summary>
            Test for entity shape
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Tests.EntityShapeTest.SetUp">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Tests.EntityShapeTest.TearDown">
            <summary>
            Clears the test data
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Tests.EntityShapeTest.testClassNameUndo">
            <summary>
            Test function
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.ProjectorShape">
            <summary>
            Shape that defines a projector (projected wallmark class in the engine)
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ProjectorShape.CAT_PROJECTOR">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ProjectorShape.CATORDER_PROJECTOR">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.ProjectorShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.#ctor(System.String)">
            <summary>
            Shape constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Overridden function to create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.SetEngineInstanceBaseProperties">
            <summary>
            Overridden function to set all shape's properties (color, ...) on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overridden function to render the shape as preview
            </summary>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.Clone">
            <summary>
            Overridden clone function that removes the hotspots again
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.OnSelected">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.OnUnSelected">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.OnHotSpotRender(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ProjectorShape.EngineProjector">
            <summary>
            helper function to access the engine instance as EngineInstanceProjector
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ProjectorShape.ParentingMode">
            <summary>
            Configures this shape to use scene graph based parenting
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ProjectorShape.TextureFile">
            <summary>
            Gets or sets the texture filename
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ProjectorShape.Transparency">
            <summary>
            Gets or sets the transparency type of the projected texture
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ProjectorShape.ConeAngleX">
            <summary>
            Gets or sets the cone angle size in x direction
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ProjectorShape.ConeAngleY">
            <summary>
            Gets or sets the cone angle size in y direction
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ProjectorShape.Length">
            <summary>
            Gets or sets the length of the projection
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ProjectorShape.FadeOutDistance">
            <summary>
            Gets or sets the fade-out distance around the target position
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ProjectorShape.Intensity">
            <summary>
            Gets or sets the intensity of the projected map
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ProjectorShape.Color">
            <summary>
            Gets or sets the color of the projected map
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ProjectorShape.ColorLiveUpdate">
            <summary>
            Proxy property used for color live update (See PropertyLiveUpdate attribute in LightColor property)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ProjectorShape.Lightmapped">
            <summary>
            Gets or sets the lightmap status
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ProjectorShape.InfluenceBitmask">
            <summary>
             Affecet Meshes bitmask that determines the affect status
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.ProjectorShape.FarClipDistance">
            <summary>
            Gets or sets the far clip distance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.ProjectorShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.LightGridIndicatorShape">
            <summary>
            Shape for displaying light grid colors at specific position.
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridIndicatorShape.CAT_PREVIEW">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridIndicatorShape.CATORDER_PREVIEW">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridIndicatorShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridIndicatorShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="nodeName"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridIndicatorShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridIndicatorShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridIndicatorShape.SetEngineInstanceBaseProperties">
            <summary>
            overridden function to set/update all specific properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridIndicatorShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            overridden function to render the shape
            </summary>
            <param name="view">destination view</param>
            <param name="mode">render mode</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridIndicatorShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridIndicatorShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridIndicatorShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridIndicatorShape.DisplayRadius">
            <summary>
            Gets or sets the display radius
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridIndicatorShape.RenderGrid">
            <summary>
            Flag that determines whether the light grid should be rendered around the indicator position
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridIndicatorCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.DynLightShape">
            <summary>
            Shape that describes a dynamic light source.
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.CAT_STATICLIGHTING">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.CAT_APPEARANCE">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.CAT_INFLUENCE">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.CAT_CORONA">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.CAT_ANIMATIONS">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.CATORDER_STATICLIGHTING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.CATORDER_APPEARANCE">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.CATORDER_INFLUENCE">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.CATORDER_CORONA">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.CATORDER_ANIMATIONS">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="nodeName">name of the shape</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.SetEngineInstanceBaseProperties">
            <summary>
            overridden function to set/update all specific properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.OnAddedToScene">
            <summary>
            Called when this shape is added to the scene
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.OnRemoveFromScene">
            <summary>
            Called when this shape is removed from the scene
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            overridden function to render the shape
            </summary>
            <param name="view">destination view</param>
            <param name="mode">render mode</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.Clone">
            <summary>
            This function must be overridden, since we have to reset the hotspots
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.OnTraceShape(CSharpFramework.ShapeTraceMode_e,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.ShapeTraceResult@)">
            <summary>
            Overridden trace function
            </summary>
            <param name="mode"></param>
            <param name="rayStart">ray start position</param>
            <param name="rayEnd">ray end position</param>
            <param name="result">trace result</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.MakeTimeOfDayLight(System.Single,System.Boolean,System.String)">
            <summary>
            Just internal helper function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.SetTypeSpecificProperties">
            <summary>
            Update the properties
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.CORONA_DEFAULT">
            <summary>
            String used for default corona texture
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.OnSelected">
            <summary>
            Called when the shape is selected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.OnUnSelected">
            <summary>
            Called when the shape is unselected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when user starts dragging a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Called while the user drags a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when the user releases the mouse button on a hotspot
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.OnHotSpotRender(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.OnSceneEvent(CSharpFramework.SceneEventArgs)">
            <summary>
            Called by the scene if the static lighting update is finished
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.GetStaticLightInfo(CSharpFramework.Scene.StaticLightInfo)">
            <summary>
            virtual function to collect information for static light update
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.LightAttenuationCurve">
            <summary>
            get or set the light type
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.Multiplier">
            <summary>
            get or set the light multiplier
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.DistanceFadeEnd">
            <summary>
            When DynLightShape is created from existing shape ( e.g Prepab collapsed ) ,DistanceFadeEnd should be allocated first.    
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.EngineLightType">
            <summary>
            Translate engine type constant to vForge (and vice versa). The int value can be casted to NativeLightSourceType_e
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.LightType">
            <summary>
            get or set the light type
            </summary>
            
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.TypeProperties">
            <summary>
            get or set the type specific sub-properties
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.SpotAngle">
            <summary>
            get or set the spotlight cone angle
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.ProjectedTexture">
            <summary>
            get or set the filename for the projected texture
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.Radius">
            <summary>
            get or set the intensity
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.Intensity">
            <summary>
            Old compatibility property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.LightColor">
            <summary>
            get or set the light color
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.LightColorLiveUpdate">
            <summary>
            Proxy property used for color live update (See PropertyLiveUpdate attribute in LightColor property)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.LightKey">
            <summary>
            Gets or sets the light key
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.EnableCorona">
            <summary>
            get or set the corona flag
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.EnableLensFlares">
            <summary>
            get or set the lens flare flag
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.CoronaTexture">
            <summary>
            get or set the corona texture
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.CoronaFlags">
            <summary>
            Prefab-property to cover all flags at once
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.CastWorldShadows">
            <summary>
            DEPRECATED but left here for prefabs. Use CastStaticShadows now
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.CastModelShadows">
            <summary>
            DEPRECATED but left here for prefabs. Use CastStaticShadows now
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.CastStaticShadows">
            <summary>
            Flag that determines whether this static light casts static shadows that are baked into the lightmap or light grid
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.UsesStaticShadowmaps">
            <summary>
            Pseudo property that is used as a flag to determine whether shadow maps in vLux should be created
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.AnimationCurve">
            <summary>
            get or set the animation curve texture filename
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.AnimationTiming">
            <summary>
            get or set the animation timing
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.AnimationPhase">
            <summary>
            get or set the start animation phase
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.RemoveLightAfterAnimation">
            <summary>
            get or set the RemoveLightAfterAnimation flag
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.WorldInfluenceMask">
            <summary>
            get or set the inflence bitmask for world
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.ObjectInfluenceMask">
            <summary>
             get or set the inflence bitmask for entities
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.IsStatic">
            <summary>
            Get or set the status for exporting this light as a static light
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.ExportWhenNotRelevant">
            <summary>
            Get or set the status for exporting this light as a static light
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.PreviewAsDynamicLight">
            <summary>
            Get or set the flag for previewing a static light as a dynamic pixel light
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.TurnOffAfterLighting">
            <summary>
            If set, the next successful lighting update will turn off the preview a dynamic light
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.DynLightShape.LightType_e">
            <summary>
            Old Light type; Use LightSourceType_e instead
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.LightType_e.Point">
            <summary>
            Light is an omni light
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.LightType_e.Spotlight">
            <summary>
            Light is a spotlight
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.LightType_e.Directional">
            <summary>
            Light is directional
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.DynLightShape.LightTypePropertiesBase">
            <summary>
            LightTypePropertiesBase : Base class of specific light type properties. Allows to set the properties of the parent,
            thus it needs the owner parent in the constructor
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.LightTypePropertiesBase.#ctor(VisionEditorPlugin.Shapes.DynLightShape)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.LightTypePropertiesBase.Owner">
            <summary>
            Owner shape
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.DynLightShape.LightTypeProperties_OmniLight">
            <summary>
            specific omni light properties
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.LightTypeProperties_OmniLight.#ctor(VisionEditorPlugin.Shapes.DynLightShape)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.LightTypeProperties_OmniLight.ProjectedCubemap">
            <summary>
            get or set the projected texture filename
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.DynLightShape.LightTypeProperties_SpotLight">
            <summary>
            specific spot light properties
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.LightTypeProperties_SpotLight.#ctor(VisionEditorPlugin.Shapes.DynLightShape)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.LightTypeProperties_SpotLight.SpotAngle">
            <summary>
            get or set the spot cone angle
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.DynLightShape.LightTypeProperties_SpotLight.ProjectedTexture">
            <summary>
            get or set the projected texture filename
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.DynLightShape.LightTypeProperties_Directional">
            <summary>
            specific directional light properties
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DynLightShape.LightTypeProperties_Directional.#ctor(VisionEditorPlugin.Shapes.DynLightShape)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.DynLightShape.LightAttenuationCurve_e">
            <summary>
            Light attenuation curve
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.LightAttenuationCurve_e.Smooth">
            <summary>
            Smooth attenuation
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.LightAttenuationCurve_e.Square">
            <summary>
            Square attenuation x^2
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.LightAttenuationCurve_e.Quad">
            <summary>
            Quad attenuation x^4
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.DynLightShape.LightAttenuationCurve_e.Linear">
            <summary>
            Linear attenuation
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.OmniLightCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.SpotLightCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.DirectionalLightCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.TimeOfDaySunCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="F:VisionEditorPlugin.Dialogs.CreateTimeOfDayLightDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.CreateTimeOfDayLightDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VisionEditorPlugin.Dialogs.CreateTimeOfDayLightDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Tests.SunglareShapeTest.SetUp">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Tests.SunglareShapeTest.TearDown">
            <summary>
            Clears the test data
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.PathCameraShape">
            <summary>
            Simple shape for path following.
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathCameraShape.CAT_PATHCAMERA">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathCameraShape.CATORDER_PATHCAMERA">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.PathCameraShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathCameraShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathCameraShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathCameraShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathCameraShape.SetEngineInstanceBaseProperties">
            <summary>
            overridden function to set/update all specific properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathCameraShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathCameraShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathCameraShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathCameraShape.EngineCamera">
            <summary>
            accesses the engine instance as an object of type EngineInstancePathCamera
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.PathCameraShape.CameraScriptFile">
            <summary>
            XML file that contains information about the camera actions
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathCameraShapeCreator.GetPluginName">
            <summary>
            Get the name of the creator
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathCameraShapeCreator.GetPluginCategory">
            <summary>
            Get the category's name
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathCameraShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.PathCameraShapeCreator.CreateShapeInstance">
            <summary>
            Overridden function to create the shape instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.FogShape">
            <summary>
            Shape that represents a fog object in the engine
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.FogShape.CAT_FOGMODEL">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.FogShape.CATORDER_FOGMODEL">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.FogShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.Finalize">
            <summary>
            mirror destructor
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.SetEngineInstanceBaseProperties">
            <summary>
            Sets all properties of the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.Clone">
            <summary>
            This function must be overridden, since we have to copy the shader effect
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.OnSelected">
            <summary>
            Called when the shape is selected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.OnUnSelected">
            <summary>
            Called when the shape is unselected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when user starts dragging a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Called while the user drags a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when the user releases the mouse button on a hotspot
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.OnHotSpotRender(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.FogShape.ParentingMode">
            <summary>
            Configures this shape to use parenting through VisObject3D_cl inheritance
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.FogShape.EngineFogObject">
            <summary>
            Access the engine instance as EngineInstanceClothObject
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.FogShape.ShapeType">
            <summary>
            Fog shape type
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.FogShape.ShaderEffect">
            <summary>
            Gets the effect specific paramters (dynamic class)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.FogShape.AbsorptionType">
            <summary>
            Absorbance
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.FogShape.NormalizeDepth">
            <summary>
            Normalize depth
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.FalloffConfig.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.FogShape.FalloffConfig.Owner">
            <summary>
            Gets or sets the owner scene object that owns this effect
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogShape.FalloffConfig.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Display falloff config information
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.FalloffProperties.Owner">
            <summary>
            Gets or sets the owner scene object that owns this effect
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FalloffProperties.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Display falloff config information
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.UI.FalloffEditor">
            <summary>
            Base class for falloff editing widgets
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.UI.FalloffEditor.#ctor(VisionEditorPlugin.Shapes.FalloffProperties)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.UI.FalloffEditor.OnTransformationChanged">
            <summary>
            Invoked when the shape transformation changes
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.UI.FalloffEditor.UpdateHotspot(CSharpFramework.View.HotSpotBase)">
            <summary>
            Synchronize hotspot properties
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.UI.FalloffEditor.CreateUI">
            <summary>
            Editor-specific initialization
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.UI.FalloffEditor.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridable callback that's invoked whenever the user is dragging the hotspot
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.UI.FalloffEditor.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridable callback that's invoked when the user stops draggin the hotspot
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.UI.FalloffEditor.CreateLocalBasis(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F@,CSharpFramework.Math.Vector3F@,CSharpFramework.Math.Vector3F@)">
            <summary>
            Creates a look-at matrix given an origin and a target.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.UI.FalloffEditor.CreateLocalBasis(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F@,CSharpFramework.Math.Vector3F@,CSharpFramework.Math.Vector3F@)">
            <summary>
            Creates an orthogonal basis with a specified direction vector and a suggested right-hand vector.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.UI.FalloffEditor.Hotspots">
            <summary>
            Hotspot controls
            </summary>
            
        </member>
        <member name="M:VisionEditorPlugin.Shapes.UI.HotSpotPoint.#ctor(VisionEditorPlugin.Shapes.UI.FalloffEditor,System.String,System.UInt32,System.Single,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="owner"></param>
            <param name="fSize"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.UI.HotSpotPoint.IsMouseOver(System.Single,System.Single)">
            <summary>
            Overriden function to test for mouse hit 
            </summary>
            <param name="fMouseX"></param>
            <param name="fMouseY"></param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.UI.HotSpotPoint.EvaluatePosition">
            <summary>
            Overriden function to update 3D position
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.UI.HotSpotPoint.OnDrag(CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridden dragging function
            </summary>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.UI.HotSpotPoint.OnDragEnd(CSharpFramework.VisionViewBase)">
            <summary>
            Overridden dragging function
            </summary>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.FogObjectCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.EntityShape">
            <summary>
            Shape that describes an entity instance.
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.EntityShape.CAT_SETTINGS">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.EntityShape.CAT_LIGHTANDSHADOW">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.EntityShape.CAT_LIGHTGRID">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.EntityShape.CATORDER_SETTINGS">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.EntityShape.CATORDER_LIGHTANDSHADOW">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.EntityShape.CATORDER_LIGHTGRID">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.EntityShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="nodeName"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.RemoveEngineInstance(System.Boolean)">
            <summary>
            Remove the engine instance
            </summary>
            <param name="bRemoveChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.Clone">
            <summary>
            overridden clone function
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.SetEngineInstanceBaseProperties">
            <summary>
            Overidden function that sets the shape's properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.GetStaticLightInfo(CSharpFramework.Scene.StaticLightInfo)">
            <summary>
            virtual function to collect information for static light update
            </summary>
            <param name="info"></param>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.EntityShape._entityProperties">
            <summary>
            Collection of dynamic entity properties
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.EntityShape._oldEntityProperties">
            <summary>
            Old entity property collection, deserialized from old scene files.
            Temporary variable that is used to migrate the old data in the OnDeserialization event.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.GetEntityPropertiesAsString">
            <summary>
            Gets a string dictionary for all the entity properties. The key contains the name
            of the property whereas the value contains the engine string representation of it.
            </summary>
            <returns>String dictionary with VarName:StringValue pairs</returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.GetEntityPropertyAsString(System.String)">
            <summary>
            Returns the value of an entity property in the engine format (string representation)
            </summary>
            <param name="propertyName">Name of the entity property</param>
            <returns>String value of the property in the engine format</returns>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.EntityShape._navMeshUsage">
            <summary>
            Override this property to add support for it. Note that loading/saving is handled through base class already
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.GetFarClipDistance">
            <summary>
            Overridden Shapebase function to get the entity's far clip distance
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.CanLink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Overridden function
            </summary>
            <param name="src"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.OnLink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Overridden function
            </summary>
            <param name="src"></param>
            <param name="target"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.OnUnlink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Overridden function
            </summary>
            <param name="src"></param>
            <param name="target"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.CanGroupRelevantOperation(System.String,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Overridden function
            </summary>
            <param name="name"></param>
            <param name="otherShape"></param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.PerformRelevantOperation(System.String,System.Int32,System.Int32)">
            <summary>
            Overridden function that performs a "relevant operation"
            </summary>
            <param name="name"></param>
            <param name="iShapeIndex"></param>
            <param name="iShapeCount"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.OnSelected">
            <summary>
            Overridden selection function. Adds the hotspots
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.OnUnSelected">
            <summary>
            Overridden un-selection function. Removes the hotspots
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridden hot spot handle function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridden hot spot handle function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridden hot spot handle function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Overridden hot spot handle function
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.OnDeserialization">
            <summary>
            Serialization helper function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.GetPluginInformation">
            <summary>
            Overridden function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.GetStandardValues(System.String)">
            <summary>
            Gathers animation names for the "Animation" key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.EngineEntity">
            <summary>
            Return the engine instance casted to EngineInstanceEntity
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.ModelFile">
            <summary>
            Model File Property (uses filename editor)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.HasModel">
            <summary>
            Indicates whether this entity has a model or not
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.MaterialProvider">
            <summary>
            gets the material provider of the entity's model
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.OwnComponentBackups">
            <summary>
            Helper fake property to backup and restore the components that are implicitly generated by the entity class
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.EntityClass">
            <summary>
            get or set entity class name
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.EntityProperties">
            <summary>
            get or set entity properties
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.EntityPropertyString">
            <summary>
            Gets or sets the full property string, where each property is separated by comma.
            This is a helper property so we can set parse the property string using the XML prefab system
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.EntityKey">
            <summary>
            Invisible helper property to get and set the entity key
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.VisibleBitmask">
            <summary>
            Entity visibility bitmask that determines the visible status in the rendering contexts
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.FarClipDistance">
            <summary>
            Entity far clip distance in world units. Set to 0.0 for no distance clipping
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.RenderOrderPriority">
            <summary>
            Priority value for rendering. Entities with a priority priority will be rendered earlier than others independent of camera distance
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.CastDynamicShadows">
            <summary>
            This flag determines whether the entity should cast dynamic (stencil-)shadows from dynamic lights
            or static lights with shadowmaps enabled.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.CastStaticShadows">
            <summary>
            This flag determines whether the entity should be considered for static light computations (light maps)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.LightInfluenceBitmask">
            <summary>
            Bitflag filter mask that determines which dynamic lights influence this entity. See also dynamic light's ObjectInfluenceMask property
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.LightGridSampleOfs">
            <summary>
            Defines the relative position offset that is used to gather the light grid sample
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.LightmapTiling">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.AmbientColor">
            <summary>
            Defines the individual entity ambient lighting color
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.AmbientColorLiveUpdate">
            <summary>
            Proxy property used for color live update (See PropertyLiveUpdate attribute in LightColor property)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.ShowLightgridWidget">
            <summary>
            If enabled, a 3D widget will be rendered that allows to modify the offset in the 3D view. This property wraps around a static bool so it affects all entities
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.SampleOfsX">
            <summary>
            Gets or sets the relative x position offset that is used to gather the light grid sample
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.SampleOfsY">
            <summary>
            Gets or sets the relative y position offset that is used to gather the light grid sample
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.SampleOfsZ">
            <summary>
            Gets or sets the relative z position offset that is used to gather the light grid sample
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.EntityShape.RelevantOperations">
            <summary>
            Gets a list of relevant operations for entity shape
            </summary>
        </member>
        <member name="E:VisionEditorPlugin.Shapes.EntityShape.ShaderAssignment">
            <summary>
            This event gets triggered if something happed that might or should affect the particle editor
            which listens to this event
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.EntityShape.ShaderAssignmentEventArgs">
            <summary>
            Nested event arg class for notifying the shader assignment editor
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityShape.ShaderAssignmentEventArgs.#ctor(VisionEditorPlugin.Shapes.EntityShape)">
            <summary>
            Constructor
            </summary>
            <param name="_sender"></param>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.EntityShape.ShaderAssignmentEventArgs.MaterialProvider">
            <summary>
            Public model info (sender)
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.EntityShape.ShaderAssignmentEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.EntityCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.BoneProxyShape._objectKey">
            <summary>
            Object key string
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.BoneProxyShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.BoneProxyShape.ObjectKey">
            <summary>
            Gets or sets the object key, so the object can be searched in the engine
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.SkeletalBoneListConverter">
            <summary>
            TypeConverter class that displays a nice string in the property grid for the bone collection
            </summary>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.MirrorShape">
            <summary>
            Spahpe that represents a mirror in the engine
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.MirrorShape.CAT_MIRRORMODEL">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.MirrorShape.CATORDER_MIRRORMODEL">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.MirrorShape.CAT_VISIBILITY">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.MirrorShape.CATORDER_VISIBILITY">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.MirrorShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.Finalize">
            <summary>
            mirror destructor
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.SetEngineInstanceBaseProperties">
            <summary>
            Sets all properties of the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Renders the shape in the view
            </summary>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.Clone">
            <summary>
            This function must be overridden, since we have to reset the hotspots
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.OnShaderEffectChanged">
            <summary>
            overridable for water shape
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.OnSelected">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.OnUnSelected">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Overridden function
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.CreateAllLinks">
            <summary>
            Create all link sources and targets provided by this shape
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.CanLink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Check whether src can be linked to target. Either src or target has this shape as owner
            </summary>
            <param name="src">the link source</param>
            <param name="target">the link target</param>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.OnLink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Perform the actual linking. Either src or target has this shape as owner
            </summary>
            <param name="src">the link source</param>
            <param name="target">the link target</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.OnUnlink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            unlinks a target from a source. Either src or target has this shape as owner
            </summary>
            <param name="src">the link source</param>
            <param name="target">the link target</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MirrorShape.ParentingMode">
            <summary>
            Configures this shape to use parenting through VisObject3D_cl inheritance
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MirrorShape.EngineMirror">
            <summary>
            Access the engine instance as EngineInstanceClothObject
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MirrorShape.SizeX">
            <summary>
            Size of the mirror, in world units
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MirrorShape.SizeY">
            <summary>
            Size of the mirror, in world units
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MirrorShape.ModelFile">
            <summary>
            Model File Property (uses filename editor)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MirrorShape.ShaderEffect">
            <summary>
            The shader effect configuration assigned to the mirror
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MirrorShape.Resolution">
            <summary>
            The shader effect configuration assigned to the mirror
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MirrorShape.UseHDR">
            <summary>
            HDR flag. If true, the format of the render target is set to RGBA16F. Otherwise it is set to RGBA.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MirrorShape.FarClipDistance">
            <summary>
            If >0 this value defines the far clip distance used for rendering the mirrored geometry.
            Otherwise the main context's far clip distance is used. 
            You can save a lot of performance if this distance is reduced.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MirrorShape.ContextBitmask">
            <summary>
            Entity visibility bitmask that determines the visible status in the rendering contexts
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MirrorShape.RenderExtendedObjects">
            <summary>
            Entity visibility bitmask that determines the visible status in the rendering contexts
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MirrorShape.ReflectionShaderMode">
            <summary>
            Enum that defines which shaders are used for reflected surfaces. Use AlwaysSimple for best performace
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MirrorShape.FovScale">
            <summary>
            Sets the FOV scaling factor for the mirror. This value can be used to reduce texture clamping artifacts caused by perturbing the mirror normal in a shader
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.MirrorShape.ObliqueClippingPlaneOffset">
            <summary>
            Can be used to specify an offset for positioning the oblique clipping plane relative to the mirror surface.
            Negative values will position the clipping plane below the mirror plane, thus reducing rendering artifacts
            e.g. for water rendering close to the shore.
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.WaterShape.CAT_UNDERWATER">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.WaterShape.CATORDER_UNDERWATER">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.WaterShape.CAT_DISPLACEMENT">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.WaterShape.CATORDER_DISPLACEMENT">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.WaterShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.WaterShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.WaterShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.WaterShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.WaterShape.Clone">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.WaterShape.UnderWaterFogColorLiveUpdate">
            <summary>
            Proxy property used for color live update (See PropertyLiveUpdate attribute in UnderWaterFogColor property)
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.WaterCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.LightGridBoxShape">
            <summary>
            LightGridBoxShape : shape that defines the bounding box for light grid calculation
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridBoxShape.CAT_BOXSIZE">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridBoxShape.CAT_BOXSUBDIV">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridBoxShape.CAT_GLOBAL">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridBoxShape.CATORDER_BOXSIZE">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridBoxShape.CATORDER_BOXSUBDIV">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridBoxShape.CATORDER_GLOBAL">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.LightGridBoxShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="nodeName"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.SetEngineInstanceBaseProperties">
            <summary>
            overridden function to set/update all specific properties on the engine instance
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            overridden function to render the shape
            </summary>
            <param name="view">destination view</param>
            <param name="mode">render mode</param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.GetGridBox">
            <summary>
            Get the absolute bounding box
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.Clone">
            <summary>
            This function must be overridden, since we have to reset the hotspots
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.GetStaticLightInfo(CSharpFramework.Scene.StaticLightInfo)">
            <summary>
            virtual function to collect information for static light update
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.OnSelected">
            <summary>
            Called when the shape is selected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.OnUnSelected">
            <summary>
            Called when the shape is unselected
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when user starts dragging a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Called while the user drags a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when the user releases the mouse button on a hotspot
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxShape.GetPluginInformation">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridBoxShape.ParentingMode">
            <summary>
            Sets parenting mode to scene graph
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridBoxShape.BoxSize">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridBoxShape.PreviewCells">
            <summary>
            Gets or sets the status of displaying the grid preview (for all detail box shapes)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridBoxShape.ShowIndicators">
            <summary>
            Gets or sets the status of displaying the grid preview (for all detail box shapes)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridBoxShape.BoxSizeX">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridBoxShape.BoxSizeY">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridBoxShape.BoxSizeZ">
            <summary>
            get or set the box dimension
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridBoxShape.SubDivX">
            <summary>
            get or set the number of grid subdivisions (x)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridBoxShape.SubDivY">
            <summary>
            get or set the number of grid subdivisions (y)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.LightGridBoxShape.SubDivZ">
            <summary>
            get or set the number of grid subdivisions (z)
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.LightGridBoxCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.LightmapMenuItemPlugin">
            <summary>
            Plugin for adding the lightmap tweaking tool to the main menu
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.LightmapMenuItemPlugin.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.LightmapMenuItemPlugin.OnInitialize(System.Windows.Forms.MenuItem)">
            <summary>
            Initialize the plugin
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.LightmapMenuItemPlugin.OnDeinitialize(System.Windows.Forms.MenuItem)">
            <summary>
            Deinitialize the plugin
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.LightmapMenuItemPlugin.OpenTool">
            <summary>
             Open this tool
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.LightmapMenuItemPlugin.Name">
            <summary>
            The name of the plugin
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.LightmapMenuItemPlugin.ParentMenu">
            <summary>
            Gets the parent menu the item will be added to
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.LightmapMenuItemPlugin.MenuItem">
            <summary>
            The MenuItem which is provided by this plugin
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.MirrorCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.EditorPlugin">
            <summary>
            Main plugin class
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.EditorPlugin.#ctor">
            <summary>
            Constructor of EditorPlugin that sets up plugin information
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.EditorPlugin.EDITOR_PLUGIN_INFO">
            <summary>
            This scope holds one global instance of the plugin info. It is returned by all shape's overridden GetPluginInformation function.
            This global info is filled inside InitPluginModule
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.EditorPlugin.InitPluginModule">
            <summary>
            Overridden function that gets called when the plugin is loaded. Registers all creator plugins
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.EditorPlugin.DeInitPluginModule">
            <summary>
            Overridden function that gets called when the plugin is unloaded. Deregisters all creator plugins
            </summary>
            <returns></returns>
        </member>
        <member name="T:VisionEditorPlugin.Shapes.CubemapShape">
            <summary>
            Shape class that represents a cubemap that renders to texture
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.CubemapShape.CAT_CUBEMAP">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.CubemapShape.CATORDER_CUBEMAP">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.CubemapShape.CAT_UPDATE">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.CubemapShape.CATORDER_UPDATE">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.CubemapShape.CAT_RENDERING">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.CubemapShape.CATORDER_RENDERING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:VisionEditorPlugin.Shapes.CubemapShape.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CubemapShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CubemapShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Overridden function
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CubemapShape.SetEngineInstanceBaseProperties">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CubemapShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CubemapShape.Clone">
            <summary>
            This function must be overridden, since we have to reset the hotspots
            </summary>
            <returns></returns>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CubemapShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CubemapShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CubemapShape.OnSelected">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CubemapShape.OnUnSelected">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CubemapShape.UpdateCubemap">
            <summary>
            Forces an engine update of the cubemap
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CubemapShape.OnTransformationChanged">
            <summary>
            whenever the cubemap position changes, also update the rendered image
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CubemapShape.CubemapEntity">
            <summary>
            Returns the engine instance as a EngineInstanceRenderTarget
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CubemapShape.Key">
            <summary>
            Cubemap key that can be specified as a texture filename in shaders.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CubemapShape.EdgeSize">
            <summary>
            Edge size of the cubemap texture. Must be a power of 2.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CubemapShape.ContinuousUpdate">
            <summary>
            If true, the cubemap gets contiuously updated in the game which costs significant performance.
            If false, the cubemap gets only rendered at creation time
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CubemapShape.UpdateInterval">
            <summary>
            If ContinuousUpdate is enabled, this defines the time interval (in seconds) between two rendering. 0 updates it every frame.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CubemapShape.AlternatingFaceUpdate">
            <summary>
            If ContinuousUpdate is enabled, this defines whether one tick only renders one cubemap face at a time, so 6 consecutive frames make up the new cubemap. With this feature the update impact is distributed over frames.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CubemapShape.UpdateCount">
            <summary>
            If ContinuousUpdate is enabled, this defines the number of updates (0 for infinite count)
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CubemapShape.AlwaysUpdateInEditor">
            <summary>
            Indicates whether the cubemap image will be updated every time it changes position.
            Only affects rendering inside the editor.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CubemapShape.AutoGenerateMipmaps">
            <summary>
            Indicates whether the cubemap will automatically generate mipmaps.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CubemapShape.NumBlurPasses">
            <summary>
            Number of blur passes for cubemap.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CubemapShape.NearClipDistance">
            <summary>
            Near-clipping distance for the cubemap rendering. A value smaller than 0 uses the current main context's distance.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CubemapShape.FarClipDistance">
            <summary>
            Far-clipping distance for the cubemap rendering. A value smaller than 0 uses the current main context's distance.
            </summary>
        </member>
        <member name="P:VisionEditorPlugin.Shapes.CubemapShape.RenderFilterMask">
            <summary>
            Bitmask for scene element filtering inside the cubemap render loop. Gets logically ANDed with for instance entity's VisibleBitmask value.
            </summary>
        </member>
        <member name="M:VisionEditorPlugin.Shapes.CubemapShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
