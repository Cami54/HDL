<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharpFramework</name>
    </assembly>
    <members>
        <member name="T:CSharpFramework.Visitors.VisitLinksShapeVisitor">
            <summary>
            Visitor class that visits all links on a shape, using the passed ShapeLinkVisitor
            </summary>
        </member>
        <member name="T:CSharpFramework.Visitors.IShapeVisitor">
            <summary>
            Base class for shape visitors
            
            The visitor pattern is used to separate the iteration/recursion code
            from the logic. While the iteration/recursion code is part of the RunVisitor
            function (e.g. ShapeBase.RunVisitor), the logic code is encapsulated in
            the various visitor implementations.
            </summary>
        </member>
        <member name="M:CSharpFramework.Visitors.IShapeVisitor.Visit(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Visits the passed shape
            </summary>
            <param name="shape">shape to visit</param>
            <returns>Visit result, determines the behaviour of the visiting process. See enumeration for details.</returns>
        </member>
        <member name="T:CSharpFramework.Visitors.IShapeVisitor.VisitResult">
            <summary>
            Enumeration of results the visit function may return
            </summary>
        </member>
        <member name="F:CSharpFramework.Visitors.IShapeVisitor.VisitResult.VisitOk">
            <summary>
            Everything okay, just go on
            </summary>
        </member>
        <member name="F:CSharpFramework.Visitors.IShapeVisitor.VisitResult.VisitDone">
            <summary>
            No need to visit the children (continue with next sibling instead).
            </summary>
        </member>
        <member name="F:CSharpFramework.Visitors.IShapeVisitor.VisitResult.VisitStop">
            <summary>
            Immediately stop the visit cascade
            </summary>
        </member>
        <member name="F:CSharpFramework.Visitors.IShapeVisitor.VisitResult.VisitFailed">
            <summary>
            Immediately stop the visit case and report a failure (return VisitFailed as final result)
            </summary>
        </member>
        <member name="M:CSharpFramework.Visitors.VisitLinksShapeVisitor.#ctor(CSharpFramework.Visitors.IShapeLinkVisitor)">
            <summary>
            Constructor
            </summary>
            <param name="linkVisitor">visitor used for visiting the links of the shapes</param>
        </member>
        <member name="T:CSharpFramework.Visitors.MigrateOnSceneRelocationAttribute">
            <summary>
            Helper attribute for SceneRelocationVisitor
            </summary>
        </member>
        <member name="T:CSharpFramework.Visitors.SceneRelocationVisitor">
            <summary>
            Shape visitor that relocates the scene to a new folder
            </summary>
        </member>
        <member name="M:CSharpFramework.Visitors.SceneRelocationVisitor.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="oldProjectPath"></param>
            <param name="newProjectPath"></param>
        </member>
        <member name="M:CSharpFramework.Visitors.SceneRelocationVisitor.Visit(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Visit function
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.View.HotSpotDistance">
            <summary>
            Hot spot type that can be used to drag along an axis
            </summary>
        </member>
        <member name="T:CSharpFramework.View.HotSpotBase">
            <summary>
            A HotSpot is a graphical element in the Engine view that can be dragged with the mouse and 
            by this modifies shapes. For instance a hotspot that allows to modify the cone angle of a spotlight
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotBase.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.UInt32,CSharpFramework.View.HotSpotBase.PickType,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="owner">owner shape</param>
            <param name="bitmapfile">filename of bitmap icon</param>
            <param name="iColorRef">modulation color</param>
            <param name="picktype">picking type</param>
            <param name="fRadius">radius on screen</param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotBase.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.UInt32,System.UInt32,CSharpFramework.View.HotSpotBase.PickType,System.Single)">
            <summary>
            This constructor overload takes an additional transparency key for the icon image
            </summary>
            <param name="owner"></param>
            <param name="bitmapfile"></param>
            <param name="iTranspColor"></param>
            <param name="iColorRef"></param>
            <param name="picktype"></param>
            <param name="fRadius"></param>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase._x">
            <summary>
            current 3D x-position
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase._y">
            <summary>
            current 3D y-position
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase._z">
            <summary>
            current 3D z-position
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase._sortingKey">
            <summary>
            See SortingKey
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase._fScreenX">
            <summary>
            current 2D screen position
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase._fScreenY">
            <summary>
            current 2D screen position
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase._bOnScreen">
            <summary>
            indicates whether hot spot is on screen or behind camera
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase._fScreenOfsX">
            <summary>
            Optional screen offset to display
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase._fScreenOfsY">
            <summary>
            Optional screen offset to display
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotBase.Set2DOffset(System.Single,System.Single)">
            <summary>
            Sets the 2D offset for the button (relative to projected shape center)
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotBase.Project2D(CSharpFramework.IEngineManager,System.Boolean)">
            <summary>
            Overridable 2D projection function
            </summary>
            <param name="engine"></param>
            <param name="bShow"></param>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase._bIsDragging">
            <summary>
            Dragging status
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase._bIsVisible">
            <summary>
            Visible status
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase._bIsActive">
            <summary>
            Active status
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase._bForceNotVisible">
            <summary>
            Flag that overrides public Visible flag, for instance if the Layer isn't editable
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase._pressedMouseButton">
            <summary>
            Status which mouse button is pressed when the hotspot is clicked
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotBase.Remove">
            <summary>
            Dispose function
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotBase.RenderHotSpot(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Render function
            </summary>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotBase.EvaluatePosition">
            <summary>
            Overridable to evaluate 3D position. By default forwards to owner shape
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotBase.IsMouseOver(System.Single,System.Single)">
            <summary>
            Overridable to test if mouse is over the icon
            </summary>
            <param name="fMouseX">mouse coordinate to test</param>
            <param name="fMouseY">mouse coordinate to test</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.View.HotSpotBase.OnDragBegin(CSharpFramework.VisionViewBase)">
            <summary>
            Overridable that gets called when beginning the dragging
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotBase.OnDrag(CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridable that gets called while dragging
            </summary>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotBase.OnDragEnd(CSharpFramework.VisionViewBase)">
            <summary>
            Overridable that gets called when the dragging is finished
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotBase.OnClicked(CSharpFramework.VisionViewBase)">
            <summary>
            Overridable that gets called when the user clicked on the hotspot (i.e. releases the mouse button on it)
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotBase.GetToolTipText(CSharpFramework.Contexts.KeyModifier)">
            <summary>
            Overridable that returns a tooltip string dependent on the actual key modifier key pressed. This default implementation
            returns the non-virtual ToolTipText getter.
            </summary>
            <param name="eKeyMod"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.Owner">
            <summary>
            get the owner shape of the hot spot
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.SortingKey">
            <summary>
            Sorting key for z-sorting. Computed in Project2D
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.Position">
            <summary>
            get or set the 3D position
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.ScreenX">
            <summary>
            2D screen position
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.ScreenY">
            <summary>
            2D screen position
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.OnScreen">
            <summary>
            indicates whether hot spot is on screen or behind camera
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.PickRadius">
            <summary>
            get or set the pick radius on screen
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.IsDragging">
            <summary>
            Returns the current drag status
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.Visible">
            <summary>
            Allows to hide hotspots
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.Active">
            <summary>
            Active status. Only active hotspots can be picked
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.Color">
            <summary>
            Modifies the modulation color of the hotspot
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.IconFilename">
            <summary>
            Changes the icon texture
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.PressedMouseButton">
            <summary>
            Status which mouse button is pressed when the hotspot is clicked
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.MouseOverCursor">
            <summary>
            Overridable to return mouse over cursor for the view
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.MouseOver">
            <summary>
            Gets called when the cursor enters or leaves the hotspot
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotBase.ToolTipText">
            <summary>
            Gets or sets the tooltip text that appears when the mouse is over the hotspot
            </summary>
        </member>
        <member name="T:CSharpFramework.View.HotSpotBase.PickType">
            <summary>
            Picking region of the hotspot
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase.PickType.Circle">
            <summary>
            Circle shape
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase.PickType.Square">
            <summary>
            Square shape
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpotBase.PickType.Diamond">
            <summary>
            A square rotated by 45 degree
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotDistance.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.UInt32,CSharpFramework.View.HotSpotBase.PickType,System.Single)">
            <summary>
            Construcotr
            </summary>
            <param name="owner"></param>
            <param name="bitmapfile"></param>
            <param name="iColorRef"></param>
            <param name="picktype"></param>
            <param name="fRadius"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotDistance.SetRange(System.Single,System.Single)">
            <summary>
            Sets the valid range for distance values. If max smaller than zero, there is no maximum limit
            </summary>
            <param name="fMin">lower value limit</param>
            <param name="fMax">upper value limit</param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotDistance.OnDrag(CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridden dragging function
            </summary>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotDistance.EvaluatePosition">
            <summary>
            Updates the 3D position of the Hotspot
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotDistance.RenderHotSpot(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Render function
            </summary>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="P:CSharpFramework.View.HotSpotDistance.CurrentPosition">
            <summary>
            Gets or sets the relative 3D position
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotDistance.StartDistance">
            <summary>
            Sets the start distance. Should be set by shape in BeginDrag function
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotDistance.Axis">
            <summary>
            Gets or Sets the axis that is used for distance
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotDistance.CurrentDistance">
            <summary>
            Returns the current distance at any time
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotDistance.DisplayScaling">
            <summary>
            Allows to set the scaling factor between length and displayed length (in world units). Useful for intensity.
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotDistance.HasChanged">
            <summary>
            Checks whether the angle has changed compared to start angle
            </summary>
        </member>
        <member name="T:CSharpFramework.ShortCuts.ShortCutMessageFilter">
            <summary>
            This message filter captures all messages before they are dispatched to the control
            or form. It filters out any shortcut keys configured in the EditorManager.ShortCuts
            structure and executes the corresponding shortcuts.
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Overridden Win32 API function. Intercepts the WM_KEYDOWN messages to process
            our application wide hotkeys.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutMessageFilter.IsPossiblyShortcut(System.Windows.Forms.Keys,CSharpFramework.ShortCuts.ModifierKeyState)">
            <summary>
            Indicates whether the passed key combination is possibly a keyboard shortcut.
            </summary>
            <param name="keyCode">pressed key</param>
            <param name="modifiers">state of modifier keys</param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Scene.IShapeFactory">
            <summary>
            pure virtual interface to create an arbitrary shape with the specified properties. The property collection is
            not a dictionary since multiple properties of the same name are allowwd (e.g. adding portal vertices one by one)
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeFactory.RecursiveParseProperties(System.Object,CSharpFramework.Scene.IShapeFactory.PropertyEntryCollection)">
            <summary>
            Recursively apply the collection of properties to the passed target object
            </summary>
            <param name="target"></param>
            <param name="properties"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeFactory.GetTypeByName(System.String,System.Type,System.Boolean)">
            <summary>
            Robust method to retrieve the type by simple name (no assemblies etc. need to be specified)
            </summary>
            <param name="classname"></param>
            <param name="baseclass"></param>
            <param name="bThrowException"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeFactory.CreateShape(System.String,System.String,CSharpFramework.Scene.IShapeFactory.PropertyEntryCollection)">
            <summary>
            Creates a shape instance of specified class name
            </summary>
            <param name="classname">pure class name (no namespace or assembly)</param>
            <param name="name">The name of the shape</param>
            <param name="properties">a list of properties (pairs of property name, property value string)</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeFactory.CreateShapeLink(System.String,CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Create a shape link of specified class name. The 3 remaining parameters are passed to the standard constructor
            </summary>
            <param name="classname"></param>
            <param name="ownerShape"></param>
            <param name="name"></param>
            <param name="primaryID"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Scene.IShapeFactory.FilenameResolvePath">
            <summary>
            If specified, all filenames are resolved by prepending this path
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.IPrefabShape">
            <summary>
            Simple interface so base libs can modify the filename
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeObject3D">
            <summary>
            Derived shape class that assumes the engine object is of type IEngineInstanceObject3D.
            Adds a few properties to the shape that are spefic for native class VisObject3D_cl (currently only object key)
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.Shape3D">
            <summary>
            Shape class that has a 3D position and orientation
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeBase">
            <summary>
            Base class for all shapes in the editor
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ISceneObject">
            <summary>
            Base interface for all types of scene objects, such as shapes, layers, etc.
            Classes should implement this interface and return the locked status of the owner layer (for instance).
            The SetProperty action uses the Modifiable flag to determine the Valid status of the action
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ISceneObject.Modifiable">
            <summary>
            Flag that determines whether the user has permission to modify this object. For instance whether the
            owner layer is locked in the scene
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ISceneObject.Modified">
            <summary>
            marks this object as modified (set only)
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.IScene2DViewRenderable">
            <summary>
            This interface provides support for rendering items into the 2D map view
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IScene2DViewRenderable.GetScene2DRenderingSortingKey(CSharpFramework.Controls.Scene2DView)">
            <summary>
            Gets called before rendering to evaluate the sorting key of the object.
            Larger values are rendered later so the height offset could be passed
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IScene2DViewRenderable.OnPaintScene2DView(CSharpFramework.Controls.Scene2DView,System.Windows.Forms.PaintEventArgs)">
            <summary>
            The actual paint function.
            </summary>
            <param name="view">The target view</param>
            <param name="e">The paint structure that provides the graphics interface</param>
        </member>
        <member name="M:CSharpFramework.Scene.IScene2DViewRenderable.GetAbsoluteBoundingBox(CSharpFramework.Controls.Scene2DView)">
            <summary>
            Called to re-evaluate the scene's size in the view
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IScene2DViewRenderable.GetScene2DRenderingFilter(CSharpFramework.Controls.Scene2DView)">
            <summary>
            Return a filter category. Categories should be created via view.CreateFilterCategory and cached in a static variable
            for faster processing.
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IScene2DViewRenderable.Get2DViewActions(CSharpFramework.Controls.Scene2DView,CSharpFramework.Scene.Scene2DActions)">
            <summary>
            Collect action names that can be performed for this object.
            </summary>
            <param name="view"></param>
            <param name="actions"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IScene2DViewRenderable.Perform2DViewAction(CSharpFramework.Controls.Scene2DView,CSharpFramework.GroupAction,System.String)">
            <summary>
            Called for every object in the selection. The action name might not be supported for that specific object. In that case just ignore this function call
            </summary>
            <param name="view"></param>
            <param name="parent">a group action where actions can be attached</param>
            <param name="action">the action string</param>
        </member>
        <member name="T:CSharpFramework.Scene.IPropertyFlagsProvider">
            <summary>
            The IPropertyFlagsProvider can be implemented to dynamically provide
            flag properties to influence the visibility of properties in the
            property grid. The flags are queried and processed by the 
            UndoableObjectConverter class.
            
            You will typically implement this interface to mark properties as
            readonly or hidden
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IPropertyFlagsProvider.GetPropertyFlags(CSharpFramework.Scene.PropertyFlagsProviderInfo)">
            <summary>
            Gets the flags for the passed property.
            </summary>
            <param name="pd">Descriptor of the relevant property. Use pd.Name to retrive the name of the property.</param>
            <returns>Flags for the passed property. The return value can be a combination of multiple flags.</returns>
        </member>
        <member name="M:CSharpFramework.Scene.IPropertyFlagsProvider.GetAdditionalRootProperties(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Function that gets called to retrieve new properties on root level. GetPropertyFlags is not called for these new items
            </summary>
            <param name="context"></param>
            <returns>A collection (or null) of new property descriptors</returns>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.CAT_SHAPE">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.CATORDER_SHAPE">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.#ctor(System.String)">
            <summary>
            Constructor that takes the shape name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.SetParentLayerInternal(CSharpFramework.Layer)">
            <summary>
            Do not use
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.IsSiblingNameUnique(System.String)">
            <summary>
            Returns true if there is no other shape sibling of the same name. Calls Parent.IsChildNameUnique(wantedName,this)
            </summary>
            <param name="wantedName"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.IsChildNameUnique(System.String,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Returns true if there is no other shape in the child collection of the same name
            </summary>
            <param name="wantedName"></param>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetUniqueSiblingName(System.String)">
            <summary>
            Returns a shape name that is unique inside the sibling collection, so the whole name path is always unique
            </summary>
            <param name="wantedName"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.MakeShapeNameUniqueRecursive">
            <summary>
            Traverses through the shapes graph and validates the shape names
            </summary>
            <returns>true if any name needed to be modified</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetNextParentOfType(System.Type)">
            <summary>
            Gets the next parent that is derived from the passed class type (or same type)
            </summary>
            <param name="t">Type to check</param>
            <returns>The next parent shape of given type. Can be null</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.ToString">
            <summary>
            The ToString routine of shapes naturally returns the shape name
            </summary>
            <returns>The shape name</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetIconIndex">
            <summary>
            Get the icon index in the shape tree. To get a valid index, use EditorManager.GUI.ShapeTreeImages.AddBitmap
            for a static integer. To use a cached version of the index of a shape, use the IconIndex property
            </summary>
            <returns>icon index in image list</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetSelectedIconIndex">
            <summary>
             Get the icon index in the shape tree when selected. See GetIconIndex
            </summary>
            <returns>icon index in image list</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.InvalidateIcon">
            <summary>
            This function can be called whenever a new icon should be retrieved via GetIconIndex. It fires
            the ShapeChangedArgs(IconChanged) event so the trees are updated properly
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetMaxShapeNameIndex(System.String,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Recursively checks for the highest index of the shape name that starts with startName
            </summary>
            <param name="startName">The source name</param>
            <param name="ignoreShape">Existing shape to ignore while checking</param>
            <returns>highest index found in the shape hierarchy</returns>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase._bVisible">
            <summary>
            Visible status of this instance
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetSupportedPlatforms">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.InvalidateUniqueID(System.Boolean)">
            <summary>
            This function resets the unique ID so the shape gets a new one when assigned to the scene
            </summary>
            <param name="bRecurseChildren"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnUniqueIDChanged">
            <summary>
            Overridable that gets called when the unique shape ID has changed. This base function calls SetUniqueID
            on the engine instance (if created)
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.LayerIDChangedRecursive">
            <summary>
            Helper function to recursively call virtual function
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.SCRIPT_COMPONENT_CLASS">
            <summary>
            Class name of the native script component
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.ScriptPropertyMigrated">
            <summary>
            Global flag that indicates whether any script file property has been migrated to component
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.CanAttachComponent(CSharpFramework.Scene.ShapeComponent,System.String@)">
            <summary>
            Override this function to determine whether components of specific type can be attached to this instance or not.
            The default implementation calls the same function on the engine instance.
            </summary>
            <param name="compType"></param>
            <param name="sErrorMsgOut">Reason for failure in case of a failure</param>
            <returns>TRUE if the component can be added, otherwise FALSE</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.CanAttachComponentClass(CSharpFramework.Scene.ShapeComponentType,System.String@)">
            <summary>
            Overridable to test whether a component class can be attached. Usually this class does not need to be overwritten because this base implementation
            reduces this request to a CanAttachComponent call using its ShapeComponentType.ProbeComponent member
            </summary>
            <param name="componentClass"></param>
            <param name="sErrorMsgOut"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnAttachComponent(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            This overridable is called when vForge attaches a component instance to this shape instance.
            This base implementation just adds it to the C# component collection and calls the same function on the engine instance.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.AddComponentInternal(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnRemoveComponent(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            This overridable is called when vForge de-attaches a component instance from this shape instance.
            This base implementation just removes it from the C# component collection and calls the same function on the engine instance.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnParentComponentChanged(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Scene.ShapeComponent,System.Boolean)">
            <summary>
            Override this function to get notified when a component is added/removed from one of
            your parents.
            </summary>
            <param name="parent">Affected parent (can be higher up in the hierarchy)</param>
            <param name="component">The component thas has been added or removed</param>
            <param name="bAdded">If TRUE then the passed component has been added, otherwise it has been removed</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.AddRecursive(CSharpFramework.ShapeCollection)">
            <summary>
            Recursively add the Shape and its children to a flat collection
            </summary>
            <param name="destCollection"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.AddRecursive3D(CSharpFramework.ShapeCollection)">
            <summary>
            Recursively add the Shape3D and its children to a flat collection. Ignores simple ShapeBase instances.
            </summary>
            <param name="destCollection"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetShapeCountRecursive">
            <summary>
            Counts the number of shapes in this graph
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.AddChild(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Adds a shape to child collection. It uses the child.ChildIndex member to insert
            </summary>
            <param name="child">child shape to add</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.RemoveChild(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Remove shape from child collection
            </summary>
            <param name="child">child to remove</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnParentChanged(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            This virtual overridable is called when the shape is attached to a new parent.
            This base implementation calls the virtual OnChildAdded/OnChildRemoved function
            </summary>
            <param name="oldParent"></param>
            <param name="newParent"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnChildAdded(CSharpFramework.Shapes.ShapeBase,System.Int32)">
            <summary>
            Virtual overridable that is called to notify this shape that a child shape has been added somewhere in the hierarchy under this shape.
            This base implementation recurses up in the hierarchy. This function gets called from inside the base impelemtation of OnParentChanged.
            </summary>
            <param name="childShape">The shape that has been added</param>
            <param name="iDepth">Specifies how deep the shape is compared to this one. Value 1 represents a direct child of this shape, 2 is a grand-child etc.</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnChildRemoved(CSharpFramework.Shapes.ShapeBase,System.Int32)">
            <summary>
            Virtual overridable that is called to notify this shape that a child shape has been removed somewhere from the hierarchy under this shape.
            This base implementation recurses up in the hierarchy. This function gets called from inside the base impelemtation of OnParentChanged.
            </summary>
            <param name="childShape">The shape that has been added</param>
            <param name="iDepth">Specifies how deep the shape was compared to this one. Value 1 represents a direct child of this shape, 2 is a grand-child etc.</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.HasChildren">
            <summary>
            Determines whether shape has children or not
            </summary>
            <returns>true if it has children</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.SetParent(CSharpFramework.Shapes.ShapeBase,System.Boolean)">
            <summary>
            Attaches shape to a new parent
            </summary>
            <param name="newParent">the new parent</param>
            <param name="bValidateName">if true, the shape's name is validated and changed if there is a sibling of the same name</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.SetParent(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            non virtual version of SetParent that calls the virtual SetParent(newParent,true) function
            </summary>
            <param name="newParent"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.IsChildOrSubChildOf(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Checks if the shape passed as parameter is a parent of the current shape in the whole shape hierarchy
            </summary>
            <param name="parentToCheck">parent shape that should be checked</param>
            <returns>if parentToCheck is a direct or indirect parent of the current shape</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.SetParentInternal(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Sets the parent shape member without performing any transformation, callbacks etc.
            </summary>
            <param name="newParent"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.AllowsToSetParent(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Overridable that allows to determine whether this shape can be attached to a new parent
            </summary>
            <param name="newParent"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.AllowsToAddChild(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Overridable that allows to determine whether newChild can be added as a child
            </summary>
            <param name="newChild"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.UpdateEngineInstanceAttachment">
            <summary>
            Attaches the own engine instance to the currently valid parent and refreshes the attachment
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetChildByName(System.String)">
            <summary>
            Gets a child by name
            </summary>
            <param name="childName"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetChildByPath(System.String,System.String)">
            <summary>
            Gets a child by full path under this shape, this can be multiple levels deep if the path is separated
            </summary>
            <param name="childName"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetChildObjectByPath(System.String,System.String,System.String)">
            <summary>
            Gets a child by full path under this shape. The returned object can be a component or a shape, depending on the path separator
            </summary>
            <param name="path"></param>
            <param name="shapeSeparator"></param>
            <param name="componentSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.CreateAllLinks">
            <summary>
            Overridable that is called to create all possible links. Called from constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.CanLink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Overridable that gets called to check whether two links can be linked. Either src or target has this as OwnerShape.
            By default, this function calls CanLink on the src and target in both directions.
            </summary>
            <param name="src"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnLink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Performs the actual link. Either src or target has this as OwnerShape
            </summary>
            <param name="src"></param>
            <param name="target"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnUnlink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Unlinks. Either src or target has this as OwnerShape
            </summary>
            <param name="src"></param>
            <param name="target"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.IsLinkedToTarget(CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Tests whether this shape is linked to the passed linked target
            </summary>
            <param name="target">the target to test</param>
            <returns>true, if linked</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.IsLinkedBySource(CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Tests whether this shape is linked by the passed linked source
            </summary>
            <param name="source">the source to test</param>
            <returns>true, if linked</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.HasAnyLinkToShape(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Tests whether this shape is linked to any target of other shape or vice versa
            </summary>
            <param name="other">the other shape to test</param>
            <returns>true, if there is any link to or from the other shape</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.ReassignAllLinks">
            <summary>
            Update the links of this shape (overridable)
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.ReassignAllLinksRecursive">
            <summary>
            recursively update all links (involves children)
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.RenderLinkedShapes(CSharpFramework.VisionViewBase)">
            <summary>
            Display the shape links as arrows
            </summary>
            <param name="view">View to render the arrows to</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.SetShowAllLinkHotspots(System.Boolean,System.Boolean)">
            <summary>
            Set the status for showing all link hotspots
            </summary>
            <param name="bStatus"></param>
            <param name="bIncludeChildren"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.SetShowLinkHotspotsSelective(CSharpFramework.Shapes.ShapeLink,System.Boolean)">
            <summary>
            Shows the relevant link hotspots that can link to the matching
            </summary>
            <param name="matching"></param>
            <param name="bIncludeChildren"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetMatchingLinks(CSharpFramework.Shapes.LinkCollection,CSharpFramework.Shapes.ShapeLink,System.Boolean)">
            <summary>
            Adds all relevant links (both source and target) to a collection that can be linked to the passed matching link
            </summary>
            <param name="dest"></param>
            <param name="matching"></param>
            <param name="bIncludeChildren"></param>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.LINK_BACKUP_VISITOR">
            <summary>
            Hold one static instance of LinkBackupVisitor used for the LinkBackups property
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.AddHint(CSharpFramework.Shapes.ShapeBase.HintFlags_e)">
            <summary>
            Adds a bit to the hint bitmask
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.RemoveHint(CSharpFramework.Shapes.ShapeBase.HintFlags_e)">
            <summary>
            Removes a bit from the hint bitmask
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.SetHint(CSharpFramework.Shapes.ShapeBase.HintFlags_e,System.Boolean)">
            <summary>
            Sets or removes the hint flag (according to bStatus)
            </summary>
            <param name="bit"></param>
            <param name="bStatus"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.IsHintSet(CSharpFramework.Shapes.ShapeBase.HintFlags_e)">
            <summary>
            Checks whether a bit is set in the hint bitmask
            </summary>
            <param name="bit">bit to check</param>
            <returns>true, if bit is set</returns>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase._parentShape">
            <summary>
            parent shape in hierarchy
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnParentTransformationChanged">
            <summary>
            Gets called when the position, orientation or scaling of the next Shape3D parent has been modified.
            The event might be sent from a higher parent, if the direct parent is not a Shape3D instance (e.g. GroupShape).
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.InvalidateZoneBoundingBox">
            <summary>
            This should be called whenever a shape operation affects the bounding ox (or clipping distance!) of the owner zone.
            THIs function checks whether it is assigned to a zone
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnTransformationChanged">
            <summary>
            Gets called after the position, orientation or scaling of the shape has been modified
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.TraceShape(CSharpFramework.ShapeTraceMode_e,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.ShapeTraceResult@,System.Boolean)">
            <summary>
            Non-virtual function called by the editor to pick the shape and recursively test its children. To incorporate custom trace tests for
            a custom shape class either override the virtual OnTraceShape on the shape or its virtual TraceShape counterpart on the engine instance.
            </summary>
            <param name="mode"></param>
            <param name="rayStart"></param>
            <param name="rayEnd"></param>
            <param name="result"></param>
            <param name="bIncludeChildren"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method 
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method.
            Therefore, you should call GC.SupressFinalize to
            take this object off the finalization queue 
            and prevent finalization code for this object
            from executing a second time.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnAddedToScene">
            <summary>
            Called after shape as been added to the scene
            Base function forwards the call to all children.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnRemoveFromScene">
            <summary>
            Called before removed from scene.
            Base function forwards the call to all children
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.CallShapesAddedToSceneFunction(System.Boolean)">
            <summary>
            Helper function to recursively call the OnAddedToScene/OnRemoveFromScene function
            </summary>
            <param name="bStatus"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.SetChildCollectionInternal(CSharpFramework.ShapeCollection)">
            <summary>
            For internal use
            </summary>
            <param name="newCollection"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnSelected">
            <summary>
            Overridable that is called when the shape is selected
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnUnSelected">
            <summary>
            Overridable that is called when the shape is removed from selection list
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overridable shape render function for editor preview
            </summary>
            <param name="view">View to render the shape</param>
            <param name="mode">render mode (e.g. highlight)</param>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase._selectedFrameCounter">
            <summary>
            internal counter to prevent object from being rendered multiple times
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode,System.Boolean,System.Boolean)">
            <summary>
            Non virtual function for recursively render children
            </summary>
            <param name="view">View to render the shape</param>
            <param name="mode">render mode (e.g. highlight)</param>
            <param name="bRenderLinks">render link connections or not</param>
            <param name="bRecurseChildren">also render child shapes (or not)</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetLocalBoundingBox(CSharpFramework.Math.BoundingBox@)">
            <summary>
            Overridable to get the local bounding box of the shape. By default forwards call to the engine instance
            </summary>
            <param name="bbox">local box to fill in</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnParentZoneChanged">
            <summary>
            Overridable that is called when the shape (resp. its parent layer) is attached to a new zone.
            This base implementation calls SetParentZone on the engine instance (if it has one)
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.CallOnParentZoneChangedRecursive">
            <summary>
            Internal function that calls OnParentZoneChanged and recursively for all children
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnZoneRepositioned">
            <summary>
            Called when zones are repositioned with their pivot or when the view re-positions around a new zone
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.InflateBoundingBox(CSharpFramework.Math.BoundingBox,System.Boolean)">
            <summary>
            Inflates the target bounding box by the absolute bounding box of this shape and optionally its children
            </summary>
            <param name="target"></param>
            <param name="bRecurse"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.HasEngineInstance">
            <summary>
            Indicates whether shape as an engine instance
            </summary>
            <returns>true if it has a valid engine instance</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.CreateEngineInstance(System.Boolean)">
            <summary>
            Overridable to create the engine instance. 
            The actual engine instance is class specific, for instance a LightEngineInstance.
            This base implementation just calls PerformPostEngineInstanceCreationSetup.
            
            Note that the ShapeBase.CreateEngineInstance base function must be called _after_ the
            engine instance has been created. Alternatively you may directly call the
            PerformPostEngineInstanceCreationSetup function (see description of PerformPostEngineInstanceCreationSetup).
            </summary>
            <param name="bCreateChildren">if true, recursively create engine instances of children</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.ReAttachComponents">
            <summary>
            reattaches components to the native instance again
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.PerformPostEngineInstanceCreationSetup(System.Boolean)">
            <summary>
            Performs the necessary post-creation setup on a new engine instance.
            This includes establishing attachments and creating the child engine instances.
            By default ShapeBase.CreateEngineInstance takes care of calling PerformPostEngineInstanceCreationSetup.
            
            The post-creation setup has been decoupled from CreateEngineInstance due to request #12608.
            You can now manually call PerformPostEngineInstanceCreationSetup when reimplementing the CreateEngineInstance
            function without calling the base implementation (e.g. when deriving from EntityShape).
            
            You may additionally hook override the OnBeforeCreateEngineInstanceChildren function in case you
            need to trigger something once all initialisation is done, but *before* the child instances
            are created.
            <param name="bCreateChildren">if true, recursively create engine instances of children</param>
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnParentRecreated(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Virtual function that is called on all children when a parent shape has been
            recreated, but the children have been kept (not been recreated).
            
            Override this function to update any references to the parent shape that can
            get invalidate due to a recreation of the parent.
            </summary>
            <param name="parentShape">parent shape that has been recreated</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnBeforeCreateEngineInstanceChildren">
            <summary>
            Virtual function that is called during PerformPostEngineInstanceCreationSetup once
            all initializations have been done, *before* the child instances are created.
            Used by the EntityShape to call the entities InitFunction.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.RemoveEngineInstance(System.Boolean)">
            <summary>
            Overridable to remove the engine instance. Should call _engineInstance.Dispose()
            </summary>
            <param name="bRemoveChildren">if true, recursively remove engine instances of children</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.RemoveComponents">
            <summary>
            Overridable to remove the components
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.ReCreateEngineInstance(System.Boolean)">
            <summary>
            Non virtual function to recreate the engine instance (remove and add again)
            There are two ways to recreate the instance. Either removing also the children's 
            engine instances of the shape whose instance is to be removed and recreate them for 
            the new instance or otherwise keeping them.
            </summary>
            <param name="bRemoveChildren">set to true to remove the children's engine instances of shape 
            the instance is to be recreated and thus recreate them for the newly created instance or 
            otherwise to false to keep the children's engine instances</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.SetEngineInstanceBaseProperties">
            <summary>
            Virtual function to set the common properties of the shape (position etc.) on the engine object
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.SetVisible(System.Boolean,System.Boolean)">
            <summary>
            Set the visible state of the shape. Calls SetVisible on the engine instance and optionally recursively
            calls SetVisible for children
            </summary>
            <param name="bStatus">The new visible status</param>
            <param name="bIncludeChildren">if true recursively sets state for children</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.UpdateVisibleStateRecursive">
            <summary>
            Calls SetVisible(FinalVisibleState) on the engine instanceof this shape and all children
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnDoubleClick">
            <summary>
            Triggered when the user doubleclicks the shape icon in the tree view
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.PerformRelevantOperation(System.String,System.Int32,System.Int32)">
            <summary>
            Performs the relevant operation triggered by the context menu. The operation name
            matches one of the entries returned by RelevantOperations, oncluding the category path.
            </summary>
            <param name="name">name of the operation, one of RelevantOperations, but without Path</param>
            <param name="iShapeIndex">The index of this shape in the queue. This is useful if a group action 
            should be triggered for undo/redo convenience. Then the first shape (index #0) opens a group action and the last one
            (#iShapeCount-1) closes it</param>
            <param name="iShapeCount">Number of shapes in the queue. If 1, this is the only shape in the queue, so
            a single action can be spawned.</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.CanGroupRelevantOperation(System.String,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Overridable to indicate whether a relevant operation can be grouped with the identical operation of another shape.
            Returns true by default.
            </summary>
            <param name="name">name of the operation to test, including path</param>
            <param name="otherShape">The other shape to test</param>
            <returns>if false, the operation will not appear in the menu</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetImageForRelevantOperation(System.String)">
            <summary>
            Overridable that can return an image that shows up in the menu items. The default implementation return
            the shape's icon in the tree view
            </summary>
            <param name="operationName">the name of the operation, see retrieved by RelevantOperations</param>
            <returns>the image to display</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.IsPropertyRelevant(System.Reflection.PropertyInfo,CSharpFramework.Shapes.ShapeBase.PropertyRelevantQueryReason_e)">
            <summary>
            Virtual overridable that indicates whether this property is relevant for prefab XML serializstion.
            This default implementation checks for the PrefabRelevantAttribute and the BrowsableAttribute.
            If the PrefabRelevantAttribute is set, it overrides everything. Otherwise the BrowsableAttribute is used.
            </summary>
            <param name="prop"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetRelevantProperties(System.Collections.ArrayList,CSharpFramework.Shapes.ShapeBase.PropertyRelevantQueryReason_e)">
            <summary>
            Virtual overidable that fills the target array with instances of PropertyInfo that are relevant for prefabs for instance.
            The default implementation fills in all instances that are indicated by the virtual IsPropertyRelevant function
            </summary>
            <param name="targetList"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnPostPrefabCreation(CSharpFramework.ShapeCollection,CSharpFramework.Scene.PrefabDesc)">
            <summary>
            Overridable callback that is called after all shapes have been created by a prefab. Fixup inter-dependencies here
            </summary>
            <param name="allRootShapes"></param>
            <param name="prefab"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetFarClipDistance">
            <summary>
            ReadOnly property used for building the zone's common far clip distance. Return negative value for no far clipping.
            The base shape (non 3D) returns 0.0 so it does not contribute to far clipping. The Shape3D returns -1.0 by default to
            indicate it uses the full clipping range by default.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnSceneEvent(CSharpFramework.SceneEventArgs)">
            <summary>
            This function is called for every shape in the scene when the EditorManager.OnSceneEvent function is triggered.
            The base implementation is not empty so it should be called.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetShapeTreeDropAction(CSharpFramework.ShapeCollection)">
            <summary>
            You can override this function if you want to execute a custom action when dropping shapes
            in the ShapeTreeView on another shape.
            
            The default action is adding the dropped shapes as child shapes to a new parent. Please note
            that the action is executed by the shape the dragged shapes are dropped onto and not by the 
            dragged shapes. 
            
            Please also note that for multiple dropped shapes you should use a GroupAction to collect 
            multiple actions and process it as a single element on the action stack. It is also up to
            you to take care whether a custom drop action should be executed on shapes of different types.
            </summary>
            <param name="droppedShapes"> The shapes that are dragged and dropped onto this shape </param>
            <returns> The custom action that will be executed for this shape </returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.RunVisitor(CSharpFramework.Visitors.IShapeVisitor)">
            <summary>
            Runs a visitor on this shape and all children
            </summary>
            <param name="visitor">visitor to process for each shape</param>
            <returns>VisitFailed if one of the visitors reported a fatal error. Any other value stands for success.</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.RunLinkVisitor(CSharpFramework.Visitors.IShapeLinkVisitor)">
            <summary>
            Runs a visitor on all source and target shape links of this shape.
            Note: does *not* run the visitor on the links referenced by the target/source links.
            </summary>
            <param name="visitor">visitor to process for each link</param>
            <returns>VisitFailed if one of the visitors reported a fatal error. Any other value stands for success.</returns>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase._engineInstance">
            <summary>
            engine instance of the shape
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.System#ICloneable#Clone">
            <summary>
            Explicit interface method impl -- available for
            clients of ICloneable, but invisible to casual
            clients of MyCloneableClass
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.Clone">
            <summary>
            Friendly, type-safe clone method
            </summary>
            <returns>Cloned shape</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.CloneLinkCollection(CSharpFramework.Shapes.LinkCollection)">
            <summary>
            Internal helper function to deep clone the passed collection and set the new owner to this
            </summary>
            <param name="srcList"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnDeserialization">
            <summary>
            Overridable that gets called after scene deserialisation.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnDeserialization(System.Object)">
            <summary>
            IDeserializationCallback implementation, calls the virtual OnDeserialization function
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnExport(CSharpFramework.Scene.SceneExportInfo)">
            <summary>
            Calls export function on engine instance
            </summary>
            <returns>true if export was successful</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnExportRecursive(CSharpFramework.Scene.SceneExportInfo)">
            <summary>
            Recursively exports shape and its children
            </summary>
            <returns>true if export was successful</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetDependencies(CSharpFramework.Scene.ResourceSnapshotInfo)">
            <summary>
            Overridable to collect resource dependencies for the native engine instance.
            </summary>
            <param name="info">The info object has a member that can be casted to a native VResourceSnapshot instance</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetDependenciesRecursive(CSharpFramework.Scene.ResourceSnapshotInfo)">
            <summary>
            Non virtual function that calls GetDependencies for this shape and recursively for its children
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetStaticLightInfo(CSharpFramework.Scene.StaticLightInfo)">
            <summary>
            virtual function to collect information for static light update
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetStaticLightInfoRecursive(CSharpFramework.Scene.StaticLightInfo)">
            <summary>
            Function to recursively collect information for static light update
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetVisibilityInfo(CSharpFramework.Scene.IVisibilityBuilder)">
            <summary>
            Virtual overridable function to collect visibility info from the scene. This base implementation does not do anything.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.ResetVisibilityInfo(CSharpFramework.Scene.IVisibilityBuilder)">
            <summary>
            Virtual overridable function to reset visibility info. This base implementation does not do anything.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnRecomputeVisibility(CSharpFramework.Scene.IVisibilityBuilder)">
            <summary>
            Virtual overridable function that is called when the object has to be reassigned to visibility zones.
            THis base implementation forwars it to the virtual engine instance's function
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.AssignGeometryToVisibiltyZone(CSharpFramework.Shapes.VisibilityZoneShape)">
            <summary>
            If this shape serves as an owner for local visibility, this overridable function is called to assign relevant parts to the passed (child)
            visibility zone. This function is called from inside the visibility builder.
            </summary>
            <param name="zone">Zone that is typically a child of this shape that collects visibility</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetVisibilityInfoRecursive(CSharpFramework.Scene.IVisibilityBuilder)">
            <summary>
            Non-virtual function that recursively calls GetVisibilityInfo on this and children
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.ResetVisibilityInfoRecursive(CSharpFramework.Scene.IVisibilityBuilder)">
            <summary>
            Non-virtual function that recursively calls ResetVisibilityInfo on this and children
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.RecomputeVisibilityRecursive(CSharpFramework.Scene.IVisibilityBuilder)">
            <summary>
            Non-virtual function that recursively calls OnRecomputeVisibility on this and children
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetScene2DRenderingSortingKey(CSharpFramework.Controls.Scene2DView)">
            <summary>
            Overridable float value that determines the render order in the 2D view
            Small values are rendered first, so 3d shapes can pass their z-coordinate for a top view.
            This function is called multiple times while sorting and also called very time a view is rendered.
            </summary>
            <param name="view">The view that is rendered</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.OnPaintScene2DView(CSharpFramework.Controls.Scene2DView,System.Windows.Forms.PaintEventArgs)">
            <summary>
            If Scene2DRenderingEnabled is enabled, then this function is called for every 2D view. This object can paint itself into the view
            </summary>
            <param name="view"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetAbsoluteBoundingBox(CSharpFramework.Controls.Scene2DView)">
            <summary>
            If Scene2DRenderingEnabled is enabled, then this function is called to re-evaluate the scene's size in the view
            </summary>
            <param name="view"></param>
            <returns>A world space bounding box, can be null</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetPluginInformation">
            <summary>
            Return an info structure that describes the source plugin that is required to run this shape.
            All shape classes inside a plugin should return the same static instance of EditorPluginInfo.
            This base implementation returns null
            </summary>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase._fSortingKey">
            <summary>
            Individual sorting key that is used to sort shape collections
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.CompareTo(System.Object)">
            <summary>
            Implements the comparison between two shapes. Uses the _fSortingKey value.
            Sorts into descending order, i.e. largest values of _fSortingKey first
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.GetPropertyFlags(CSharpFramework.Scene.PropertyFlagsProviderInfo)">
            <summary>
            Gets the flags for the passed property. Used to dynamically mark properties as hidden or readonly.
            </summary>
            <param name="propertyDesc">Descriptor of the relevant property. Use pd.Name to retrive the name of the property.</param>
            <returns>Flags for the passed property. The return value can be a combination of multiple flags.</returns>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.Searchable">
            <summary>
            Indicates whether the shape may be included in search operations.
            Use the ShapeSearchableAttribute to exclude shape classes from search operations.
            To exclude specific instances rather than classes, you can add/remove the HintFlags_e.NonSearchable hint flag.
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.ParentLayer">
            <summary>
            Get the layer that this shape belogs to. Don't set it
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.ParentLayerSafe">
            <summary>
            Returns the parent layer != null
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.Traceable">
            <summary>
            pickable in engine view or not
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.CanCopyPaste">
            <summary>
            The shape can be copied or cloned
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.ShapeName">
            <summary>
            Name of the shape
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.Parent">
            <summary>
            Parent of the shape. The set function should only be used internally.
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.NextShape3DParent">
            <summary>
            Gets the next parent of the type Shape3D, used for attaching (e.g. for skipping GroupShapes)
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.NextAttachableEngineInstanceParent">
            <summary>
            Gets the next parent of the type Shape3D, that should be use for engine instance attachments - can be different than NextShape3DParent
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.NextNonVirtualParent">
            <summary>
            Gets the next parent of shape that does not have the virtual flag
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.IconIndex">
            <summary>
            Accesses the icon index used in the tree view.
            The get function calls the virtual GetIconIndex and caches the icon index.
            To reset the cache, -1 can be assigned.
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.SelectedIconIndex">
            <summary>
            Accesses the selected icon index used in the tree view. The return value can be -1 to use the standard icon.
            The get function calls the virtual GetSelectedIconIndex and caches the icon index.
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.UserDataString">
            <summary>
            Arbitrary user data string. Not used by vForge or the engine.
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.FinalVisibleState">
            <summary>
            Determines the visible status of this shape (combines own status with parent layer's status)
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.ExportShape">
            <summary>
            Gets or sets the flag whether this specific shape should be exported to vscene file or not
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.LocalID">
            <summary>
            local ID provided by the Layer
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.ID">
            <summary>
            String output version of UniqueID for the property grid
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.UniqueID">
            <summary>
            64-bit unique ID that consists of the layer's hash and a layer-unique shape ID.
            The set function only sets the lower 32bit uint on the LocalID member. This allows the prefab shape
            to matchup IDs after reloading a prefab definition when the XML contains UniqueID properties. 
            In other cases this should not be used (and is the same as the LocalID set function anyway)
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.ScriptFile">
            <summary>
            Entity visibility bitmask that determines the visible status in the rendering contexts
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.SupportsComponents">
            <summary>
            Override this function to enable components for this shape class.
            The default implementation calls the same function on the engine instance
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.ComponentsInternal">
            <summary>
            Internal property that can be used for the DependentProperties attribute to backup the components
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.ChildIndex">
            <summary>
            Index of this shape in the parent's child collection
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.ShapePath">
            <summary>
            Returns a new ShapePath object that represents the full path of this shape inside the layer
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.LinkSources">
            <summary>
            Collection of link sources
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.LinkTargets">
            <summary>
            Collection of link targets
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.LinkBidirections">
            <summary>
            Collection of link targets
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.LinkBackups">
            <summary>
            Pseudo property to get a link config of this shape. 
            This might be useful when the link config must be backed up along with a SetProperty action (DependentProperties attribute).
            This property uses class LinkBackupVisitor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.HintFlags">
            <summary>
            Access shape hint flags (bitmask)
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.ShapeVirtualCounter">
            <summary>
            This counter is neccesary to handle nested prefabs properly. Making a parent prefab editable should not make nested
            prefabs (or visibility info) editable or visible, that's why it is handled via a counter.
            Prefabs call ShapeVirtualCounter++ or ShapeVirtualCounter--
            This counter is not serialized as >0 sets the HintFlags_e.NonSerialized flag
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.IsAddedToScene">
            <summary>
            Returns whether this shape is already part of the scene
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.Selected">
            <summary>
            Gets the selection status. Select a shape via the Gizmo
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.WantsNativeRenderHookCallback">
            <summary>
            This property can be set so that the virtual OnRenderHook function is called on the engine instance of this shape.
            By default this flag is disabled.
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.AbsoluteBoundingBox">
            <summary>
            Overridable to return the absolute bounding box. This base implementation returns null
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.ToolTip">
            <summary>
            This tool tip object might be used for multiple purposes, e.g. show in the shape tree view
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.RelevantOperations">
            <summary>
            Returns an array of names (strings) of relevant operation that can work on this shape instance,
            such as "Edit script". The right-click context menu in the view merges the relevant
            operations and displays them as menu entries. It only shows relevant operations
            that all selected shapes have in common. If a relevant operation is selected, the
            virtual PerformRelevantOperation function gets called with the operation name passed as
            a parameter.
            The return value can be null. To generate sub-categories in the menu, the '\' character can be used,
            e.g. "Scripting\Edit script". The full path name be passed to PerformRelevantOperation, not just the name.
            </summary>
        </member>
        <member name="E:CSharpFramework.Shapes.ShapeBase.OnShapeCloned">
            <summary>
            Notification function that is called for every base shape that has been cloned. The cloning of the clone parameter might still be
            in progress, but the shape object already exists.
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.Scene2DRenderingEnabled">
            <summary>
            Get or set the status for rendering this object into any 2D map view
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.Modifiable">
            <summary>
            Implements the ISceneObject interface and returns the locked status of the owner layer
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeBase.Modified">
            <summary>
            Implements the ISceneObject interface and sets the Dirty status
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeBase.HintFlags_e">
            <summary>
            HintFlags_e : these are bits for additional per shape flags (also per shape class)
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.None">
            <summary>
            no bit set
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.NodeExpanded">
            <summary>
            the tree node is currently expanded
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.NoScale">
            <summary>
            the shape instance does not allow scaling
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.OnlyUniformScale">
            <summary>
            the shape instance can only be scaled uniformely
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.NonRemovable">
            <summary>
            the shape is not removable
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.NoChildren">
            <summary>
            the shape cannot have children
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.NonSerialized">
            <summary>
            the shape will not be serialized (saved)
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.NoExport">
            <summary>
            the shape will not be exported
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.Selected">
            <summary>
            the shape is currently selected
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.HideChildren">
            <summary>
            Child shapes are not added to the tree
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.Virtual">
            <summary>
            This shape is part of a prefab and cannot be selected etc. It is also not serialized
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.ForceSceneGraphParenting">
            <summary>
            If specified, the ParentingMode property of a shape always returns SceneGraph
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.Scene2DRenderingEnabled">
            <summary>
            The shape is considered for rendering in a 2d map view
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.NonSearchable">
            <summary>
            If specified, this shape instance will not appear in any search results
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.Invisible">
            <summary>
            If specified, this shape will not appear in any tree view
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.NoRotation">
            <summary>
            The shape does not support rotations
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.AddedToScene">
            <summary>
            The OnAddedToScene function has been calledfor this object
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.SkipParenting">
            <summary>
            Skip a shape while searching for a valid parent for attaching (ShapeBase.NextShape3DParent)
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.NoSelectionOnCreation">
            <summary>
            The shape will not be selected on creation
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.NoScalingForLocalBoundingBox">
            <summary>
            Indicates that the local bounding box is scaled already
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.ManualLock">
            <summary>
            The shape is manulally locked and cannot be modified anymore
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.HideGizmo">
            <summary>
            If specified, this shape does not show the gizmo and also does not contribute to the gizmo's average position.
            However, the shape is still moved along with the gizmo if the shape is part of the selection.
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.NoUserTransform">
            <summary>
            The shape has transformation but this cannot be modified by the user
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.RetainPositionAtCreation">
            <summary>
            Instantiation of this shape upon creation time (e.g. through creator plugin) will not modify the shape's position
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.OnlyYawRotation">
            <summary>
            Mutually exclusive with 'NoRotation': Rotation is only allowed around yaw axis
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.NoFullZoneUnload">
            <summary>
            If specified, a zone that contains this shape type cannot be fully unloaded
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.RenderHookCallbackEnabled">
            <summary>
            Internal flag
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.HintFlags_e.AutoRenamingEnabled">
            <summary>
            When shape has been renamed by user
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeBase.LinkBackupVisitor">
            <summary>
            Visitor class that stores link collections in a dictionary (key=link string ID, value=LinkCollection of the connected links of the key)
            </summary>
        </member>
        <member name="T:CSharpFramework.Visitors.IShapeLinkVisitor">
            <summary>
            Base class for shape link visitors
            
            The visitor pattern is used to separate the iteration/recursion code
            from the logic. While the iteration/recursion code is part of the RunVisitor
            function (e.g. ShapeBase.RunLinkVisitor), the logic code is encapsulated in
            the various visitor implementations.
            </summary>
        </member>
        <member name="M:CSharpFramework.Visitors.IShapeLinkVisitor.Visit(CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Visits the passed link
            </summary>
            <param name="link">shape link to visit</param>
            <returns>Visit result, determines the behaviour of the visiting process. See enumeration for details.</returns>
        </member>
        <member name="T:CSharpFramework.Visitors.IShapeLinkVisitor.VisitResult">
            <summary>
            Enumeration of results the visit function may return
            </summary>
        </member>
        <member name="F:CSharpFramework.Visitors.IShapeLinkVisitor.VisitResult.VisitOk">
            <summary>
            Everything okay, just go on
            </summary>
        </member>
        <member name="F:CSharpFramework.Visitors.IShapeLinkVisitor.VisitResult.VisitStop">
            <summary>
            Immediately stop the visit cascade
            </summary>
        </member>
        <member name="F:CSharpFramework.Visitors.IShapeLinkVisitor.VisitResult.VisitFailed">
            <summary>
            Immediately stop the visit case and report a failure (return VisitFailed as final result)
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.LinkBackupVisitor.Collect(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Call this function to fill and return the dictionary with connections of the passed shape
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeBase.LinkBackupVisitor.Apply(CSharpFramework.Shapes.ShapeBase,System.Collections.Generic.Dictionary{System.String,CSharpFramework.Shapes.LinkCollection})">
            <summary>
            Establish the links for the passed shapes. It does not remove existing links but only creates new ones that are in the dictionary
            </summary>
            <param name="shape"></param>
            <param name="dict"></param>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeBase.PropertyRelevantQueryReason_e">
            <summary>
            Enum that is passed to functions IsPropertyRelevant/GetRelevantProperties
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.PropertyRelevantQueryReason_e.PrefabWriteToXML">
            <summary>
            Properties for writing prefab to XML are collected
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeBase.PropertyRelevantQueryReason_e.PrefabExposeParameter">
            <summary>
            Properties for exposing as prefab per instance parameter
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.CAT_POSITION">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.CAT_ORIENTATION">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.CAT_SCALING">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.CAT_HAVOKAI">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.CATORDER_POSITION">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.CATORDER_ORIENTATION">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.CATORDER_SCALING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.CATORDER_HAVOKAI">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.#ctor(System.String)">
            <summary>
            Constructor that takes shape name
            </summary>
            <param name="name">Shape name</param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.UpdatePosition">
            <summary>
            Updates 3D position and dependencies
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.TriggerRecenterPosition(CSharpFramework.ShapeCollection)">
            <summary>
            Useful helper function to trigger an action that re-centers this shape to the center of the passed collection
            </summary>
            <param name="relevantShapes"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.TriggerRecenterPosition(CSharpFramework.Math.Vector3F)">
            <summary>
            Useful helper function to trigger an action that sets a new shape position while preserving the world-space position of its children
            </summary>
            <param name="newPosition"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.UpdateOrientation">
            <summary>
            Update orientation and dependencies
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.SetScaling_Internal(System.Single,System.Single,System.Single)">
            <summary>
            Sets the scaling value without setting on engine instance or calling OnTransformationChanged. For internal use only 
            </summary>
            <param name="sx"></param>
            <param name="sy"></param>
            <param name="sz"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.SetPositionOrientation(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Sets the position and orientation of the shape. 
            
            This function modifies the position and orientation in one step and thus propagates
            the transformation change event once only. Use this function if you need to update
            the transformation very frequently and thus don't want to set the Position and
            Orientation properties separately.
            </summary>
            <param name="position">New position. See Position property</param>
            <param name="orientation">New orientation. See Orientation property</param>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D._updatingWorldSpaceTransform">
            <summary>
            Indicates that the world space transformation of the shape is currently being recomputed
            (used to avoid recursive calls)
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D._localSpacePosition">
            <summary>
            Local space position of the shape. Only valid when the shape uses scene graph based parenting.
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D._localSpaceRotMatrix">
            <summary>
            Local space rotation of the shape. Only valid when the shape uses scene graph based parenting.
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D._localSpaceScaling">
            <summary>
            Local space scaling of the shape. Only valid when the shape uses scene graph based parenting.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.CanUseEngineParenting">
            <summary>
            Indicates whether this shape can use engine instance based parenting. Required that both this
            shape and the parent support engine instance based attachments.
            </summary>
            <returns>true if engine instance based parenting can be used</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.OnParentTransformationChanged">
            <summary>
            Gets called when the position, orientation or scaling of the next Shape3D parent has been modified.
            The event might be sent from a higher parent, if the direct parent is not a Shape3D instance (e.g. GroupShape).
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.AcquireEngineTransformation">
            <summary>
            Gets the current position and orientation from the engine instance and sets the shape's
            position and orientation accordingly. 
            </summary>
            <returns>Returns False if this operation is not supported by the underlying engine instance</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.RecomputeLocalSpaceTransformation">
            <summary>
            Recompute the local space transformation, based on the current world space transformation.
            This function is only used in scene graph parenting modes
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.RecomputeWorldSpaceTransformation">
            <summary>
            Recompute the world space transformation, based on the current local space transformation
            This function is only used in scene graph parenting modes
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.SetParent(CSharpFramework.Shapes.ShapeBase,System.Boolean)">
            <summary>
            Overrriden. Needs to update the local space transformation of the shape.
            </summary>
            <param name="newParent"></param>
            <param name="bValidateName"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.OnDragging(CSharpFramework.ShapeDragMode)">
            <summary>
            Gets called while shape is being dragged by the Gizmo
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.OnDragBegin(CSharpFramework.ShapeDragMode)">
            <summary>
            Notification that dragging has started
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.OnDragEnd(CSharpFramework.ShapeDragMode)">
            <summary>
            Notification that dragging has finished
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.OnTraceShape(CSharpFramework.ShapeTraceMode_e,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.ShapeTraceResult@)">
            <summary>
            Overridable to trace the shape. By default redirects to the engine instance.
            This function can be overridden to implement custom shape picking. However, if picking should be performed on a per-polygon mesh that is
            part of the engine instance, then it makes more sense to implement the virtual TraceShape function on the engine instance class.
            </summary>
            <param name="mode">trace mode (picking or drop-to-floor)</param>
            <param name="rayStart">ray start</param>
            <param name="rayEnd">ray end</param>
            <param name="result">trace result to fill in</param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.GetCustomDropToFloorAction(CSharpFramework.Shapes.Shape3D.DropToFloorMode,CSharpFramework.Math.Vector3F,CSharpFramework.ShapeCollection)">
            <summary>
            Overridable to replace standard drop-to-floor behavior
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridable that gets called when beginning dragging a hotspot
            </summary>
            <param name="hotSpot">The hotspot that is dragged</param>
            <param name="view">The view</param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridable that gets called while dragging a hotspot
            </summary>
            <param name="hotSpot">The hotspot that is dragged</param>
            <param name="view">The view</param>
            <param name="fDeltaX">mouse delta x</param>
            <param name="fDeltaY">mouse delta y</param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Overridable that gets called when stopping dragging a hotspot
            </summary>
            <param name="hotSpot">The hotspot that is dragged</param>
            <param name="view">The view</param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Overridable that gets called per hotspot to update the hotspot's position
            </summary>
            <param name="hotSpot">The hotspot that should update its position</param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.OnHotSpotRender(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overridable that gets called to render a hotspot
            </summary>
            <param name="hotSpot">The hotspot that is to be rendered</param>
            <param name="view">The view</param>
            <param name="mode">Rendering mode</param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.GetSnapPointList(CSharpFramework.ShapeCollection,System.Collections.ArrayList,System.Boolean)">
            <summary>
            Fills the destArray with all snap points in the shapes collection
            </summary>
            <param name="shapes"></param>
            <param name="destArray"></param>
            <param name="bRecurseChildren"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.GetSnapPointList">
            <summary>
            Build a list of snap points. Each array entry must be of type ShapeSnapPoint
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.PerformRelevantOperation(System.String,System.Int32,System.Int32)">
            <summary>
            Overridden function
            </summary>
            <param name="name"></param>
            <param name="iShapeIndex"></param>
            <param name="iShapeCount"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.RecreateCustomLinks">
            <summary>
            Overridable to re-build the list of custom links
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.PerformPostEngineInstanceCreationSetup(System.Boolean)">
            <summary>
            This function additionally gathers native links from the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.SetEngineInstanceBaseProperties">
            <summary>
            Overridable to set the common properties of the shape (position etc.) on the engine object
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.GetOrientedBoundingBox(CSharpFramework.Math.BoundingBox@,CSharpFramework.Math.Vector3F@,CSharpFramework.Math.Matrix3F@)">
            <summary>
            The GetOrientedBoundingBox function creates an oriented box from the local, shape offset and orientation
            </summary>
            <param name="localbox">reference that receives the (scaled) local box</param>
            <param name="center">reference that receives the shape center</param>
            <param name="rotation">reference that receives the shape rotation matrix</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Render the shape in the view (debug output only). By default renders a line box;
            this is the default behaviour that applies for most shapes.
            </summary>
            <param name="view">View to render the shape</param>
            <param name="mode">render mode (e.g. highlighted)</param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.OnDoubleClick">
            <summary>
            This override centers the camera to look at the shape (calls LookAt() on the ActiveView)
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.GetScene2DRenderingSortingKey(CSharpFramework.Controls.Scene2DView)">
            <summary>
            Returns the z coordinate of the shape
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.GetAbsoluteBoundingBox(CSharpFramework.Controls.Scene2DView)">
            <summary>
            Returns the absolute bounding box
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.GetFarClipDistance">
            <summary>
            Overridden ShapeBase function that returns -1.0f to indicate it uses the full clipping range by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Shape3D.OnDeserialization">
            <summary>
            Called when deserialisation of shapes is finished
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.Visible">
            <summary>
            Gets or sets the visible status of the shape (forwards to engine instance)
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.Position">
            <summary>
            Get or set 3D position
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.RenderPosition">
            <summary>
            Get the render 3D position. By default same as Position
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.LocalSpacePosition">
            <summary>
            Get the local space position (relative to parent)
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.x">
            <summary>
            Get or set 3D x-position
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.y">
            <summary>
            Get or set 3D y-position
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.z">
            <summary>
            Get or set 3D z-position
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.Orientation">
            <summary>
            Get or set Euler orientation
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.Yaw">
            <summary>
            Get or set Euler yaw orientation
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.Pitch">
            <summary>
            Get or set Euler pitch orientation
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.Roll">
            <summary>
            Get or set Euler roll orientation
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.RotationMatrix">
            <summary>
            Get/set the rotation matrix. Internally the shapes works with Euler angles so a conversion takes place when getting/setting the matrix
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.LocalSpaceRotation">
            <summary>
            Get the local space position (relative to parent)
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.XAxis">
            <summary>
            Gets the unit length vector pointing into the x-direction of the shape
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.YAxis">
            <summary>
            Gets the unit length vector pointing into the y-direction of the shape
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.ZAxis">
            <summary>
            Gets the unit length vector pointing into the z-direction of the shape
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.Scaling">
            <summary>
            Get or set scaling factors
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.ScaleX">
            <summary>
            Get or set scaling factor in x-direction
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.ScaleY">
            <summary>
            Get or set scaling factor in y-direction
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.ScaleZ">
            <summary>
            Get or set scaling factor in z-direction
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.UniformScaling">
            <summary>
            Get or set scaling factor in z-direction
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.NavMeshUsage">
            <summary>
            Get or set property that determines how shape is used during nav mesh building. It is virtual and has to be overridden to actually support
            Navmesh usage. The default implementation returns NotSupported which means the property is not shown in the property grid
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.AutoRenaming">
            <summary>
            Property whether shape has been manually renamed
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.ParentingMode">
            <summary>
            Indicates how the shape takes the parent transformation into account
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.RelevantOperations">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.LocalBoundingBox">
            <summary>
            Get the local bounding box of the shape. The return value is always !=null, but the bounding box might not be valid
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.LocalScaledBoundingBox">
            <summary>
            Scaled version of LocalBoundingBox. The return value is always !=null, but the bounding box might not be valid
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.AbsoluteBoundingBox">
            <summary>
            Creates the absolute bounding box using LocalScaledBoundingBox, Position and RotationMatrix
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.Shape3D.TextLabel">
            <summary>
            rbitrary text label to display at the 3D position. Not exported or used by the engine.
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.Shape3D.DropToFloorMode">
            <summary>
            Drop to floor mode
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.DropToFloorMode.Pivot">
            <summary>
            Use the pivot point
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.DropToFloorMode.BoundingBox">
            <summary>
            Use the bottom face of the bounding box
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.DropToFloorMode.BottomCenter">
            <summary>
            Use the center of the bottom face
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.Shape3D.ParentingModes">
            <summary>
            List of available parent modes for 3D shapes
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.ParentingModes.EngineInstance">
            <summary>
            Shape uses the engine's parenting and thus queries the transformation from the engine instance
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.ParentingModes.SceneGraph">
            <summary>
            Shape uses the scene graph parenting and thus queries the transformation from the parent shape
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.ParentingModes.SceneGraphScaled">
            <summary>
            Additionally applies parent's scaling to the local space transformation
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.Shape3D.ParentingModes.NoParentTransformation">
            <summary>
            Shape does not use the transformation from the parent shape at all
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeObject3D.RELEVANTOP_SHAPENAME_AS_KEY">
            <summary>
            This name might be reused for other shapes as well
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeObject3D._objectKey">
            <summary>
            Object key string
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeObject3D.PerformRelevantOperation(System.String,System.Int32,System.Int32)">
            <summary>
            Overridden function to perform the relevant operation
            </summary>
            <param name="name"></param>
            <param name="iShapeIndex"></param>
            <param name="iShapeCount"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeObject3D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeObject3D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeObject3D.ObjectKey">
            <summary>
            Gets or sets the object key, so the object can be searched in the engine
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeObject3D.RelevantOperations">
            <summary>
            Overridden function to get the relevant operations for this shape type
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IPrefabShape.#ctor(System.String)">
            <summary>
            Shape constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IPrefabShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IPrefabShape.GetFarClipDistance">
            <summary>
            Returns 0.0f as this shape does not contribute anything to far clipping
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Scene.IPrefabShape.Filename">
            <summary>
            Get or set the filename
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.IPrefabShape.Prefab">
            <summary>
            Get or set the prefab directly
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ICustomPrefabSerialization">
            <summary>
            Provides a mechanism to serialize specific additional objects along with shapes inside a prefab. By default only an ID match table is saved.
            Some shapes require additional objects, for instance the local ID of the lowres version (static mesh shape).
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ICustomPrefabSerialization.GetCustomPrefabSerializationObject">
            <summary>
            Called when serializing: Return a custom object. This object must be serializable
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ICustomPrefabSerialization.SetCustomPrefabSerializationObject(System.Object)">
            <summary>
            Called at loading time: Sets back the object that was saved with the file
            </summary>
            <param name="customObj"></param>
        </member>
        <member name="T:CSharpFramework.Scene.PrefabRelevantAttribute">
            <summary>
            Attribute that marks a single field as relevant for prefabs - or not. By default, all browsable read-write properties
            are relevant. This attribute helps to include/exclude certain (hidden) properties.
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabRelevantAttribute.#ctor(System.Boolean)">
            <summary>
            Attribute constructor
            </summary>
            <param name="bRelevant"></param>
        </member>
        <member name="P:CSharpFramework.Scene.PrefabRelevantAttribute.Relevant">
            <summary>
            Relevant status
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.PrefabResolveFilenameAttribute">
            <summary>
            Attribute that marks a single field as a filename. Filenames are optionally resolved (if filenames are stored relative) so fields must be marked as filenames.
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.PrefabTransformationUpdateAttribute">
            <summary>
            Helper attribute to mark Position/Orientation/Scaling properties (in Shape3D) so that these can be handled separately in per-instance properties 
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.PrefabDesc">
            <summary>
            This class is the template for a prefab. It does not hold shape instances but instead just the XML description
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.PrefabDesc.LOADINGVERSION_0">
            <summary>
            Loading version 0 (current)
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.PrefabDesc.CURRENT_LOADINGVERSION">
            <summary>
            Always holds the current loading version
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.#ctor(System.String)">
            <summary>
            Constructor, takes the filename
            </summary>
            <param name="filename"></param>
        </member>
        <member name="F:CSharpFramework.Scene.PrefabDesc.Filename">
            <summary>
            The filename of the prefab definition (XML)
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.PrefabDesc.LastError">
            <summary>
            Hold the last error description
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.PrefabDesc.PropertiesChanged">
            <summary>
            Can be used to check for changes after editing in the property grid
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.PrefabDesc.PrefabInstanceCreator">
            <summary>
            Set by the plugin
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.PrefabDesc.LoadingVersion">
            <summary>
            The version of the file
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.Load">
            <summary>
            Load the prefab using the current Filename
            </summary>
            <returns>true if sucessful</returns>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.LoadHeaderInformationFromFile">
            <summary>
            This function loads only header data from the prefab with the current filename. Header data is name, description, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.CallOnPostPrefabCreationRecursive(CSharpFramework.ShapeCollection,CSharpFramework.ShapeCollection)">
            <summary>
            helper function to call functions on all shapes
            </summary>
            <param name="rootShapes"></param>
            <param name="shapes"></param>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.FindShapeProperty(CSharpFramework.Shapes.ShapeBase,System.String,CSharpFramework.Scene.ISceneObject@)">
            <summary>
            Static helper function to access a property info by property path string
            </summary>
            <param name="rootshape"></param>
            <param name="path"></param>
            <param name="foundObj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.CreateInstances(System.Xml.XmlElement,System.Boolean,System.Boolean)">
            <summary>
            Creates instances of all root shapes inside this prefab
            </summary>
            <returns>A collection of shapes, can be empty. Only null if it fails (see LastError then)</returns>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.LoadHeader(System.Xml.XmlElement)">
            <summary>
            Extracts header information from the XML (name, description, ...)
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.EstablishAllLinks(CSharpFramework.ShapeCollection)">
            <summary>
            Establishes all links that are defined inside this prefab
            </summary>
            <param name="rootShapes"></param>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.ToText">
            <summary>
            Returns the text representation of the XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.SubNode(System.Xml.XmlDocument,System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Internal helper function
            </summary>
            <param name="doc"></param>
            <param name="parent"></param>
            <param name="name"></param>
            <param name="bWrite"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.AttributeValue(System.Xml.XmlDocument,System.Xml.XmlElement,System.String,System.String,System.Boolean)">
            <summary>
            Internal helper function
            </summary>
            <param name="doc"></param>
            <param name="parent"></param>
            <param name="name"></param>
            <param name="newval"></param>
            <param name="bWrite"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.SetHeaderProperties(System.Xml.XmlDocument)">
            <summary>
            patches up the XML header with prefab properties
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.AddShape(CSharpFramework.Shapes.ShapeBase,System.Xml.XmlElement,CSharpFramework.Math.Vector3F,System.Boolean,System.Boolean)">
            <summary>
            Helper function to recursively add shapes
            </summary>
            <param name="shape"></param>
            <param name="parentNode"></param>
            <param name="center"></param>
            <param name="bRecurseChildren"></param>
            <param name="bIgnoreVirtualShapes"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.AddShapeLinks(CSharpFramework.ShapeCollection,CSharpFramework.Shapes.ShapeBase,System.Boolean,System.Boolean)">
            <summary>
            Add relevant shape links to the prefab
            </summary>
            <param name="allShapes"></param>
            <param name="shape"></param>
            <param name="bRecurseChildren"></param>
            <param name="bIgnoreVirtualShapes"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.CreateFromInstances(CSharpFramework.ShapeCollection,CSharpFramework.Math.Vector3F,System.Boolean,System.Boolean)">
            <summary>
            Takes a list of shape instances and converts them into a prefab
            </summary>
            <param name="shapes"></param>
            <param name="center"></param>
            <param name="includeChildren"></param>
            <param name="bIgnoreVirtualShapes"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.SaveToFile(System.String)">
            <summary>
            Saves the current prefab to file (Should call CreateFromInstances before)
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.TriggerPropertiesChangedEvent">
            <summary>
            Triggers OnPrefabPropertiesChanged
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabDesc.Clone">
            <summary>
            Implements ICloneable
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Scene.PrefabDesc.Name">
            <summary>
            The name of the prefab, might be empty
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.PrefabDesc.Category">
            <summary>
            Optional category path of the prefab, might be empty
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.PrefabDesc.Description">
            <summary>
            The Description of the prefab, might be empty
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.PrefabDesc.Convertible">
            <summary>
            Hint flag from the header files that indicates whether this prefab can be made editable in vForge
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.PrefabDesc.AutoSaveBinary">
            <summary>
            If enabled, the binary runtime version (.vprefab) is saved automatically every time the prefab is (re-)saved
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.PrefabDesc.RelativeFilenames">
            <summary>
            If enabled, the binary runtime version (.vprefab) is saved automatically every time the prefab is (re-)saved
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.PrefabDesc.SourceShapesForExposedParameters">
            <summary>
            Used internally by the dialog to show the graph of properties
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.PrefabDesc.ExposedParameters">
            <summary>
            String collection of exposed parameters
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.PrefabDesc.DynamicProperties">
            <summary>
            Get the collection type that can be used for per-instance dynamic properties. Note that this collection is only valid after
            the first time CreateInstances has been called on this prefab.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.PrefabDesc.BinaryFilename">
            <summary>
            Returns the filename of the corresponding vprefab file
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.PrefabDesc.Loaded">
            <summary>
            Indicates whether prefab is loaded
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.PrefabDesc.PrefabChildrenListWithUniqueIDFromXML">
            <summary>
            This dictionary keeps the shapes created in RecursiveCreateShapes along with their original UniqueIDs that are stored in the prefab XML file
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.PrefabDesc.NewDocument">
            <summary>
            Creates a new XML document including header with current information
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.PrefabDesc.OnPrefabSaved">
            <summary>
            This event gets fired when a prefab file is saved. The sender is the prefab instance
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.PrefabDesc.OnPrefabPropertiesChanged">
            <summary>
            This event gets fired when a prefab changed its base properties. The sender is the prefab instance
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicPropertyCollection">
            <summary>
            Representation of a dynamic property collection instances. Holds a list of dynamic
            properties and references the underlying collection type definition.
            
            Use the DynamicPropertyManager or DynamicPropertyType classes to create instances
            of this class.
            
            When using DynamicPropertyCollection in a shape and dynamically changing the property
            set (e.g. via a class property) you should specify the collection as a dependent property
            in your class property (see DependentProperties attribute).
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.IStandardValueProvider">
            <summary>
            Interface that enables an object to provide a string collection for a specific key string.
            For instance, the EntityShape class implements it to provide a list of supported animation sequence names for
            the "Animation" key.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.IStandardValueProvider.GetStandardValues(System.String)">
            <summary>
            Implement this function and return the respective collection for known keys.
            </summary>
            <param name="key">The key string, usually provided by native class variables through the editor hint string</param>
            <returns>A collection or null</returns>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.IPropertyValueChangingCallback">
            <summary>
            Inerface that can be implemented to receive changing callbacks from certain UI editors. The SliderEditor attribute supports it.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.IPropertyValueChangingCallback.OnPropertyValueChanging(System.Object,System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Key function of this interface
            </summary>
            <param name="Instance"></param>
            <param name="propertyDesc"></param>
            <param name="newValue"></param>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicPropertyCollection._collectionType">
            <summary>
            Type definition of the property collection
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicPropertyCollection._properties">
            <summary>
            List of dynamic properties owned by this collection
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicPropertyCollection._owner">
            <summary>
            Holds the owner of the property collection
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicPropertyCollection._isMissing">
            <summary>
            Missing state of the collection. A collection is marked as missing if the
            dynamic property manager fails to migrate a collection to the latest collection
            type definition.
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.#ctor(CSharpFramework.Scene.ISceneObject)">
            <summary>
            Constructor that takes the owner scene object, used by Clone function
            </summary>
            <param name="owner">Owner. Can be null</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.#ctor(CSharpFramework.Scene.ISceneObject,CSharpFramework.DynamicProperties.DynamicPropertyCollectionType)">
            <summary>
            Constructor
            </summary>
            <param name="owner">Owner instance</param>
            <param name="collectionType">type of collection</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.CopyValuesFrom(CSharpFramework.DynamicProperties.DynamicPropertyCollection)">
            <summary>
            Copies the values from a specified collection.
            
            This function iterates through the properties and copies the value of each
            property from the specified collection. If a property does not exist in the
            specified collection or differs in the native type then the old value is
            preserved.
            </summary>
            <param name="otherCollection"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.CopyValuesFromOldCollection(CSharpFramework.DynamicProperties.CloneableBase)">
            <summary>
            Copies the values from an old collection (dynamic assembly format)
            
            This function copies the property values from an old property collection to this
            collection. Old property collections where done with dynamic assemblies.
            </summary>
            <param name="oldProperties"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.OnMigratedCollection(CSharpFramework.DynamicProperties.DynamicPropertyCollection)">
            <summary>
            Method that is called after a property collection has been migrated. Override this method
            to copy/migrate custom properties in your derived classes.
            </summary>
            <param name="oldCollection"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.GetPropertyByName(System.String)">
            <summary>
            Gets the dynamic property with the specified name
            </summary>
            <param name="propertyTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.GetPropertyByDisplayName(System.String)">
            <summary>
            Gets the dynamic property with the specified display name
            </summary>
            <param name="propertyTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.GetProperty(System.String)">
            <summary>
            Wraps around GetPropertyByDisplayName
            </summary>
            <param name="propertyTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.ContainsValue(System.Object)">
            <summary>
            Checks whether the passed value belongs to a property of this collection
            (by-reference-comparison)
            </summary>
            <param name="val">value to look for</param>
            <returns>true if the value belongs to a property of this collection</returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.GetPropertyDict(System.String)">
            <summary>
            Builds a dictionary of properties in this property collection
            </summary>
            <param name="separator">The separator character for vector components</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.OnValueChanged(CSharpFramework.DynamicProperties.DynamicProperty)">
            <summary>
            This is called by the UI after a value has been changed. It is not called for setting via property.Value
            </summary>
            <param name="prop"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.SetPropertyValue(System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value of the specified property.
            Optionally throws an exception if the specified property can not be found.
            </summary>
            <param name="propertyTypeName">property name</param>
            <param name="propertyValue">new property value</param>
            <param name="bThrowEx">should an exception be thrown</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.SetPropertyValue(System.String,System.Object)">
            <summary>
            Same as the other overload of SetPropertyValue (passes true for bThrowEx, thus throws an exception if it fails)
            </summary>
            <param name="propertyTypeName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.ParsePropertyValueString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sets the value of the specified property.
            Throws an exception if the specified property can not be found.
            </summary>
            <param name="propertyTypeName">property name</param>
            <param name="parseString">new property value that will be parsed according to the type</param>
            <param name="separator">separator character used for parsing the string</param>
            <param name="bThrowEx">if true, this function throws an exception if the property cannot be found</param>
            
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.GetPropertyParameterString(System.String)">
            <summary>
            Builds a parameter string. All parameters are concatenated using semicolon.
            This function can be overridden to inject custom properties into the string (e.g. for prefabs)
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.GetPropertyParameterString(System.String,System.Boolean)">
            <summary>
            Builds a parameter string. All parameters are concatenated using semicolon.
            This function can be overridden to inject custom properties into the string (e.g. for prefabs)
            if parameter bEscapeChars is enabled special chars are replaced by ascii code e.g. "\\092" by "\\"
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.OnParseCustomProperty(System.String,System.String)">
            <summary>
            Overridable function that is called by ParseParameterString for every property that is not found in this collection.
            Can be overridden to implement parsing of custom properties
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.ParseParameterString(System.String,System.String)">
            <summary>
            Parse a full parameter string that has been generated with GetPropertyParameterString
            </summary>
            <param name="paramstr"></param>
            <param name="separator"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.ParseParameterString(System.String,System.String,System.Boolean)">
            <summary>
            Parse a full parameter string that has been generated with GetPropertyParameterString
            </summary>
            <param name="paramstr"></param>
            <param name="separator"></param>
            <param name="bEscapeChars">if enabled special chars are replaced by ascii code e.g. "\\092" by "\\"</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.GetPropertyValue(System.String)">
            <summary>
            Gets the value of the specified property.
            Throws an exception if the specified property can not be found.
            </summary>
            <param name="propertyTypeName">property name</param>
            <returns>current value of the property</returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.GetPropertyValue(System.String,System.Boolean)">
            <summary>
            Gets the value of the specified property.
            Returns null if the specified property can not be found or optionally throws an exception.
            </summary>
            <param name="propertyTypeName">property name</param>
            <param name="bThrowException">true, to throw an exception when property cannot be found</param>
            <returns>current value of the property</returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization function
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.CloneCollection">
            <summary>
            Overridable to clone the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.Clone">
            <summary>
            Clones the property collection instance.
            Performs a deep copy of the dynamic properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.Equals(System.Object)">
            <summary>
            Performs a deep comparsion of all properties
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.GetHashCode">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.op_Equality(CSharpFramework.DynamicProperties.DynamicPropertyCollection,CSharpFramework.DynamicProperties.DynamicPropertyCollection)">
            <summary>
            Implements the equal operator for comparison between two DynamicPropertyCollection instances. Handles all combinations of null gracefully
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.op_Inequality(CSharpFramework.DynamicProperties.DynamicPropertyCollection,CSharpFramework.DynamicProperties.DynamicPropertyCollection)">
            <summary>
            Implements the equal operator for comparison between two DynamicPropertyCollection instances. Handles all combinations of null gracefully
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.GetStandardValues(System.String)">
            <summary>
            Implements the IStandardValueProvider function and forwards the request to the owner (if owner is defined and also implements IStandardValueProvider)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.GetPropertyFlags(CSharpFramework.Scene.PropertyFlagsProviderInfo)">
            <summary>
            Implements the IPropertyFlagsProvider interface. Forwards to the owner if that one implements IPropertyFlagsProvider
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.GetAdditionalRootProperties(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Implements IPropertyFlagsProvider (returns null)
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollection.OnPropertyValueChanging(System.Object,System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            By default propagates to the owner
            </summary>
            <param name="Instance">instance that is changing</param>
            <param name="propertyDesc"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyCollection.Owner">
            <summary>
            Holds the owner of the property collection
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyCollection.Properties">
            <summary>
            Gets the list of dynamic properties owned by this collection
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyCollection.CollectionType">
            <summary>
            Gets the type definition of the collection
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyCollection.Missing">
            <summary>
            Sets or gets the missing state of the collection. A collection is marked as missing if the
            dynamic property manager fails to migrate a collection to the latest collection type
            definition.
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyCollection.Modifiable">
            <summary>
            Implements ISceneObject
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyCollection.Modified">
            <summary>
            Implements ISceneObject
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType">
            <summary>
            Description of a dynamic property collection.
            Gives access to the property types and offers functions for creating dynamic property 
            collection instances of this type.
            
            Use this class to define your own dynamic property collections by adding the property types
            the collection should contain.
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.NativeVTypePtr">
            <summary>
            Can be used to store a native reference to source VType
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="uniqueName">unique name of the collection type</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.#ctor(System.String,CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.DynamicPropertyCollectionFlags_e)">
            <summary>
            Constructor
            </summary>
            <param name="uniqueName">unique name of the collection type</param>
            <param name="flags"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.Add(CSharpFramework.DynamicProperties.DynamicPropertyType)">
            <summary>
            Adds a property type to the collection
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.CreateInstance(CSharpFramework.Scene.ISceneObject)">
            <summary>
            Creates a dynamic property collection instance of this type
            </summary>
            <param name="forObject"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.CreateMigratedCollection(CSharpFramework.DynamicProperties.DynamicPropertyCollection)">
            <summary>
            Migrates the passed DynamicPropertyCollection to this type.
            
            Creates a new DynamicPropertyCollection instance and copies the values from the passed collection.
            Use this function to migrate your property collections to the latest types (e.g. for migrating
            your shader effect to the latest shader library)
            </summary>
            <param name="oldPropertyCollection"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.SetNiceName(System.String)">
            <summary>
            Use a function so the property remains read-only
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.SetDescription(System.String)">
            <summary>
            Use a function so the property remains read-only
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization function
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.PropertyTypes">
            <summary>
            Gets all property types of this collection
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.UniqueName">
            <summary>
            Gets the unique name of the collection
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.NiceName">
            <summary>
            Returns a nice name of the class, if available
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.DisplayName">
            <summary>
            Name to show up (defaults to NiveName)
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.Description">
            <summary>
            Returns a class description, if available
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.Flags">
            <summary>
            Returns the flags associated with this type
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.Hidden">
            <summary>
            Returns the staus of the DynamicPropertyCollectionFlags_e.Hidden bit in the flags
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.DynamicPropertyCollectionFlags_e">
            <summary>
            Enum that allows to add flags to the property type. These flags for instance come from the engine's entity class definition
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.DynamicPropertyCollectionFlags_e.None">
            <summary>
            No flags - default
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.DynamicPropertyCollectionFlags_e.Hidden">
            <summary>
            This type should be hidden in vForge, for instance do not enum the entity class in the class dropdown
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.PrefabManager.#ctor">
            <summary>
            Prevent creation
            </summary>
        </member>
        <member name="T:CSharpFramework.RemoteMessageType">
            <summary>
            Remote Message Type enum. Describes the type of an incoming message.
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMessageType.SYSTEM_CUSTOMMESSAGE">
            <summary>
            Message is a custom asynchronous message sent by the console (e.g. a command answer)
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMessageType.SYSTEM_DEBUGSTR">
            <summary>
            Message is a system debug string
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMessageType.SYSTEM_EXCEPTION">
            <summary>
            Message is an exception notification
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMessageType.SYSTEM_ASSERT">
            <summary>
            Message is an assertion notification
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMessageType.UNKNOWN">
            <summary>
            Message is of an unknown type
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMessageType.VISION_ERROR">
            <summary>
            Message is a fatal error reported by the Vision Engine
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMessageType.VISION_WARNING">
            <summary>
            Message is a Warning reported by the Vision Engine
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMessageType.VISION_MESSAGE">
            <summary>
            Message is a system message reported by the Vision Engine
            </summary>
        </member>
        <member name="T:CSharpFramework.RemoteMachineType">
            <summary>
            Remote Machine Type enum. Defines the remote machine (console) types that are available.
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMachineType.NOT_SET">
            <summary>
            No remote machine type set.
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMachineType.XBOX360">
            <summary>
            Remote machine is an Xbox360
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMachineType.PS3">
            <summary>
            Remote machine is a PS3
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMachineType.WII">
            <summary>
            Remote machine is a Wii
            </summary>
        </member>
        <member name="T:CSharpFramework.RemoteMessage">
            <summary>
            Structure for incoming remote messages
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMessage.msgText">
            <summary>
            Message text
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMessage.msgType">
            <summary>
            Type of the message - will be cast to a RemoteMessageType enum
            </summary>
        </member>
        <member name="F:CSharpFramework.RemoteMessage.msgData">
            <summary>
            Additional message data, depending on the message type
            </summary>
        </member>
        <member name="T:CSharpFramework.IPlatformManager">
            <summary>
            Abstract platform manager class. Provides abstract functions that are implemented by
            specific platform managers, such as the VisionPlatformManager in the ManagedFramework.
            </summary>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.RemoteMessageCallbackInstaller(CSharpFramework.IPlatformManager.RemoteMessageCallback,System.IntPtr)">
            <summary>
            Callback installer, required to install a managed callback which is called from
            native code
            </summary>
            <param name="remoteCallback">Callback function to be called by the remote</param>
            <param name="RemoteObject">Object on which the callback function is to be called</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.Initialize(CSharpFramework.RemoteMachineType)">
            <summary>
            Initialize a platform manager for the given machine type
            </summary>
            <param name="machineType">the type of machine this platform manager is for</param>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.IsInitialized">
            <summary>
            Returns whether the platform handler is initialized.
            </summary>
            <returns>true if there is initialized platform manager for this machine type</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.Connect(System.String)">
            <summary>
            Connects to the target machine
            </summary>
            <param name="targetMachine"></param>
            <returns>true if connecting was successful</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.Disconnect">
            <summary>
            Disconnects from the target machine
            </summary>
            <returns>true if diconnecting was successful</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.IsConnected">
            <summary>
            Returns whether there currently is an active connection to the client machine
            </summary>
            <returns>true if there is an active connection</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.CanIssueCommands">
            <summary>
            Returns whether commands can be issued to the target machine with the SendCommand
            method
            </summary>
            <returns>true if commands may be issued</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.CopyFilesToRemote(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies files to the remote machine.
            </summary>
            <param name="sourcePath">source path of the files to be copied (wildcards allowed)</param>
            <param name="targetPath">target path of the files to be copied</param>
            <param name="alwaysOverwrite">true if existing files should always be overwritten; false if existing files should only be overwritten if the incoming file is newer</param>
            <param name="includeSubdirs">true if subdirectories should recursively be copied as well</param>
            <returns>true if copying the files succeeded.</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.LaunchApp(System.String)">
            <summary>
            Launches an application on the target machine
            </summary>
            <param name="appName">path and filename (on the remote system) of the application to be launched on the remote machine</param>
            <returns>true if the app could successfully be launched</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.GetLastError">
            <summary>
            Returns the last error message on the remote machine.
            </summary>
            <returns>Last error message on the remote machine as a string, or String.Empty if no error has occured yet</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.SendCommand(System.String)">
            <summary>
            Sends a command to the remote machine
            </summary>
            <param name="command">command string - note that the command has to be supported by the client running on the remote system</param>
            <returns>true if the command has been sent successfully</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.CreateDir(System.String)">
            <summary>
            Creates a directory on the remote machibe
            </summary>
            <param name="directory">directory to be created (absolute path)</param>
            <returns>true if the directory could be created</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.DeleteFiles(System.String,System.Boolean)">
            <summary>
            Deletes files from the remote machine
            </summary>
            <param name="path">path and filename of the file to delete (wildcards are valid)</param>
            <param name="killRecursively">if true, subdirectories matching the path will be deleted as well</param>
            <returns>true if deleting the files was successful</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.ReassignShaders">
            <summary>
            Non-overridable function that sends a command string to trigger the "ReassignShaders" action
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.ReloadResources">
            <summary>
            Non-overridable function that sends a command string to trigger the "ReloadResources" action
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.LoadScene(System.String,System.String)">
            <summary>
            Loads a new scene on the remote machine
            </summary>
            <param name="sceneDir">Directory of the scene to launch, on the remote machine</param>
            <param name="sceneName">Name of the scene file to launch on the remote machine</param>
            <returns>true if launching the scene was successful</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.SetEditorMode(CSharpFramework.EditorManager.Mode)">
            <summary>
            Sets the editor mode on the target machibe
            </summary>
            <param name="mode">one of the values of EditorManager.Mode</param>
            <returns>true if the editor mode could be set</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.GetEditorMode">
            <summary>
            Returns the editor mode on the target machibe
            </summary>
            <returns>one of the values of EditorManager.Mode</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.CreateCamera">
            <summary>
            Creates a user-controllable Camera on the remote machine
            </summary>
            <returns>true if the camera entity could be created</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.RestartCurrentScene">
            <summary>
            Restarts the current scene
            </summary>
            <returns>true if the scene could be restarted</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.CanRestart">
            <summary>
            Returns whether the scene can be restarted. This will only return true if 
            a scene has already been loaded.
            </summary>
            <returns>true if restarting the scene (using RestartCurrentScene) is possible.</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.SetCamera(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Sets a new camera position and orientation
            If a user-controllable camera is active on the remote machine,
            its position and orientation can be set using this method
            </summary>
            <param name="pos">position of the camera</param>
            <param name="orientation">orientation of the camera (yaw, pitch, roll)</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.SetSharedDirectory(System.String)">
            <summary>
            Sets the remote common directory (shared directory pointing to base data).
            </summary>
            <param name="commonDir">Common directory as accessible for console client</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.AddSharedDirectory(System.String)">
            <summary>
            Adds a remote common directory (shared directory pointing to base data).
            </summary>
            <param name="commonDir">Common directory as accessible for console client</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.DisposeManager">
            <summary>
            When disposing the object, this method cleans up related native objects
            </summary>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.RegisterMessageCallback">
            <summary>
            Registers a message callback function for asynchronous messages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.FireRemoteMessageSent(System.IntPtr)">
            <summary>
            This method will be called from native code. It handles asynchronously incoming
            messages from the remote machine.
            TODO: See whether it's possible to move this into the ManagedFramework when there's
            some time left.
            </summary>
            <param name="msgStruct">Incoming Message</param>
            <returns>currently always true</returns>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.FirePlatformManagerConnected(System.Boolean)">
            <summary>
            Indicates that the platform manager's connection status has changed.
            </summary>
            <param name="status">true if the new status is "connected"</param>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method 
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="M:CSharpFramework.IPlatformManager.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method.
            Therefore, you should call GC.SupressFinalize to
            take this object off the finalization queue 
            and prevent finalization code for this object
            from executing a second time.
            </summary>
        </member>
        <member name="F:CSharpFramework.IPlatformManager.m_ePlayMode">
            <summary>
            Current Play Mode on the remote machine
            </summary>
        </member>
        <member name="E:CSharpFramework.IPlatformManager.PlatformManagerConnected">
            <summary>
            Event: Platform Manager Connected status change
            </summary>
        </member>
        <member name="E:CSharpFramework.IPlatformManager.PlatformManagerMessageSent">
            <summary>
            Event: Asynchronous remote message has been received.
            </summary>
        </member>
        <member name="P:CSharpFramework.IPlatformManager.PlayMode">
            <summary>
            Current Play Mode Property
            </summary>
        </member>
        <member name="T:CSharpFramework.IPlatformManager.RemoteMessageCallback">
            <summary>
            Public message delegate - specifies a callback type that is used to receive messages
            asynchronously from the remote system.
            </summary>
        </member>
        <member name="T:CSharpFramework.IPlatformManager.PlatformManagerConnectedHandler">
            <summary>
            Delegate for events that are triggered whenever the connection status changes
            </summary>
        </member>
        <member name="T:CSharpFramework.IPlatformManager.PlatformManagerMessageHandler">
            <summary>
            Delegate for events that are triggered whenever an asynchronous message is received
            from the remote system
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Vector2I">
            <summary>
            Vector class for a 2D vector with integer components
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector2I.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector2I.#ctor(CSharpFramework.Math.Vector2I)">
            <summary>
            Constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector2I.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called while de-serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector2I.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector2I.GetHashCode">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2I.ToString">
            <summary>
            Converts this vector to readable string of type (x, y)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2I.Parse(System.String)">
            <summary>
            Tries to parse the string. The string should be compatible to the ToString result.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2I.Equals(System.Object)">
            <summary>
            Indicates whether this vector equals another. Other type must be a vector, too
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Math.Vector2I.X">
            <summary>
            Access the x-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector2I.Y">
            <summary>
            Access the y-coordinate
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Vector3I">
            <summary>
            Vector class for a 2D vector with integer components
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector3I.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector3I.#ctor(CSharpFramework.Math.Vector3I)">
            <summary>
            Constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector3I.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called while de-serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector3I.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector3I.GetHashCode">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3I.ToString">
            <summary>
            Converts this vector to readable string of type (x, y)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3I.Parse(System.String)">
            <summary>
            Tries to parse the string. The string should be compatible to the ToString result.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3I.Equals(System.Object)">
            <summary>
            Indicates whether this vector equals another. Other type must be a vector, too
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Math.Vector3I.X">
            <summary>
            Access the x-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector3I.Y">
            <summary>
            Access the y-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector3I.Z">
            <summary>
            Access the z-coordinate
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Vector4I">
            <summary>
            Vector class for a 2D vector with integer components
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector4I.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector4I.#ctor(CSharpFramework.Math.Vector4I)">
            <summary>
            Constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector4I.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called while de-serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector4I.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector4I.GetHashCode">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4I.ToString">
            <summary>
            Converts this vector to readable string of type (x, y)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4I.Parse(System.String)">
            <summary>
            Tries to parse the string. The string should be compatible to the ToString result.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4I.Equals(System.Object)">
            <summary>
            Indicates whether this vector equals another. Other type must be a vector, too
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Math.Vector4I.X">
            <summary>
            Access the x-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector4I.Y">
            <summary>
            Access the y-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector4I.Z">
            <summary>
            Access the z-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector4I.W">
            <summary>
            Access the w-coordinate
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Vector2IObjectConverter">
            <summary>
            Object converter for vector class
            </summary>
        </member>
        <member name="T:CSharpFramework.UndoRedo.UndoableObjectConverter">
            <summary>
            Extends the ObjectConverter with undo/redo functionality. It uses a wrapper property descriptor
            to hook in the SetValue function.
            
            Triggered actions get collected in the OpenActions property. The PropertyPanel is responsible
            for querying and executing the open actions.
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertySorter">
            <summary>
            Ordering Items in the Property Grid: A simple custom attribute to order properties in the PropertyGrid. 
            Publicly available code taken from http://www.codeproject.com/KB/cs/orderedpropertygrid.aspx
            License: http://www.codeproject.com/info/cpol10.aspx
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertySorter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            [COMMENT]
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertySorter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            [COMMENT]
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertySorter.SortProperties(System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            Sorts a property collection using the PropertyOrder attribute and returns the result
            </summary>
            <param name="propertyToSort">PropertyDescriptorCollection that should be sorted</param>
            <returns>the sorted PropertyDescriptorCollection</returns>
        </member>
        <member name="M:CSharpFramework.UndoRedo.UndoableObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Display an empty string for the property group in the property grid. 
            </summary>
        </member>
        <member name="T:CSharpFramework.UndoRedo.UndoableObjectConverter.ParentContext">
            <summary>
            Container for passing contextual information to the property descriptor
            </summary>
        </member>
        <member name="M:CSharpFramework.UndoRedo.UndoableObjectConverter.ParentContext.#ctor(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="cmpName"></param>
            <param name="cmpType"></param>
            <param name="cmpInstance"></param>
        </member>
        <member name="F:CSharpFramework.UndoRedo.UndoableObjectConverter.ParentContext.Descriptor">
            <summary>
            The property descriptor of the parent property.
            </summary>
        </member>
        <member name="F:CSharpFramework.UndoRedo.UndoableObjectConverter.ParentContext.Instance">
            <summary>
            Instance that is currently being edited. Typically: the shape
            </summary>
        </member>
        <member name="P:CSharpFramework.UndoRedo.UndoableObjectConverter.ParentContext.ComponentName">
            <summary>
            Name of the component that is queried (e.g. "LightColor")
            </summary>
        </member>
        <member name="P:CSharpFramework.UndoRedo.UndoableObjectConverter.ParentContext.ComponentType">
            <summary>
            Name of the component that is queried (e.g. LightColor)
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector2IObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2IObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2IObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2IObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2IObjectConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function - do not support standard values
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Math.Vector3IObjectConverter">
            <summary>
            Object converter for vector class
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector3IObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3IObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3IObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3IObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3IObjectConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function - do not support standard values
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Math.Vector4IObjectConverter">
            <summary>
            Object converter for vector class
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector4IObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4IObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4IObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4IObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4IObjectConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function - do not support standard values
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Help.HelpPage">
            <summary>
            The help page stores the url for the page and the url for
            an error page if applicable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Help.HelpPage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Help.HelpPage.LoadFromFile(System.String)">
            <summary>
            Load a help page from a file
            </summary>
        </member>
        <member name="P:CSharpFramework.Help.HelpPage.ErrorUrl">
            <summary>
            The url for the error page of this  help page
            </summary>
        </member>
        <member name="P:CSharpFramework.Help.HelpPage.Url">
            <summary>
            The url of this help page
            </summary>
        </member>
        <member name="T:CSharpFramework.Helper.ControlHelper">
            <summary>
            Utility class for control (windows.forms) handling
            </summary>
        </member>
        <member name="M:CSharpFramework.Helper.ControlHelper.#ctor">
            <summary>
            class does not need to be instantiated
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.ConsoleOutDlg">
            <summary>
            Form with a console listview.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.ConsoleOutDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ConsoleOutDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ConsoleOutDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ConsoleOutDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ConsoleOutDlg.Console">
            <summary>
            Access the console of this modal dialog
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.SourceCodeEditorControl">
             <summary>
             Custom control for editing source code.
             This control derives from the Scintilla code editor and thus provides common code editing
             features such as syntax highlighting, auto indentation and code folding.
             </summary>
            
        </member>
        <member name="T:CSharpFramework.Docking.DockableForm">
            <summary>
            Form base class which provides docking functionality.
            You must add a reference to the DockPanel assembly when using this class.
            </summary>
        </member>
        <member name="F:CSharpFramework.Docking.DockableForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Docking.DockableForm.#ctor">
            <summary>
            Default Contructor. Only for design mode
            </summary>
        </member>
        <member name="M:CSharpFramework.Docking.DockableForm.#ctor(CSharpFramework.Docking.DockingContainer)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Docking.DockableForm.ShowDockable">
            <summary>
            Show the form as a dockable window
            </summary>
        </member>
        <member name="M:CSharpFramework.Docking.DockableForm.MakeDockable">
            <summary>
            Adds the form as a dockable window while preserving the visible state of that form.
            Use this method if you want to register a panel as a dockable form and want to
            keep the visibility state of that form as is (whereas the ShowDockable method always
            makes the form visible).
            </summary>
        </member>
        <member name="M:CSharpFramework.Docking.DockableForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Docking.DockableForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Docking.DockableForm.AllowClosing">
            <summary>
            
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.SourceCodeEditorControl.#ctor(CSharpFramework.Docking.DockingContainer)">
            <summary>
            Public Constructor of the source code editor
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.SourceCodeEditorControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.SourceCodeEditorControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SourceCodeEditorControl.Control">
            <summary>
            Returns the source control syntax box
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.EngineViewSizeDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.EngineViewSizeDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.EngineViewSizeDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.View.IEditorComponent">
            <summary>
            This is an interface for an editor component. A component is usually a control, that needs special do/undo handling.
            For instance, the layer list view needs different handling for copy+paste than the engine view does. The EditorManager
            has one active component (EngineManager.ActiveComponent) and all CTRL+C/CTRL-X etc. key events are forwarded to the active component.
            This interface mainly has function prototypes for copy and paste operations on the component.
            A common way to set the currently active component is to set it in the OnSetFocus function of the window.
            </summary>
        </member>
        <member name="M:CSharpFramework.View.IEditorComponent.OnCut">
            <summary>
            Performs the Cut operation on this component. Use the Clipboard.
            </summary>
        </member>
        <member name="M:CSharpFramework.View.IEditorComponent.OnCopy">
            <summary>
            Performs the Copy operation on this component. Use the Clipboard.
            </summary>
        </member>
        <member name="M:CSharpFramework.View.IEditorComponent.OnDelete">
            <summary>
            Performs the Delete operation on this component.
            </summary>
        </member>
        <member name="M:CSharpFramework.View.IEditorComponent.OnPaste">
            <summary>
            Performs the Paste operation. Can be forwarded to  EditorManager.Scene.PasteClipboardContent(Clipboard)
            </summary>
        </member>
        <member name="M:CSharpFramework.View.IEditorComponent.HasSelection">
            <summary>
            Checks whether this component has anything to cut or copy. Used to gray out toolbar items.
            </summary>
            <returns>true if it has any selection</returns>
        </member>
        <member name="M:CSharpFramework.View.IEditorComponent.AllowGlobalShortCut(CSharpFramework.ShortCuts.ShortCutAction)">
            <summary>
            This function will be called on the active component if a global shortcut is triggered. Return false to discard a specific ones.
            </summary>
            <param name="shortcut"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.View.IEditorComponent.Clipboard">
            <summary>
            Get the cliboard instance of this component. Usually implemented as return EditorManager.Clipboard to get the global clipboard.
            Get the clipboard instance rather than HasClipboardData to access the name of the object inside (nice menu name)
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ConfigureShapeComponentsPanel.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Processes command keys that are specific for this panel. This is duplicated code from propertypanel.cs
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Dialogs.ConfigureShapeComponentsPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ConfigureShapeComponentsPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ConfigureShapeComponentsPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ConfigureShapeComponentsPanel.AllSelectedComponents">
            <summary>
            Returns a flat array of all components that are currently selected
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ConfigureShapeComponentsPanel.AllSelectedRemovableComponents">
            <summary>
            Similar to AllSelectedComponents but filters out removable components only
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ConfigureShapeComponentsPanel.CurrentComponentSelection">
            <summary>
            Gets or sets the collection of currently selected shapes. The setter updates the Selected flag on each component
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ConfigureShapeComponentsPanel.DescriptionText">
            <summary>
            Gets or sets the description text string
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.ColorPickerDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ColorPickerDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ColorPickerDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.AlignmentToolDlg">
            <summary>
            Dialog for aligning selected objects to another object. The user can 
            specify whether he wants to align the position, orientation and scaling 
            of the shape. 
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.AlignmentToolDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.AlignmentToolDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.AlignmentToolDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.AlignmentToolDlg.UpdateAlignment(System.Boolean)">
            <summary>
            Aligns the transform of the selected shape(s) to another shape or 
            sets the original transform.
            </summary>
            <param name="update"> If TRUE the transform will be updated, otherwise old transforms will be set.</param>
        </member>
        <member name="P:CSharpFramework.Dialogs.AlignmentToolDlg.ShapeAlignTo">
            <summary>
            The single shape that the selected objects should be aligned to.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.AlignmentToolDlg.ShapesToBeAligned">
            <summary>
            Shape(s) that should be aligned to another shape.
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.AddComponentFailureReportDlg">
            <summary>
            Dialog for displaying an failure report in case one or more components could not
            be added to a shape.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.AddComponentFailureReportDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.AddComponentFailureReportDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.AddComponentFailureReportDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.AddComponentFailureReportDlg.FailureItem">
            <summary>
            Representation of one item on the List box
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.LayerTreeView">
            <summary>
            Tree view to show layer graph
            </summary>
        </member>
        <member name="T:CSharpFramework.TreeViewMS">
            <summary>
            C# TreeView with multiple selection: Enable multiple selection in .NET treeview controls 
            Publicly available code taken from http://www.codeproject.com/cs/miscctrl/treeviewms.asp
            License: http://www.codeproject.com/info/cpol10.aspx
            </summary>
        </member>
        <member name="F:CSharpFramework.TreeViewMS.m_coll">
            <summary>
            Internal: list of selected tree nodes
            </summary>
        </member>
        <member name="F:CSharpFramework.TreeViewMS.m_lastNode">
            <summary>
            Internal variables
            </summary>
        </member>
        <member name="F:CSharpFramework.TreeViewMS.m_firstNode">
            <summary>
            Internal variables
            </summary>
        </member>
        <member name="F:CSharpFramework.TreeViewMS.m_bTreePaintLock">
            <summary>
            Lock repainting of the selected tree nodes when setting SelectedNodes
            </summary>
        </member>
        <member name="F:CSharpFramework.TreeViewMS._contextMenuOpeningInProgress">
            <summary>
            Indicates whether the control is currently in the progress of opening a context menu.
            </summary>
        </member>
        <member name="F:CSharpFramework.TreeViewMS._cancelNextRename">
            <summary>
            Helper variable that determines if tree view was unfocused in between mouse clicks on
            the widget. See OnClick.
            </summary>
        </member>
        <member name="M:CSharpFramework.TreeViewMS.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.TreeViewMS.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint Handler
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:CSharpFramework.TreeViewMS.TreeViewMS_NodeMouseClick(System.Object,System.Windows.Forms.TreeNodeMouseClickEventArgs)">
            <summary>
            Event handler for fixing the right click selection behaviour
            
            C# does by default not select an item when right clicking on it. This results in the context
            menu being opened for the currently selected item instead of the one the user clicked on.
            This event handler overrides the context menu behaviour by first selecting the clicked node
            before opening the context menu.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.TreeViewMS.OnEnter(System.EventArgs)">
            <summary>
            Event handler for fixing the rename behavior when focusing the view by
            clicking on the currently selected item.
            In this case a rename should not be triggered.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.TreeViewMS.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)">
            <summary>
            Event handler for fixing the rename behavior. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.TreeViewMS.OnBeforeSelect(System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            Overridden TreeView method for adding multiselection support
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.TreeViewMS.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Overridden TreeView method for adding multiselection support
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.TreeViewMS.isParent(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode)">
            <summary>
            Helper Function for checking parent-relationship
            </summary>
            <param name="parentNode"></param>
            <param name="childNode"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.TreeViewMS.paintSelectedNodes">
            <summary>
            Sets the selection colors for selected nodes
            </summary>
        </member>
        <member name="M:CSharpFramework.TreeViewMS.removePaintFromNodes">
            <summary>
            Restore the original colors for the currently selected nodes
            </summary>
        </member>
        <member name="M:CSharpFramework.TreeViewMS.removePaintFromNodes(System.Collections.ArrayList)">
            <summary>
            Restore the original colors for a given list of nodes
            </summary>
        </member>
        <member name="M:CSharpFramework.TreeViewMS.OnNodeStateChanged(System.Windows.Forms.TreeNode,CSharpFramework.TreeViewMS.NodeStateChangedArgs.Reasons)">
            <summary>
            Invokes a NodeStateChanged event
            </summary>
            <param name="node"></param>
            <param name="reason"></param>
        </member>
        <member name="P:CSharpFramework.TreeViewMS.SelectedNodes">
            <summary>
            Sets or gets the currently selected tree nodes
            </summary>
        </member>
        <member name="P:CSharpFramework.TreeViewMS.AllowMultiSelect">
            <summary>
            Determinates if multi select is allowed or not.
            </summary>
        </member>
        <member name="P:CSharpFramework.TreeViewMS.ContextMenuOpeningInProgress">
            <summary>
            Indicates that the control is preparing data for opening the context menu.
            Used to identify whether a selection modifications is based on a context menu preparation.
            </summary>
        </member>
        <member name="E:CSharpFramework.TreeViewMS.NodeStateChanged">
            <summary>
            NodeStateChanged Event.
            Gets triggered when the selection of a treenode changed and the colors of the node
            were modified.
            </summary>
        </member>
        <member name="T:CSharpFramework.TreeViewMS.NodeStateChangedArgs">
            <summary>
            NodeStateChanged Event Arguments
            </summary>
        </member>
        <member name="M:CSharpFramework.TreeViewMS.NodeStateChangedArgs.#ctor(System.Windows.Forms.TreeNode,CSharpFramework.TreeViewMS.NodeStateChangedArgs.Reasons)">
            <summary>
            Constructor
            </summary>
            <param name="node"></param>
            <param name="reason"></param>
        </member>
        <member name="F:CSharpFramework.TreeViewMS.NodeStateChangedArgs.NewNode">
            <summary>
            Node created in shape tree
            </summary>
        </member>
        <member name="F:CSharpFramework.TreeViewMS.NodeStateChangedArgs.Reason">
            <summary>
            Reason for the state change
            </summary>
        </member>
        <member name="T:CSharpFramework.TreeViewMS.NodeStateChangedArgs.Reasons">
            <summary>
            Node State Reasons
            </summary>
        </member>
        <member name="F:CSharpFramework.TreeViewMS.NodeStateChangedArgs.Reasons.NodeSelected">
            <summary>
            Node got selected
            </summary>
        </member>
        <member name="F:CSharpFramework.TreeViewMS.NodeStateChangedArgs.Reasons.NodeUnSelected">
            <summary>
            Node got unselected
            </summary>
        </member>
        <member name="F:CSharpFramework.TreeViewMS.NodeStateChangedArgs.Reasons.NodeCreated">
            <summary>
            Node got created
            </summary>
        </member>
        <member name="T:CSharpFramework.TreeViewMS.NodeStateChangedEventHandlers">
            <summary>
            NodeStateChanged Delegate
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnClick(System.EventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnEnter(System.EventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView._lastCheck">
            <summary>
            Contains the date/time when the last AfterCheck event was triggered
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden function
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.EditorManager_SceneChanged(System.Object,CSharpFramework.SceneChangedArgs)">
            <summary>
            Listens to scene changes, i.e. rebuild the list view
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.IScene_LayerChanged(System.Object,CSharpFramework.LayerChangedArgs)">
            <summary>
            Listens to changes in layer list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.Selection_ZonesOnly">
            <summary>
            Indicates whether selection holds only zones (more than 0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.Selection_LayersOnly">
            <summary>
            Indicates whether selection holds only layers (more than 0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.Selection_AllLayersRemovable">
            <summary>
            Indicates whether all selected layers are removable
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.Selection_AllLayersEditable">
            <summary>
            Indicates whether all selected layers are editable
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.Selection_AnyLayerNotLocked">
            <summary>
            Indicates whether any selected layer is not locked
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.Selection_AnyLayerDirty">
            <summary>
            Indicates whether any selected layer is modified
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.Selection_AllZonesModifiable">
            <summary>
            Indicates whether all selected zones are modifiable
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.Selection_AllZonesLoaded">
            <summary>
            Indicates whether all selected zones are loaded
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.Selection_SingleLayer">
            <summary>
            Indicates whether selection consists of a single layer
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.Selection_SingleZone">
            <summary>
            Indicates whether selection consists of a single zone
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.Selection_AnyLayerHasFrozenShapes">
            <summary>
            Indicates whether selection consists any layer with any frozen shape
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.Selection_Zones">
            <summary>
            Collection of selected zones
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.Selection_Layers">
            <summary>
            Collection of selected layers
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.UpdateSelectionStatus">
            <summary>
            Called to refresh selection flags and collections
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.ApplyLayerSelectionFromApp(CSharpFramework.Layer)">
            <summary>
            Selected the passed scene layer in the layer tree view
            </summary>
            <param name="newSelectedLayer">scene layer to select</param>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.ContextMenu_Layers">
            <summary>
            Layer related context menu
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView.ContextMenu_Zones">
            <summary>
            Zone related context menu
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.LayerTreeView._bSelectionInProgress">
            <summary>
            Internal flag
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.BeginRenameLayer(CSharpFramework.Layer)">
            <summary>
            wrapper for node.BeginEdit();
            </summary>
            <param name="l"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.BeginRenameZone(CSharpFramework.Scene.Zone)">
            <summary>
            wrapper for node.BeginEdit();
            </summary>
            <param name="z"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnAfterLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnAfterExpand(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnCut">
            <summary>
            Performs cut operation on currently selected item (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnCopy">
            <summary>
            Performs copy operation on currently selected item (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnPaste">
            <summary>
            Performs paste operation on currently selected item (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.OnDelete">
            <summary>
            Performs delete operation on currently selected item (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.LayerTreeView.HasSelection">
            <summary>
            Checks if a layer is selected to cut or copy (overridden IEditorComponent function)
            </summary>
            <returns>true, if a layer is selected</returns>
        </member>
        <member name="P:CSharpFramework.Controls.LayerTreeView.BuildLockCtr">
            <summary>
            Internal lock function. Must be private, since otherwise the designer in VS2010 crashes after 
            setting this property. The reason for this is the implicit call of BuildTree which 
            calls some static function/member in Editormanager [#4703]
            </summary>
        </member>
        <member name="E:CSharpFramework.Controls.LayerTreeView.OnSelectionChanged">
            <summary>
            Event that is triggered when the selection changed
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.LayerTreeView.SelectedLayer">
            <summary>
            Returns the selected layer if only one layer is selected
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.LayerTreeView.Clipboard">
            <summary>
            returns clipboard instance to use for cut/copy/paste operations (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="T:CSharpFramework.BaseTypes.SymbolType">
            <summary>
            Type of a symbol in a script
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.SymbolType.KEYWORD">
            <summary>
            keyword symbol
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.SymbolType.CLASS">
            <summary>
            class symbol
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.SymbolType.FUNCTION">
            <summary>
            function symbol
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.SymbolType.VARIABLE">
            <summary>
            variable symbol
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.SymbolType.ENUM">
            <summary>
            enum symbol
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.SymbolType.CONSTANT">
            <summary>
            constant symbol
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.SymbolType.DATATYPE">
            <summary>
            data type symbol
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.SymbolType.INTERFACE">
            <summary>
            interface symbol
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.SymbolType.EVENT">
            <summary>
            event symbol
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.SymbolType.SEMANTIC">
            <summary>
            semantic symbol
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.SymbolType.DIRECTIVE">
            <summary>
            directive symbol
            </summary>
        </member>
        <member name="T:CSharpFramework.BaseTypes.SymbolInfo">
            <summary>
            Info block of a single script symbol
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.SymbolInfo.#ctor(System.String,CSharpFramework.BaseTypes.SymbolType)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:CSharpFramework.BaseTypes.SymbolInfo.#ctor(System.String,CSharpFramework.BaseTypes.SymbolType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="stringRepresentation"></param>
        </member>
        <member name="M:CSharpFramework.BaseTypes.SymbolInfo.Equals(System.Object)">
            <summary>
            overridden function
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.SymbolInfo.GetHashCode">
            <summary>
            overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.BaseTypes.SymbolInfo._name">
            <summary>
            name of the symbol
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.SymbolInfo._type">
            <summary>
            symbol type
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.SymbolInfo._stringRepresentation">
            <summary>
            string representation of the symbol
            </summary>
        </member>
        <member name="T:CSharpFramework.BaseTypes.SymbolCollection">
            <summary>
            Collection class for symbols
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.SymbolCollection.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.SymbolCollection.Add(CSharpFramework.BaseTypes.SymbolInfo)">
            <summary>
            Collection function
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.SymbolCollection.Insert(System.Int32,CSharpFramework.BaseTypes.SymbolInfo)">
            <summary>
            Collection function
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:CSharpFramework.BaseTypes.SymbolCollection.Remove(CSharpFramework.BaseTypes.SymbolInfo)">
            <summary>
            Collection function
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:CSharpFramework.BaseTypes.SymbolCollection.GetAt(System.Int32)">
            <summary>
            Collection function
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.SymbolCollection.Contains(CSharpFramework.BaseTypes.SymbolInfo)">
            <summary>
            Collection function
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.SymbolCollection.IndexOf(CSharpFramework.BaseTypes.SymbolInfo)">
            <summary>
            Collection function
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.SymbolCollection.CopyTo(CSharpFramework.BaseTypes.SymbolInfo[],System.Int32)">
            <summary>
            Collection function
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:CSharpFramework.BaseTypes.SymbolCollection.Item(System.Int32)">
            <summary>
            Collection function
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.AssignMaterialShaderAction">
            <summary>
            This action replaces the shader assignment of a Material. The material instance is responsible for listeing to the changes and
            assign a new shader in the core engine.
            </summary>
        </member>
        <member name="T:CSharpFramework.IAction">
            <summary>
            This class forms the basis of the undo/redo system. Any user defined action has to consistently implement
            the Do and Undo action (result after Do/Undo must exactly match previous state)
            IMPORTANT: Any action implamentation that in any respect modifies a ISceneObject (e.g. layer or ShapeBase)
            has to set the ISceneObject.Modified flag both in the Do and the Undo function. Furthermore, the Valid indicator
            has to check the ISceneObject.Modifiable flag of all affected objects. Otherwise the user might be able to
            modify layers that are not locked.
            </summary>
        </member>
        <member name="M:CSharpFramework.IAction.Do">
            <summary>
            Called for doing or redoing the action
            </summary>
        </member>
        <member name="M:CSharpFramework.IAction.Undo">
            <summary>
            Called for undoing the action
            </summary>
        </member>
        <member name="M:CSharpFramework.IAction.OnDispose">
            <summary>
            Called when removed from stack. Actions that work on native code can do some de-initialisation here.
            </summary>
        </member>
        <member name="P:CSharpFramework.IAction.ShortName">
            <summary>
            Short name of the action, for instance to show up in the menu, e.g. "move shape"
            </summary>
        </member>
        <member name="P:CSharpFramework.IAction.LongName">
            <summary>
            Long name of the action, to show in the action history. Should be a bit more descriptive than the short name, e.g. "move shape light3"
            </summary>
        </member>
        <member name="P:CSharpFramework.IAction.IconIndex">
            <summary>
            Return the icon index for the history view. Get an icon index via EditorManager.GUI.ActionImages.AddBitmap("filename.bmp") and store it in a static integer
            </summary>
        </member>
        <member name="P:CSharpFramework.IAction.Valid">
            <summary>
            Before an action is added to the stack (and the Do action is performed), the stack calls this function
            to see if the action is actually valid and should go on the stack. This should not be used and left to default "true".
            </summary>
        </member>
        <member name="P:CSharpFramework.IAction.ParentStack">
            <summary>
            This member points to the stack that this action is attached to
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.AssignMaterialShaderAction.#ctor(CSharpFramework.Scene.Material,CSharpFramework.Scene.ShaderEffectConfig)">
            <summary>
            Constructor
            </summary>
            <param name="material"></param>
            <param name="newConfig"></param>
        </member>
        <member name="M:CSharpFramework.Actions.AssignMaterialShaderAction.Do">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.AssignMaterialShaderAction.Undo">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AssignMaterialShaderAction.LongName">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AssignMaterialShaderAction.ShortName">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.AddLayerAction">
            <summary>
            Action that adds a new layer
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.AddLayerAction.#ctor(CSharpFramework.Layer)">
            <summary>
            Action constructor. Takes the layer to be added to the scene
            </summary>
            <param name="layer">The layer to add</param>
        </member>
        <member name="M:CSharpFramework.Actions.AddLayerAction.#ctor(CSharpFramework.Layer,System.Boolean)">
            <summary>
            Action constructor. Takes the layer to be added to the scene
            </summary>
            <param name="layer"></param>
            <param name="makeFilenameUnique"></param>
        </member>
        <member name="M:CSharpFramework.Actions.AddLayerAction.Do">
            <summary>
            Overridden Do function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.AddLayerAction.Undo">
            <summary>
            Overridden Undo function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AddLayerAction.ShortName">
            <summary>
            Overridden Short name
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AddLayerAction.LongName">
            <summary>
            Overridden Long name
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AddLayerAction.IconIndex">
            <summary>
            Get the layer icon that is also used in the layer list view
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.RemoveLayerAction">
            <summary>
            Action that removes a layer
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.RemoveLayerAction.#ctor(CSharpFramework.Layer)">
            <summary>
            Constructor that takes the layer to remove from scene
            </summary>
            <param name="layer">The layer to be removed</param>
        </member>
        <member name="M:CSharpFramework.Actions.RemoveLayerAction.Do">
            <summary>
            Overridden Do function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.RemoveLayerAction.Undo">
            <summary>
            Overridden Undo function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RemoveLayerAction.Valid">
            <summary>
            Overridden Valid function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RemoveLayerAction.ShortName">
            <summary>
            Overridden short name
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RemoveLayerAction.LongName">
            <summary>
            Overridden long name
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RemoveLayerAction.IconIndex">
            <summary>
            Get the layer icon that is also used in the layer list view
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.MoveLayerAction">
            <summary>
            Action that moves a layer in the collection
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.MoveLayerAction.#ctor(CSharpFramework.Layer,CSharpFramework.Actions.MoveLayerAction.MoveDir)">
            <summary>
            Constructor that takes the layer to move
            </summary>
            <param name="layer">The layer to be move</param>
            <param name="movementDir">Movement direction (up, down)</param>
        </member>
        <member name="M:CSharpFramework.Actions.MoveLayerAction.Do">
            <summary>
            Overridden Do function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.MoveLayerAction.Undo">
            <summary>
            Overridden Undo function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.MoveLayerAction.ShortName">
            <summary>
            Overridden short name
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.MoveLayerAction.LongName">
            <summary>
            Overridden long name
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.MoveLayerAction.MoveDir">
            <summary>
            Enumeration of available layer movement directions
            </summary>
        </member>
        <member name="F:CSharpFramework.Actions.MoveLayerAction.MoveDir.Up">
            <summary>
            Upwards
            </summary>
        </member>
        <member name="F:CSharpFramework.Actions.MoveLayerAction.MoveDir.Down">
            <summary>
            Downwards
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.ChangeLayerOrderAction">
            <summary>
            Action that can swizzle the order of layers in the view
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.ChangeLayerOrderAction.#ctor(CSharpFramework.LayerCollection,System.Collections.ArrayList,System.Collections.ArrayList,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="target">target layer collection, e.g. Scene.Layers</param>
            <param name="oldOrder">Layer array that holds the old order (element count must be target.Count)</param>
            <param name="newOrder">Layer array that holds the new order (element count must be target.Count)</param>
            <param name="msg">action message to display</param>
        </member>
        <member name="M:CSharpFramework.Actions.ChangeLayerOrderAction.Do">
            <summary>
            Overridden Do function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.ChangeLayerOrderAction.Undo">
            <summary>
            Overridden Undo function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.ChangeLayerOrderAction.SortAlphabetically(CSharpFramework.LayerCollection,System.Windows.Forms.SortOrder)">
            <summary>
            Static helper that triggers an action to sort layers
            </summary>
            <param name="target"></param>
            <param name="order"></param>
        </member>
        <member name="P:CSharpFramework.Actions.ChangeLayerOrderAction.ShortName">
            <summary>
            Overridden short name
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.ChangeZoneOrderAction">
            <summary>
            Action that can swizzle the order of layers in the view
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.ChangeZoneOrderAction.#ctor(CSharpFramework.Scene.ZoneCollection,System.Collections.ArrayList,System.Collections.ArrayList,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="target">target layer collection, e.g. Scene.Layers</param>
            <param name="oldOrder">Layer array that holds the old order (element count must be target.Count)</param>
            <param name="newOrder">Layer array that holds the new order (element count must be target.Count)</param>
            <param name="msg">action message to display</param>
        </member>
        <member name="M:CSharpFramework.Actions.ChangeZoneOrderAction.Do">
            <summary>
            Overridden Do function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.ChangeZoneOrderAction.Undo">
            <summary>
            Overridden Undo function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.ChangeZoneOrderAction.SortAlphabetically(CSharpFramework.Scene.ZoneCollection,System.Windows.Forms.SortOrder)">
            <summary>
            Static helper that triggers an action to sort zones
            </summary>
            <param name="target"></param>
            <param name="order"></param>
        </member>
        <member name="P:CSharpFramework.Actions.ChangeZoneOrderAction.ShortName">
            <summary>
            Overridden short name
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.UpdateLayerAction">
            <summary>
            Action that replaces a layer in the collection
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.UpdateLayerAction.#ctor(CSharpFramework.Layer,CSharpFramework.Layer)">
            <summary>
            Constructor that takes old and new layer
            </summary>
            <param name="oldlayer"></param>
            <param name="newlayer"></param>
        </member>
        <member name="M:CSharpFramework.Actions.UpdateLayerAction.Do">
            <summary>
            Overridden Do function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.UpdateLayerAction.Undo">
            <summary>
            Overridden Undo function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.UpdateLayerAction.ShortName">
            <summary>
            Overridden short name
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.UpdateLayerAction.LongName">
            <summary>
            Overridden long name
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.UpdateLayerAction.IconIndex">
            <summary>
            Get the layer icon that is also used in the layer list view
            </summary>
        </member>
        <member name="T:CSharpFramework.VisionViewBase">
            <summary>
            Base class for an engine view control
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden windows function
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.ProcessCmdKeyX(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Allows for calling protected ProcessCmdKey function on this window to forward important keys such as CTRL-C, CTRL-Z etc.
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="F:CSharpFramework.VisionViewBase.FrameCounter">
            <summary>
            This public int gets incremented every rendering frame. It can be used to compare against to prevent
            shapes to be rendered twice a frame
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.UpdateView(System.Boolean)">
            <summary>
            Abstract function to update the view
            </summary>
            <param name="bImmediate">Immediate update vs. timer based update</param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.UInt32,System.Single)">
            <summary>
            Helper function to render a line. Forwards the call to the engine manager
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderLine(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,System.UInt32,System.Single)">
            <summary>
            Helper function to render a line. Forwards the call to the engine manager
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderCross(CSharpFramework.Math.Vector3F,System.Single,System.UInt32,System.Single)">
            <summary>
            Helper function to render a 3D cross at specified center
            </summary>
            <param name="center"></param>
            <param name="fRadius"></param>
            <param name="iColorRef"></param>
            <param name="fStrength"></param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderLine2D(System.Single,System.Single,System.Single,System.Single,System.UInt32,System.Single)">
            <summary>
            Helper function to render a 2D line. Forwards the call to the engine manager
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderRectangle2D(System.Single,System.Single,System.Single,System.Single,System.UInt32,System.Single)">
            <summary>
            Renders a screen rectangle with lines. Uses the engine manager's RenderLine2D functions
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="iColorRef"></param>
            <param name="fStrength"></param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.WriteText2D(System.Single,System.Single,System.String,System.UInt32)">
            <summary>
            Helper function to output text. Forwards the call to the engine manager
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.WriteText3D(System.Single,System.Single,System.Single,System.String,System.UInt32)">
            <summary>
            Helper function to output text. Forwards the call to the engine manager
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.WriteText3D(CSharpFramework.Math.Vector3F,System.String,System.UInt32)">
            <summary>
            Helper function to output text. Forwards the call to the engine manager
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderSolidTriangle(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,System.UInt32)">
            <summary>
            Renders a solid, alphablended triangle (uses RGB and A)
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderLineBox(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.UInt32,System.Single)">
            <summary>
            Helper function to render a line box. Uses line functions from the engine manager
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderLineBox(CSharpFramework.Math.BoundingBox,System.Single,System.Single,System.Single,System.UInt32,System.Single)">
            <summary>
            Helper function to render a line box. Uses line functions from the engine manager
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderOrientedLineBox(CSharpFramework.Math.BoundingBox,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Matrix3F,System.UInt32,System.Single)">
            <summary>
            Helper function to render a line oriented box. Uses line functions from the engine manager
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderPlane(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,System.Single,System.Single,System.UInt32,System.Int32)">
            <summary>
            Helper function to render a plane.
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderSolidBox(CSharpFramework.Math.BoundingBox,System.UInt32)">
            <summary>
            Helper function to render a solid box.
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderOrientedSolidBox(CSharpFramework.Math.BoundingBox,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Matrix3F,System.UInt32)">
            <summary>
            Helper function to render a solid oriented box.
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderLineFrustum(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Matrix3F,System.Single,System.Single,System.Single,System.UInt32,System.Single)">
            <summary>
            Helper function to render a frustum. Uses line functions from the engine manager
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderArrow(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,System.UInt32,System.Single,System.Single)">
            <summary>
            Helper function to render an arrow. Uses line functions from the engine manager
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RenderArrow(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.UInt32,System.Single,System.Single)">
            <summary>
            Helper function to render an arrow. Uses line functions from the engine manager
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.DrawMarquee(CSharpFramework.Math.Rectangle2D)">
            <summary>
            Helper function to render a 2D rectangular marquee. Uses line functions from the engine manager
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.GetShapesInsideMarquee(CSharpFramework.Math.Rectangle2D,CSharpFramework.ShapeCollection@,CSharpFramework.ShapeCollection,System.Boolean)">
            <summary>
            Fills in a collection with all shapes that are inside a screen marquee
            </summary>
            <param name="marquee">A 2D screen rectangle</param>
            <param name="destCollection">The collection that will receive the shapes</param>
            <param name="shapes">The source collection to test</param>
            <param name="bIncludeChildren">Flag that determines whether children of the shapes should be tested</param>
            <returns>the number of shapes found</returns>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.SetCameraPosition(CSharpFramework.Math.Vector3F)">
            <summary>
            Set the camera position
            </summary>
            <param name="newPos">New position in world space</param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.SetCameraRotation(CSharpFramework.Math.Vector3F)">
            <summary>
            Set camera orientation
            </summary>
            <param name="newEuler">Euler angle orientation</param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.MoveCamera(System.Single)">
            <summary>
            Move camera forward
            </summary>
            <param name="fSteps">Number of steps</param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.MoveCamera_Up(System.Single)">
            <summary>
            Move camera up
            </summary>
            <param name="fSteps">Number of steps</param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.MoveCamera_UpWorldSpace(System.Single)">
            <summary>
            Move camera up in world space coordinates
            </summary>
            <param name="fSteps">Number of steps</param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.MoveCamera_Right(System.Single)">
            <summary>
            Move camera to the right
            </summary>
            <param name="fSteps">Number of steps</param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OrbitCamera_Center(CSharpFramework.Math.Vector3F,System.Single,System.Single)">
            <summary>
            Move the camera in an orbit around the center
            </summary>
            <remarks>The center will move to the center of the screen</remarks>
            <param name="center">The center of the orbit </param>
            <param name="fStepsRight">Number if steps to the right</param>
            <param name="fStepsUp">Number if steps up</param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OrbitCamera_Right(CSharpFramework.Math.Vector3F,System.Single)">
            <summary>
            Move the camera to the right on an orbit around the center
            </summary>
            <remarks>The center will stay at its position on the screen</remarks>
            <param name="center">The center of the orbit </param>
            <param name="fStepsRight">Number if steps to the right</param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OrbitCamera_Up(CSharpFramework.Math.Vector3F,System.Single)">
            <summary>
            Move the camera up on an orbit around the center
            </summary>
            <remarks>The center will stay at its position on the screen</remarks>
            <param name="center">The center of the orbit </param>
            <param name="fStepsUp">Number if steps up</param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RotateCamera(System.Single,System.Single,System.Single)">
            <summary>
            Rotate camera by euler deltas
            </summary>
            <param name="fYawDelta">yaw delta</param>
            <param name="fPitchDelta">pitch delta</param>
            <param name="fRollDelta">roll delta</param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.IncrementPreviewDistance(System.Single)">
            <summary>
            Increment preview view distance by given delta
            </summary>
            <param name="fMouseDelta">mouse delta</param>
        </member>
        <member name="F:CSharpFramework.VisionViewBase.DefaultViewSettings">
            <summary>
            This member holds the default view settings set by the main layer.
            </summary>
        </member>
        <member name="F:CSharpFramework.VisionViewBase.CurrentViewSettings">
            <summary>
            This member holds the current settings that might temporarily differ from the default settings (DefaultViewSettings)
            </summary>
        </member>
        <member name="F:CSharpFramework.VisionViewBase._eProjectionMode">
            <summary>
            Internal value
            </summary>
        </member>
        <member name="F:CSharpFramework.VisionViewBase._fOrthographicScale">
            <summary>
            Internal value
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.SetViewSettings(CSharpFramework.View.ViewSettings,System.Boolean)">
            <summary>
            Updates the view with the new settings. Stores the new settings in CurrentViewSettings and optionally in DefaultViewSettings
            </summary>
            <param name="settings">settings to set. Can be null to use DefaultViewSettings</param>
            <param name="bAsDefault">if true, a copy of the settings will be assigned to DefaultViewSettings</param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.Project2D(CSharpFramework.Math.Vector3F,System.Single@,System.Single@,System.Single@)">
            <summary>
            Project the 3d position on view plane
            </summary>
            <param name="pos"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.LookAt(CSharpFramework.Math.Vector3F,CSharpFramework.Math.BoundingBox)">
            <summary>
            Centers the camera to look at the passed bounding box (choose distance so that bounding box fits)
            </summary>
            <param name="position">position to look at</param>
            <param name="bbox">bounding box that should approx. fill screen</param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.SetDefaultContext">
            <summary>
            Switches back to CameraMoveContext
            </summary>
        </member>
        <member name="F:CSharpFramework.VisionViewBase.DEFAULT_CONTEXT">
            <summary>
            Public static instance of the camera move context
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OnEngineInitStatusChanged(System.Boolean)">
            <summary>
            Called by the engine manager when its init status changed
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.VisionViewBase_Enter(System.Object,System.EventArgs)">
            <summary>
            The view enters the focus
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.VisionViewBase_Leave(System.Object,System.EventArgs)">
            <summary>
            The view looses the control focus
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.VisionViewBase_LostFocus(System.Object,System.EventArgs)">
            <summary>
            Handle the lost focus event. The Leave event doesn't seem to be called
            when the control looses focus due to a new panel getting opened 
            (e.g. search panel)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.HandleLostFocus">
            <summary>
            Resets the keyboard modifier state and notifies the current context about it.
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.NotifyModifierKeyChanges(CSharpFramework.Contexts.KeyModifier)">
            <summary>
            Sends an OnKeyModifierChanged notification in case the modifier keys
            changed since they have been queried last time.
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OnSceneChanged(System.Object,CSharpFramework.SceneChangedArgs)">
            <summary>
            listen to scene changes -> update view;
            This function is registered by the engine panel
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OnShapeChanged(System.Object,CSharpFramework.Shapes.ShapeChangedArgs)">
            <summary>
            listen to shape changes -> update view;
            This function is registered by the engine panel
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OnLayerChanged(System.Object,CSharpFramework.LayerChangedArgs)">
            <summary>
            listen to layer changes -> update view;
            This function is registered by the engine panel
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OnPropertyChanged(System.Object,CSharpFramework.PropertyChangedArgs)">
            <summary>
            listen to shape property changes -> update view;
            This function is registered by the engine panel
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OnContextChanged(CSharpFramework.Contexts.ContextChangedArgs)">
            <summary>
            Invoke delegate;
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.EditorManager_EditorModeChanged(System.Object,CSharpFramework.EditorModeChangedArgs)">
            <summary>
            listen to editor mode changes -> update view
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.UpdateViewRelatedParams">
            <summary>
            Overridable that is called for everything that potentially affects the view scaling
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OnGizmoChanged(System.Object,CSharpFramework.GizmoChangedArgs)">
            <summary>
            listen to gizmo changes -> update view
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.AddVisibleLinkPair(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Adds a single pair to the collection. The collection gets reset every frame
            </summary>
            <param name="s"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.RemoveAllVisibleLinkPairs">
            <summary>
            Restes the collection. Called every frame and when deinitializing
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OnCut">
            <summary>
            Perfors cut operation on view: Uses the selection of the Gizmo
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OnCopy">
            <summary>
            Perfors copy operation on view: Uses the selection of the Gizmo
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OnDelete">
            <summary>
            Performs delete operation on view: Uses the selection of the Gizmo
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.OnPaste">
            <summary>
            Pastes clipboard content to scene
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.HasSelection">
            <summary>
            Checks if gizmo selection is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.DropObject(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Performs the actual drop event for passed objects. Known object types are shapes, shape collections, prefabs or creator plugins.
            If the passed object is a shape, it performs a clone of it and triggers an AddShapeAction action.
            </summary>
            <param name="creator">Object to drop into the scene (e.g. a shape)</param>
            <param name="e">Used to retrieve the mouse coordinates for the intersection ray</param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.VisionViewBase._isolatedShapes">
            <summary>
            Shapes collection of isolated shapes stored temporarily
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionViewBase.IsolateSelection(System.Boolean,System.Boolean)">
            <summary>
            Activates or Deactivates the isolate selection view.
            </summary>
            <param name="bEnable">TRUE enables the isolate selection view, FALSE disables it</param>
            <param name="bExport">When TRUE the isolate selection view is restored after export</param>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.ContextMenu_SelShapes">
            <summary>
            Returns a menu instance for selected shapes
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.ContextMenu_View">
            <summary>
            Returns a context menu for the view
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.CameraPosition">
            <summary>
            Get current camera position
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.CameraAngles">
            <summary>
            Get current yaw/pitch/roll camera rotation angles
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.CameraDirection">
            <summary>
            Get current camera direction (normalized). The set function creates a look-at direction
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.CameraRight">
            <summary>
            Get current camera right vector (normalized)
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.CameraUp">
            <summary>
            Get current camera up vector (normalized)
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.WorldTransform">
            <summary>
            Get current world transform
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.NearClipPlane">
            <summary>
            Gets or sets the near clip plane for perspecitive views
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.FarClipPlane">
            <summary>
            Gets or sets the far clip plane for perspecitive views
            </summary>
        </member>
        <member name="E:CSharpFramework.VisionViewBase.ProjectionModeChanged">
            <summary>
            Triggers an event when the ProjectionMode of a view changed. The sender is the VisionViewBase instance
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.ProjectionMode">
            <summary>
            Gets or sets the projection mode of this view. When changed, it triggers the ProjectionModeChanged event
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.IsPerspective">
            <summary>
            Indicates whether ProjectionMode is ProjectionMode_e.Perspective
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.OrthographicScale">
            <summary>
            Gets or sets the scaling for orthographic views. A scale of 1.0 (default) uses actual view port size
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.CurrentContext">
            <summary>
            Gets or sets the current context for mouse control
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.PickHandler">
            <summary>
            Gets and sets the active pick handler on the engine view.
            If a pick handler is installed the engine forwards the next mouse click
            to the pick handler instead of the current context. The pick handler
            remains active for one pick only.
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.EngineManager">
            <summary>
            Gets or sets the current engine manager
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.Dirty">
            <summary>
            Checks whether the view is "dirty", i.e. if it has to be repainted in the next timer call
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.MouseX">
            <summary>
            Returns the current mouse x-position in the view
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.MouseY">
            <summary>
            Returns the current mouse y-position in the view
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.CurrentModKeys">
            <summary>
            Gets current state of the modifier keys from operating system
            </summary>
        </member>
        <member name="E:CSharpFramework.VisionViewBase.MouseContextChanged">
            <summary>
            event
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.Gizmo">
            <summary>
            Get or set the Gizmo instance
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.HotSpots">
            <summary>
            get the collection of active hotspots
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.VisibleLinkPairs">
            <summary>
            get the collection of visible link pairs, each entry of type LinkSourceTargetPairHotspot
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.ShowGrid">
            <summary>
            Show grid flag (get/set)
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.Clipboard">
            <summary>
            Return global clipboard instance
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionViewBase.ToolTipText">
            <summary>
            Set tooltip text for the view window
            </summary>
        </member>
        <member name="E:CSharpFramework.VisionViewBase.DropObjectCreator">
            <summary>
            Register to this callback to hook into the drag and drop of creators into the main view. See DropObjectCreatorDelegate
            </summary>
        </member>
        <member name="T:CSharpFramework.VisionViewBase.ProjectionMode_e">
            <summary>
            Enum that determines the projection mode
            </summary>
        </member>
        <member name="F:CSharpFramework.VisionViewBase.ProjectionMode_e.None">
            <summary>
            No projection
            </summary>
        </member>
        <member name="F:CSharpFramework.VisionViewBase.ProjectionMode_e.Perspective">
            <summary>
            3D perspective
            </summary>
        </member>
        <member name="F:CSharpFramework.VisionViewBase.ProjectionMode_e.Top">
            <summary>
            orthographic top view
            </summary>
        </member>
        <member name="F:CSharpFramework.VisionViewBase.ProjectionMode_e.Front">
            <summary>
            orthographic front view
            </summary>
        </member>
        <member name="F:CSharpFramework.VisionViewBase.ProjectionMode_e.Right">
            <summary>
            orthographic right view
            </summary>
        </member>
        <member name="T:CSharpFramework.VisionViewBase.DropObjectCreatorDelegate">
            <summary>
            Event for the static OnDropObjectCreator callback
            </summary>
            <param name="creator">Creator object that is dropped into the view. It can be a shape creator, an instance of PrefabDesc or even shapes instances to add</param>
            <param name="e">Additional drag/drop information, e.g. mouse position on screen</param>
            <param name="bProcessed">Set this reference to true if the creator was processed by custom code. Otherwise it will proceed with standard behavior, i.e. insert known types into the scene.</param>
        </member>
        <member name="T:CSharpFramework.View.Grid">
            <summary>
            This class defines a view grid, defined by spacing and offset. Shapes
            can be aligned to the grid, both for moving and roation. If the spacing in any direction is set to 0.0, the
            grid is not active in that direction
            </summary>
        </member>
        <member name="M:CSharpFramework.View.Grid.#ctor">
            <summary>
            Constructor : Creates a nno-active grid
            </summary>
        </member>
        <member name="M:CSharpFramework.View.Grid.#ctor(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Constructor that creates a grid with defined spacing and offset.
            </summary>
            <param name="spacing">spacing (xyz) of the grid</param>
            <param name="offset">offset of the grid</param>
        </member>
        <member name="M:CSharpFramework.View.Grid.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor that creates a grid with defined spacing and offset.
            </summary>
            <param name="fSpaceX"></param>
            <param name="fSpaceY"></param>
            <param name="fSpaceZ"></param>
            <param name="fOfsX"></param>
            <param name="fOfsY"></param>
            <param name="fOfsZ"></param>
        </member>
        <member name="M:CSharpFramework.View.Grid.SetSpacing(System.Single,System.Single,System.Single)">
            <summary>
            Set grid spacing
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:CSharpFramework.View.Grid.SetOffset(System.Single,System.Single,System.Single)">
            <summary>
            Set grid offset
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:CSharpFramework.View.Grid.AlignPos(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            helper function to align along one axis
            </summary>
            <param name="x"></param>
            <param name="fSpacing"></param>
            <param name="fOfs"></param>
            <param name="bEnabled"></param>
            <returns>aligned coordinate</returns>
        </member>
        <member name="M:CSharpFramework.View.Grid.GetAlignedPosX(System.Single,System.Boolean)">
            <summary>
            Helper function to get aligned position in x-direction
            </summary>
            <param name="fCurrentX">source coordinate</param>
            <param name="bIgnoreEnableState">Override the grid's enable state or not</param>
            <returns>aligned coordinate</returns>
        </member>
        <member name="M:CSharpFramework.View.Grid.GetAlignedPosY(System.Single,System.Boolean)">
            <summary>
            Helper function to get aligned position in y-direction
            </summary>
            <param name="fCurrentY">source coordinate</param>
            <param name="bIgnoreEnableState">Override the grid's enable state or not</param>
            <returns>aligned coordinate</returns>
        </member>
        <member name="M:CSharpFramework.View.Grid.GetAlignedPosZ(System.Single,System.Boolean)">
            <summary>
            Helper function to get aligned position in z-direction
            </summary>
            <param name="fCurrentZ">source coordinate</param>
            <param name="bIgnoreEnableState">Override the grid's enable state or not</param>
            <returns>aligned coordinate</returns>
        </member>
        <member name="M:CSharpFramework.View.Grid.GetAlignedPos(CSharpFramework.Math.Vector3F,System.Boolean)">
            <summary>
            Helper function to get aligned position
            </summary>
            <param name="vCurrent">source position</param>
            <param name="bIgnoreEnableState">Override the grid's enable state or not</param>
            <returns>aligned position</returns>
        </member>
        <member name="M:CSharpFramework.View.Grid.Render(CSharpFramework.VisionViewBase,CSharpFramework.Math.Vector3F)">
            <summary>
            Render the grid to a view
            </summary>
            <param name="view">Target view</param>
            <param name="center">Center of the grid</param>
        </member>
        <member name="M:CSharpFramework.View.Grid.Clone">
            <summary>
            Clones the grid
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.View.Grid.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.View.Grid.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.View.Grid.Enabled">
            <summary>
            Enable/disable the grid. Alignment functions only modify values if grid is enabled
            </summary>
        </member>
        <member name="P:CSharpFramework.View.Grid.Spacing">
            <summary>
            Get or set grid spacing
            </summary>
        </member>
        <member name="P:CSharpFramework.View.Grid.Offset">
            <summary>
            Get or set grid offset
            </summary>
        </member>
        <member name="T:CSharpFramework.View.GridSettings">
            <summary>
            stores information about grid settings
            </summary>
        </member>
        <member name="M:CSharpFramework.View.GridSettings.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="F:CSharpFramework.View.GridSettings.MoveGrid">
            <summary>
            Grid instance for moving shapes
            </summary>
        </member>
        <member name="F:CSharpFramework.View.GridSettings.RotateGrid">
            <summary>
            Grid instance for rotating
            </summary>
        </member>
        <member name="F:CSharpFramework.View.GridSettings.ShowGrid">
            <summary>
            show the grid in the view
            </summary>
        </member>
        <member name="M:CSharpFramework.View.GridSettings.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.View.GridSettings.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:CSharpFramework.ShapeDragMode">
            <summary>
            Enum that represents the current drag mode of the Gizmo
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeDragMode.NONE">
            <summary>
            No gizmo mode
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeDragMode.MOVE">
            <summary>
            Shape mode mode
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeDragMode.ROTATE">
            <summary>
            Shape rotate mode
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeDragMode.SCALE">
            <summary>
            Shape nonuniform-scale mode
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeDragMode.UNIFORMSCALE">
            <summary>
            Shape uniform-scale mode
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeDragMode.LINK">
            <summary>
            Shape link mode
            </summary>
        </member>
        <member name="T:CSharpFramework.GizmoChangedArgs">
            <summary>
            Event class for changing gizmo : GizmoChangedArgs : either the gizmo pointer changes or the gizmo has a new drag mode
            </summary>
        </member>
        <member name="M:CSharpFramework.GizmoChangedArgs.#ctor(CSharpFramework.ShapeDragMode)">
            <summary>
            Constructor
            </summary>
            <param name="_newMode"></param>
        </member>
        <member name="M:CSharpFramework.GizmoChangedArgs.#ctor(CSharpFramework.GizmoBase)">
            <summary>
             Constructor
            </summary>
            <param name="_newGizmo"></param>
        </member>
        <member name="M:CSharpFramework.GizmoChangedArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="bNewLocalOri"></param>
        </member>
        <member name="F:CSharpFramework.GizmoChangedArgs.action">
            <summary>
            Defines which property changed
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoChangedArgs.newMode">
            <summary>
            New drag mode (in case it changed)
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoChangedArgs.newGizmo">
            <summary>
            new gizmo (in case it changed)
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoChangedArgs.bNewLocalOrientation">
            <summary>
            New mode if action is LocalOrientationChanged
            </summary>
        </member>
        <member name="T:CSharpFramework.GizmoChangedArgs.Action">
            <summary>
            Defines which members are valid in the event
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoChangedArgs.Action.None">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoChangedArgs.Action.ModeChanged">
            <summary>
            The newMode member is valid
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoChangedArgs.Action.GizmoChanged">
            <summary>
            The newGizmo member is valid
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoChangedArgs.Action.LocalOrientationChanged">
            <summary>
            The bNewLocalOrientation member is valid
            </summary>
        </member>
        <member name="T:CSharpFramework.GizmoDraggingArgs">
            <summary>
            Event args structure that is passed to the static GizmoBase.OnDragging function.
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoDraggingArgs.DragMode">
            <summary>
            The current dragging mode (move/roate/scale)
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoDraggingArgs.DeltaX">
            <summary>
            The move delta since the last frame (yaw delta if mode is rotation)
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoDraggingArgs.DeltaY">
            <summary>
            The move delta since the last frame (pitch delta if mode is rotation)
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoDraggingArgs.DeltaZ">
            <summary>
            The move delta since the last frame (roll delta if mode is rotation)
            </summary>
        </member>
        <member name="T:CSharpFramework.ShapeDragModeEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.GizmoDraggingEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.GizmoBase">
            <summary>
            Gizmo base class. The gizmo is the visualization of a handle for selected shapes, e.g. the coordinate system.
            The gizmo allows to drag the shapes by grabbing the gizmo with the mouse.
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase._iLockCtr">
            <summary>
            if the gizmo is locked, it does not react to messages
            </summary>
        </member>
        <member name="M:CSharpFramework.GizmoBase.#ctor">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="M:CSharpFramework.GizmoBase.ResetShapeDeltas">
            <summary>
            Resets all deltas, e.g. before starting the dragging
            </summary>
        </member>
        <member name="M:CSharpFramework.GizmoBase.StoreOldShapeArrays">
            <summary>
            Stores all positions/orientations and scalings in separate arrays. This is necessary when starting the dragging
            since the dragging will directly modify the shape's proprties. The backup arrays can be accessed via
            OldShapePositions, OldShapeOrientations resp. OldShapeScalings
            </summary>
        </member>
        <member name="M:CSharpFramework.GizmoBase.EvaluateSnapPosition(CSharpFramework.Shapes.Shape3D,CSharpFramework.Math.Vector3F)">
            <summary>
            Constraints a shape position to snap points of the environment
            </summary>
            <param name="shape"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.GizmoBase.MoveShapes(System.Single,System.Single,System.Single)">
            <summary>
            Add moving deltas to the current drag operation. Moves the engine instances but not the shapes (yet)
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="dz"></param>
        </member>
        <member name="F:CSharpFramework.GizmoBase.move_x">
            <summary>
            Move accumulators
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.move_y">
            <summary>
            Move accumulators
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.move_z">
            <summary>
            Move accumulators
            </summary>
        </member>
        <member name="M:CSharpFramework.GizmoBase.RotateShapes(System.Single,System.Single,System.Single)">
            <summary>
            Add rotation deltas to the current drag operation. Rotates the engine instances but not the shapes (yet)
            </summary>
            <param name="dyaw"></param>
            <param name="dpitch"></param>
            <param name="droll"></param>
        </member>
        <member name="F:CSharpFramework.GizmoBase.rot_yaw">
            <summary>
            Rotation accumulators
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.rot_pitch">
            <summary>
            Rotation accumulators
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.rot_roll">
            <summary>
            Rotation accumulators
            </summary>
        </member>
        <member name="M:CSharpFramework.GizmoBase.ScaleShapes(System.Single,System.Single,System.Single)">
            <summary>
            Add scale deltas to the current drag operation. Scales the engine instances but not the shapes (yet)
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="dz"></param>
        </member>
        <member name="F:CSharpFramework.GizmoBase.scale_x">
            <summary>
            Scale accumulators
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.scale_y">
            <summary>
            Scale accumulators
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.scale_z">
            <summary>
            Scale accumulators
            </summary>
        </member>
        <member name="M:CSharpFramework.GizmoBase.OnGizmoChanged(CSharpFramework.GizmoChangedArgs)">
            <summary>
            Sends gizmo changed events
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.GizmoBase.OnStartDragging">
            <summary>
            Overridable that is called when the dragging of the gizmo starts
            </summary>
        </member>
        <member name="M:CSharpFramework.GizmoBase.OnFinishDragging">
            <summary>
            Overridable that is called when the dragging of the gizmo ends
            </summary>
        </member>
        <member name="M:CSharpFramework.GizmoBase.OnDrag(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Dragging function. Passes screen mouse position and deltas
            </summary>
            <param name="fScreenX"></param>
            <param name="fScreenY"></param>
            <param name="fScreenDX"></param>
            <param name="fScreenDY"></param>
        </member>
        <member name="M:CSharpFramework.GizmoBase.OnShowGizmo(System.Boolean)">
            <summary>
            Shows or hides the gizmo
            </summary>
            <param name="bShow">status</param>
        </member>
        <member name="M:CSharpFramework.GizmoBase.SetOrigin(System.Single,System.Single,System.Single)">
            <summary>
            Set gizmo position (in world 3D space)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:CSharpFramework.GizmoBase.SetOrientation(System.Single,System.Single,System.Single)">
            <summary>
            Set gizmo orientation
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
        </member>
        <member name="M:CSharpFramework.GizmoBase.ClearSelection">
            <summary>
            Internal function to clear the selection collection
            </summary>
        </member>
        <member name="M:CSharpFramework.GizmoBase.AddShape(CSharpFramework.Shapes.ShapeBase,System.Boolean)">
            <summary>
            Add a shape to selection
            </summary>
            <param name="shape">Shape to add</param>
            <param name="bXOR">if set, remove shape from list if already in it</param>
        </member>
        <member name="M:CSharpFramework.GizmoBase.UpdateVisibleState">
            <summary>
            Usually called internally but can be called to re-evaluate the visible status of the gizmo (e.g. ShapeBase.HintFlags_e.HideGizmo flag has changed)
            </summary>
        </member>
        <member name="M:CSharpFramework.GizmoBase.SetSingleShape(CSharpFramework.Shapes.ShapeBase,System.Boolean)">
            <summary>
            Set only one shape as selection
            </summary>
            <param name="_shape">Shape to set as selection</param>
            <param name="bCheckTraceable">If true, the shape is not selected if shape.Traceable is false</param>
        </member>
        <member name="M:CSharpFramework.GizmoBase.SetSingleShape(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Set only one shape as selection
            </summary>
            <param name="_shape">Shape to set as selection</param>
        </member>
        <member name="M:CSharpFramework.GizmoBase.AddShapes(CSharpFramework.ShapeCollection,System.Boolean)">
            <summary>
            Add a collection of shapes to the selection, optionally performing XOR operation on each
            </summary>
            <param name="shapes">Shape collection to add</param>
            <param name="bXOR">if set, remove shape from list if already in it</param>
        </member>
        <member name="M:CSharpFramework.GizmoBase.Clear">
            <summary>
            Clear the selection
            </summary>
        </member>
        <member name="M:CSharpFramework.GizmoBase.RecalcGizmoPos">
            <summary>
            Recalculate gizmo position and orientation. Naturally average from selection
            </summary>
        </member>
        <member name="M:CSharpFramework.GizmoBase.OnShapeChanged(System.Object,CSharpFramework.Shapes.ShapeChangedArgs)">
            <summary>
            Listen to shape changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.GizmoBase.OnSelectionChanged(System.Object,CSharpFramework.ShapeSelectionChangedArgs)">
            <summary>
            Listen to selection changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.GizmoBase.OnSceneChanged(System.Object,CSharpFramework.SceneChangedArgs)">
            <summary>
            Listen to scene changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.GizmoBase.OnLayerChanged(System.Object,CSharpFramework.LayerChangedArgs)">
            <summary>
            Listen to layer changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.GizmoBase.OnPropertyChanged(System.Object,CSharpFramework.PropertyChangedArgs)">
            <summary>
            Listen to shape proprty changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:CSharpFramework.GizmoBase.fBaseSize">
            <summary>
            scaling value
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.iAxisMask">
            <summary>
            current axis mask that is picked
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.Shapes">
            <summary>
            Selection
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.UseUniformScaling">
            <summary>
            Type of scaling to apply.
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.LockCtr">
            <summary>
            if the gizmo is locked, it does not react to messages
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.RecalcGizmoPosLockCtr">
            <summary>
            this locks the recalculation of the gizmo position
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.OldShapePositions">
            <summary>
            Access the backup positions of the shapes in the selection. Stored via StoreOldShapeArrays
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.OldShapeOrientations">
            <summary>
            Access the backup orientation of the shapes in the selection. Stored via StoreOldShapeArrays
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.OldShapeScalings">
            <summary>
            Access the backup scalings of the shapes in the selection. Stored via StoreOldShapeArrays
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.Moved">
            <summary>
            Indicates whether gizmo has been moved
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.Rotated">
            <summary>
            Indicates whether gizmo has been rotated
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.Scaled">
            <summary>
            Indicates whether gizmo has been scaled
            </summary>
        </member>
        <member name="E:CSharpFramework.GizmoBase.GizmoChanged">
            <summary>
            Event
            </summary>
        </member>
        <member name="E:CSharpFramework.GizmoBase.OnDragBegin">
            <summary>
            Global callback that is triggered before the gizmo starts dragging. The sender can be casted to the GizmoBase instance
            </summary>
        </member>
        <member name="E:CSharpFramework.GizmoBase.OnDragEnd">
            <summary>
            Global callback that is triggered after the gizmo has finished dragging. The sender can be casted to the GizmoBase instance
            </summary>
        </member>
        <member name="E:CSharpFramework.GizmoBase.OnDragging">
            <summary>
            Global callback that is triggered while the gizmo is dragged. The sender can be casted to the GizmoBase instance.
            A data object of class GizmoDraggingArgs is passed which contains members for the move/rotation deltas since the last call.
            In case of rotation, the DeltaX/DeltaY/DeltaZ members need to be interpreted as yaw/pitch/roll Euler angles measured in degree.
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.Dragging">
            <summary>
             Indicates whether gizmo is currently in dragging mode
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.Active">
            <summary>
            The gizmo is 'active' when any axis is picked
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.Visible">
            <summary>
            The gizmo is 'visible' when it has at least on Shape in its selection
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.DragMode">
            <summary>
            get and set the drag mode (move/rotate/scale)
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.Position">
            <summary>
            Set gizmo position
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.LocalOrientation">
            <summary>
            Specifies the orientation mode of the gizmo
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.SnapPointsEnabled">
            <summary>
            Determines whether snap points are enabled
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.SelectionSnapPoints">
            <summary>
            Returns the array of snap points selected shapes
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.RelevantSnapPoints">
            <summary>
            Returns the array of relevant snap points (selection specific)
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.GridSettings">
            <summary>
            Gets (or sets) the grid settings
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.MoveGrid">
            <summary>
            Get or set the grid used for moving shapes
            </summary>
        </member>
        <member name="P:CSharpFramework.GizmoBase.RotateGrid">
            <summary>
            Get or set the grid used for rotating shapes
            </summary>
        </member>
        <member name="T:CSharpFramework.GizmoBase.Axis">
            <summary>
            bits that can be combined for moving/scaling
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.Axis.None">
            <summary>
            no axis picked
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.Axis.Move_X">
            <summary>
            move axis (x)
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.Axis.Move_Y">
            <summary>
            move axis (y)
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.Axis.Move_Z">
            <summary>
            move axis (y)
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.Axis.Rotate_Yaw">
            <summary>
            rotation axis (yaw)
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.Axis.Rotate_Pitch">
            <summary>
            rotation axis (pitch)
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.Axis.Rotate_Roll">
            <summary>
            rotation axis (roll)
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.Axis.Scale_X">
            <summary>
            scaling axis (x)
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.Axis.Scale_Y">
            <summary>
            scaling axis (y)
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.Axis.Scale_Z">
            <summary>
            scaling axis (z)
            </summary>
        </member>
        <member name="F:CSharpFramework.GizmoBase.Axis.Link">
            <summary>
            link axis
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.EditorModeTest">
            <summary>
            Summary description for EditorModeTest.
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.EditorModeTest.SetUp">
            <summary>
            Test init function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.EditorModeTest.TearDown">
            <summary>
            Set back everything
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.EditorModeTest.TestAnimatingMode">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.EditorModeTest.TestPlayingMode">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.EditorModeTest.EditorManager_EditorModeChanged(System.Object,CSharpFramework.EditorModeChangedArgs)">
            <summary>
            Test function
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:CSharpFramework.Tests.DynamicClassManagerTest">
            <summary>
            Summary description for DynamicClassManagerTest.
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicClassManagerTest.TestDefaultValues">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicClassManagerTest.TestMissingDefaultValue">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicClassManagerTest.TestClassNotFound">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicClassManagerTest.TestClassAlreadyExists">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicClassManagerTest.TestClassDefinitionAccess">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicClassManagerTest.TestInstanceFixing_NewProperty">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicClassManagerTest.TestInstanceFixing_OldPropertyMissing">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicClassManagerTest.TestInstanceFixing_PropertyTypeChanged">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicClassManagerTest.TestInstanceFixing_CompleteClassMissing">
            <summary>
            Test function
            </summary>
        </member>
        <member name="T:CSharpFramework.Serialization.INativeObjectConvertible">
            <summary>
            Base class of a native object convertible. Converts from managed type to native
            type for custom managed type.
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.INativeObjectConvertible.ToNativeString">
            <summary>
            Converts managed type to native type
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ModelGroup">
            <summary>
            Definition for a group of model files each associated with a probability. Can be used for populator shapes
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroup.RemoveEntry(CSharpFramework.Scene.ModelGroup.GroupEntry)">
            <summary>
            Removes an entry from list
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroup.AddEntry">
            <summary>
            Adds a new entry to list
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroup.GetRandomEntry(System.Single)">
            <summary>
            Returns a random entry based on passed seed value and probabilities of entries. The returned entry is reproducible for the passed seed value
            </summary>
            <param name="fRnd">Random value. Typically in 0..1 range</param>
            <returns>A group entry</returns>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroup.RenormalizeProbabilities(CSharpFramework.Scene.ModelGroup.GroupEntry)">
            <summary>
            Used internally
            </summary>
            <param name="fix"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroup.SaveToFile(System.String)">
            <summary>
            Saves the group description to XML based file
            </summary>
            <param name="filename">Can be null to use existing filename. Can be absolute or project relative</param>
            <returns>Result</returns>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroup.LoadFromFile(System.String)">
            <summary>
            Loads the group description from XML based file
            </summary>
            <param name="filename">Can be null to use existing filename. Can be absolute or project relative</param>
            <returns>Result</returns>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroup.CreateFromFile(System.String)">
            <summary>
            Static helper function to create a group instance from file.
            Calling this multiple times for the same filename will not share the same object instance
            </summary>
            <param name="filename">filename of the instance to load</param>
            <returns>A new group instance or null</returns>
        </member>
        <member name="P:CSharpFramework.Scene.ModelGroup.Entries">
            <summary>
            Returns the array of model entries
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ModelGroup.Filename">
            <summary>
            Filename of this modelgroup file
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ModelGroup.SupportedModelTypes">
            <summary>
            Returns a list of supported model types. This can be null outside the model group editor
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ModelGroup.FileFilter">
            <summary>
            Returns a sting array of supported file filter (compatible with Filter property of a file dialog).
            This can be null outside the model group editor
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ModelGroup.GroupEntry">
            <summary>
            A single model entry (i.e filename + probability + misc other properties)
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroup.GroupEntry.#ctor(CSharpFramework.Scene.ModelGroup)">
            <summary>
            Constructor
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroup.GroupEntry.GetRandomScale">
            <summary>
            Returns a random scaling factor built from average scale and variation
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroup.GroupEntry.GetRandomScale(System.Single)">
            <summary>
            Returns a random scaling factor built from average scale and variation. The value is reproducible for the passed seed value
            </summary>
            <param name="fSeed">floating point seed value. Typically this value is in 0..1 range</param>
            <returns></returns>
        </member>
        <member name="E:CSharpFramework.Scene.ModelGroup.GroupEntry.OnGroupEntryDisplayNameChanged">
            <summary>
            This static callback is triggered for every group entry that changed its display name.
            The sender can be casted to GroupEntry
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ModelGroup.GroupEntry.Index">
            <summary>
            Index in the group
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ModelGroup.GroupEntry.Owner">
            <summary>
            Owner group
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ModelGroup.GroupEntry.Filename">
            <summary>
            Filename of the model resource
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ModelGroup.GroupEntry.Key">
            <summary>
            Optional display name text
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ModelGroup.GroupEntry.DisplayName">
            <summary>
            Final display name in the list view
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ModelGroup.GroupEntry.Probability">
            <summary>
            Probability [0..1] associated with the model. Setting it will re-normalize all others
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ModelGroup.GroupEntry.ProbabilityNoUpdate">
            <summary>
            Internal setter
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ModelGroup.GroupEntry.ProbabilityPercentage">
            <summary>
            Same as Probability but multiplied with 100
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ModelGroup.GroupEntry.AverageScale">
            <summary>
            Average scaling factor of this model
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ModelGroup.GroupEntry.ScaleVariation">
            <summary>
            Variation of the scaling (0 for no variation, 1 for 0..200% scaling variation)
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ModelGroupFileTypeAttribute">
            <summary>
            Attribute used by the ModelGroupFilenameEditor to support one or more file types
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroupFileTypeAttribute.#ctor(System.String,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="fileExtension">File extenstion to use (e.g. ".model")</param>
            <param name="thumbnailFormats">List of thumbnail formats for the list view. See StandardThumbnailProvider</param>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroupFileTypeAttribute.#ctor(System.String,System.Type,System.Object[])">
            <summary>
            Construtor
            </summary>
            <param name="fileExtension">File extenstion to use (e.g. ".model")</param>
            <param name="imageProviderType">Type of the image provider class (must be inherited from IImageProvider)</param>
            <param name="constructorParams">Constructor parameters for image provider class</param>
        </member>
        <member name="T:CSharpFramework.Scene.ModelGroupFilenameEditor">
            <summary>
            UITypeEditor that can be used to make a group filename editable through the model group editor
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroupFilenameEditor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ModelGroupFilenameEditor.DEFAULT_EXTENSION">
            <summary>
            Default file extension for group files
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroupFilenameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Scene.ModelGroupFilenameEditor.editorService">
            <summary>
            Service instances passed to the EditValue function
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroupFilenameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overriden Edit value function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroupFilenameEditor.CreateEmptyGroupFile(System.String,System.String)">
            <summary>
            Helper function to physically create a new group file
            </summary>
            <param name="absFilename">absolute file path. If null, a browse dialog appears</param>
            <param name="oldFilename">optional for browsing. Can be null</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroupFilenameEditor.BrowseGroupFile(System.String)">
            <summary>
            Opens a browse dialog for model group files.
            </summary>
            <param name="oldFilename">previous name for browsing. Can be null</param>
            <returns>relative filename or null</returns>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroupFilenameEditor.EditGroupFile(System.String)">
            <summary>
            Helper function to open/edit a model group file
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ModelGroupFilenameEditor.AddFileNameToMRU(System.String)">
            <summary>
            Helper function to add filename to MRU list
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:CSharpFramework.Scene.ModelGroupThumbnailProvider">
            <summary>
            Thumbnail provider that returns thumbnails for various file types
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.IImageProvider">
            <summary>
            Interface that can associate images/description texts with strings.
            Typically this interface is used to provide thumbnail images for file names. 
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.IImageProvider.GetImageFor(System.String,System.String@)">
            <summary>
            Associate an image with the passed string
            </summary>
            <param name="pathname">Incoming string</param>
            <param name="reasonForFailing">output string that can define a error hint string</param>
            <returns>Image instance. Can be null</returns>
        </member>
        <member name="M:CSharpFramework.Controls.IImageProvider.GetDescriptionFor(System.String)">
            <summary>
            Associate a description text with the passed string
            </summary>
            <param name="pathname">Incoming string</param>
            <returns>Description text. Can be null</returns>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.StringCollectionEditor">
            <summary>
            This class works around the limitation that the default CollectionEditor does not work with strings due to
            missing empty string constructor.
            This editor supports the DefaultValueAttribute to set a default string.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.StringCollectionEditor.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.StringCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.StringCollectionEditor.CreateInstance(System.Type)">
            <summary>
            Overridden function, returns a default string
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.StringCollectionEditor.CreateCollectionItemType">
            <summary>
            overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Dialogs.MultiUserEditingDlg">
            <summary>
            Dialog that is opened on project load (unless it is disabled in the user settings).
            
            This dialog allows the user to check what type of project he is currently loading.
            Either Local (Default), Network or RCS. The editor detects automatically what type
            of project is currently loaded and selects the respective option in the list.
            
            In addition the user can specify how the layer locking should be handled, either 
            to ask which layers should be locked when a scene is loaded or lock all layers per
            default.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.MultiUserEditingDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.MultiUserEditingDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.MultiUserEditingDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.CreateProjectDlg">
            <summary>
            CreateProjectDlg : Dialog to create a new project file
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateProjectDlg.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateProjectDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateProjectDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateProjectDlg.ResultPanel_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Rendered the result path, with additional trimming if required.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateProjectDlg.BrowseButton_Click(System.Object,System.EventArgs)">
            <summary>
            Click the browse button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateProjectDlg.TargetFileChanged(System.Object,System.EventArgs)">
            <summary>
            Event that is trigger when the user changes the directory or project file name.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateProjectDlg.UpdateResultText">
            <summary>
            Displays the updated result name
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateProjectDlg.UpdateUI">
            <summary>
            Updates the user interface components according to the current content.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.CreateProjectDlg.ProjectName">
            <summary>
            Get the project name
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.CreateProjectDlg.Dir">
            <summary>
            Get the absolute project directory
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.CreateProjectDlg.CreateMeshesFolder">
            <summary>
            Properties whether data folder should be added to the new project
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.SelectionSetItem">
            <summary>
            Contains the stored selection of items for easy re-selection by the SelectionSet feature.
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.SelectionSetItem.Name">
            <summary>
            Display name to identify the set.
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.SelectionSetItem.Shapes">
            <summary>
            The stored collection of shapes.
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.SliderNumeric.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.SliderNumeric.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Controls.SliderNumeric.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SliderNumeric.Minimum">
            <summary>
            Gets or sets the minimum value of the slider
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SliderNumeric.Maximum">
            <summary>
            Gets or sets the maximum value of the slider 
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SliderNumeric.Increment">
            <summary>
            Gets or sets the increment step of the slider
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SliderNumeric.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places in the numeric control
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SliderNumeric.NumericWidth">
            <summary>
            Gets opr set the width of the numeric control
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SliderNumeric.Value">
            <summary>
            Gets or sets the actual value of the slider
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.ConsoleOutListView">
            <summary>
            Console class.
            </summary>
        </member>
        <member name="T:CSharpFramework.View.IEditorConsole">
            <summary>
            Simple console interface to output console log information
            </summary>
        </member>
        <member name="M:CSharpFramework.View.IEditorConsole.Print(System.String)">
            <summary>
            Prints a string to the console
            </summary>
            <param name="s">string to print</param>
        </member>
        <member name="M:CSharpFramework.View.IEditorConsole.PrintWarning(System.String)">
            <summary>
            Prints a warning string to the console
            </summary>
            <param name="s">string to print</param>
        </member>
        <member name="M:CSharpFramework.View.IEditorConsole.PrintError(System.String)">
            <summary>
            Prints an error string to the console
            </summary>
            <param name="s">string to print</param>
        </member>
        <member name="M:CSharpFramework.View.IEditorConsole.ParseMessage(System.String)">
            <summary>
            Parses the given string before output
            </summary>
            <param name="s">string to print</param>
        </member>
        <member name="M:CSharpFramework.Controls.ConsoleOutListView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ConsoleOutListView.Print(System.String)">
            <summary>
            Implementation
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:CSharpFramework.Controls.ConsoleOutListView.PrintWarning(System.String)">
            <summary>
            Implementation
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:CSharpFramework.Controls.ConsoleOutListView.PrintError(System.String)">
            <summary>
            Implementation
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:CSharpFramework.Controls.ConsoleOutListView.ParseMessage(System.String)">
            <summary>
            Implementation
            </summary>
            <param name="s"></param>
        </member>
        <member name="F:CSharpFramework.Controls.ColorRangeBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ColorRangeBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Controls.ColorRangeBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.ColorRangeBar.Hue">
            <summary>
            Gets or sets the hue value of the color range bar in degrees [0..360]
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.ColorArea.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ColorArea.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Controls.ColorArea.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.AssignMaterialLightingMethodAction">
            <summary>
            This action replaces the lighting method of a Material.
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.AssignMaterialLightingMethodAction.#ctor(CSharpFramework.Scene.Material,ManagedBase.LightingMethod_e)">
            <summary>
            Constructor
            </summary>
            <param name="material"></param>
            <param name="lightingMethod"></param>
        </member>
        <member name="M:CSharpFramework.Actions.AssignMaterialLightingMethodAction.Do">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.AssignMaterialLightingMethodAction.Undo">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AssignMaterialLightingMethodAction.LongName">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AssignMaterialLightingMethodAction.ShortName">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="T:CSharpFramework.View.HotSpotConeAngle">
            <summary>
            A hotspot class that is used to drag a cone angle
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotConeAngle.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.UInt32,CSharpFramework.View.HotSpotBase.PickType,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="owner">Owner shape</param>
            <param name="bitmapfile">the hotspot bitmap icon filename</param>
            <param name="iColorRef">hotspot color</param>
            <param name="picktype">pick shape, e.g. circle</param>
            <param name="fRadius">hotspot radius on screen</param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotConeAngle.OnDrag(CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridden dragging function
            </summary>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotConeAngle.EvaluatePosition">
            <summary>
            Updates the 3D position of the Hotspot
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotConeAngle.RenderHotSpot(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Render function
            </summary>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="P:CSharpFramework.View.HotSpotConeAngle.StartAngle">
            <summary>
            Sets the start angle of the cone. Should be set by shape in BeginDrag function
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotConeAngle.CurrentAngle">
            <summary>
            Returns the current angle at any time
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotConeAngle.HasChanged">
            <summary>
            Checks whether the angle has changed compared to start angle
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotConeAngle.Distance">
            <summary>
            Allows to set the distance at which the hotspot is dispayed
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotConeAngle.MinAngle">
            <summary>
            Sets the minimal possible angle (default = 0.1)
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotConeAngle.MaxAngle">
            <summary>
            Sets the maximal possible angle (default = 179.0)
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotConeAngle.UseOwnerUpDirection">
            <summary>
            If set, the angle is used and displayed in the up-direction of the owner. Otherwise (default) it uses
            the owner's right direction
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotConeAngle.Rotation">
            <summary>
            Gets or sets the rotation of the cone relative to its owner shape.
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotConeAngle.Direction">
            <summary>
            Returns the axis that is used to measure the angle against. Currently global x-axis.
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotConeAngle.SecondAxis">
            <summary>
            Returns the second axis that is used to measure the angle against. Either global y- or z-axis,
            depending on UseOwnerUpDirection property
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotConeAngle.ProjectedPosition">
            <summary>
            Returns the hotspot position projected on the axis
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.LinkShapeTest">
            <summary>
            Tests linking shapes
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.LinkShapeTest.SetUp">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.LinkShapeTest.TearDown">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.LinkShapeTest.Test_Linking">
            <summary>
            Links shapes
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.MyLinkShape">
            <summary>
            Test shape with link source and target
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.MyLinkShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CSharpFramework.Tests.MyLinkShape.CreateAllLinks">
            <summary>
            Creates all links
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.MyLinkShape.CanLink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Can link to all other
            </summary>
            <param name="src"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Tests.MyLinkShape.OnLink(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Actually performs the linking
            </summary>
            <param name="src"></param>
            <param name="target"></param>
        </member>
        <member name="F:CSharpFramework.Tests.MyLinkShape.LinkSrc">
            <summary>
            Single link source
            </summary>
        </member>
        <member name="F:CSharpFramework.Tests.MyLinkShape.LinkTgt">
            <summary>
            Single link target
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.Group3DShape">
            <summary>
            Group shape that is a 3d shape that can be moved in the scene
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.Group3DShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Group3DShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Group3DShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Group3DShape.GetLocalBoundingBox(CSharpFramework.Math.BoundingBox@)">
            <summary>
            No bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.Group3DShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.Group3DShape.GetFarClipDistance">
            <summary>
            Returns 0.0f as this shape does not contribute anything to far clipping
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.Group3DShape.GetGroupIconIndex">
            <summary>
            Return the icon index used for this type of shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.Group3DShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Shapes.Group3DShape.ParentingMode">
            <summary>
            Always choose parenting mode SceneGraph here
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.Group3DShapeCreator">
            <summary>
            Creator class for 3D groups
            </summary>
        </member>
        <member name="T:CSharpFramework.IShapeCreatorPlugin">
            <summary>
            Derived plugin class for a shape creator editor plugin
            Shape creators can show up in the "Create" menu of the editor. The CreateShapeInstance function
            should be implemented in derived classes. The ExecutePlugin has a default implementation which
            adds a new shape to the scene (can still be overridden though).
            </summary>
        </member>
        <member name="T:CSharpFramework.IEditorPlugin">
            <summary>
            Base class for an editor plugin
            </summary>
        </member>
        <member name="M:CSharpFramework.IEditorPlugin.GetPluginName">
            <summary>
            Get name of the plugin
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEditorPlugin.GetPluginCategory">
            <summary>
            Get plugin category e.g. "lights" for plugin "spotlight"
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEditorPlugin.GetPluginDescription">
            <summary>
            An optional short text that decribes the functionality of tihs plugin
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEditorPlugin.ExecutePlugin">
            <summary>
            Function to execute the plugin. E.g. create a shape in a creator plugin
            </summary>
        </member>
        <member name="M:CSharpFramework.IEditorPlugin.IsVisible">
            <summary>
            whether the plugin should be visible
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEditorPlugin.IsEnabled">
            <summary>
            whether the plugin should be disabled (grayed out)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEditorPlugin.OnRegistered">
            <summary>
            Overridable that gets called by the editor when the plugin is registered. This implementation registers the hotkey (if available)
            </summary>
        </member>
        <member name="M:CSharpFramework.IEditorPlugin.OnUnregistered">
            <summary>
            Overridable that gets called by the editor when the plugin is de-registered
            </summary>
        </member>
        <member name="M:CSharpFramework.IEditorPlugin.ToString">
            <summary>
            Overridden ToString function that returns the Name
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.IEditorPlugin.IconIndex">
            <summary>
            Gets or sets the icon index that is used in tree views etc. An index can be retrieved from the dynamic image list
            EditorManager.GUI.ShapeTreeImages.
            </summary>
        </member>
        <member name="P:CSharpFramework.IEditorPlugin.SelectedIconIndex">
            <summary>
            Selected version of IconIndex. Falls back to IconIndex if not used
            </summary>
        </member>
        <member name="P:CSharpFramework.IEditorPlugin.HotkeyBinding">
            <summary>
            Overridable to get (or set) the hotkey binding action. By default it binds a hotkey (set to None)
            that calls the ExecutePlugin function on this plugin
            </summary>
        </member>
        <member name="P:CSharpFramework.IEditorPlugin.Name">
            <summary>
            Gets the name (+category path) of this plugin
            </summary>
        </member>
        <member name="P:CSharpFramework.IEditorPlugin.Hotkey">
            <summary>
            Gets the hotkey associated with this plugin
            </summary>
        </member>
        <member name="M:CSharpFramework.IShapeCreatorPlugin.CreateShapeInstance">
            <summary>
            Create a new shape instance (to be overridden).
            Shape creator plugins can override this function. If the operation
            is not supported by the plugin then NULL is returned.
            </summary>
        </member>
        <member name="M:CSharpFramework.IShapeCreatorPlugin.ExecutePlugin">
            <summary>
            Overriden (uses the CreateShapeInstance function)
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.Group3DShapeCreator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.Group3DShapeCreator.GetPluginName">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.Group3DShapeCreator.GetPluginCategory">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.Group3DShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.Group3DShapeCreator.CreateShapeInstance">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Serialization.IFileLock">
            <summary>
            Interface class for a file lock with virtual / abstract methods.
            
            Implemented by FileLockDisc and FilelockRCS.
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.IFileLock.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor. Takes the file to lock as a parameter.
            </summary>
            <param name="fileName">Name of the file to get a lock for (absolute path)</param>
        </member>
        <member name="M:CSharpFramework.Serialization.IFileLock.GatherLockInformation">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Serialization.IFileLock.TryLock">
            <summary>
            Try to get an exclusive lock for the file.
            The lock has to be released with the Unlock function.
            </summary>
            <returns>"false" if the file is either write protected or locked by another process</returns>
        </member>
        <member name="M:CSharpFramework.Serialization.IFileLock.Unlock">
            <summary>
            Releases the lock. 
            RCS lock: removes the lock if the file was unmodified
            Disk lock: delete the temporary .LOCK file
            </summary>
            <returns>"true" if the unlock was successful, "false" otherwise</returns>
        </member>
        <member name="M:CSharpFramework.Serialization.IFileLock.OwnsLock">
            <summary>
            Indicates whether the FileLock instance has the write lock for the file
            </summary>
            <returns>"true" if the FileLock instance has the lock for the file, "false" otherwise</returns>
        </member>
        <member name="M:CSharpFramework.Serialization.IFileLock.IsLocked">
            <summary>
            Checks whether the file is either write protected or locked by any process. This function also
            returns a locked state if the file is locked by this instance. 
            
            Use the OwnsLock property for checking whether the FileLock instance has the write lock to the file.
            If this function indicated true, the LockOwnerMachine and LockOwnerUser property is valid afterwards.
            </summary>
            <returns>"true" if the file is locked by any process, "false" otherwise</returns>
        </member>
        <member name="M:CSharpFramework.Serialization.IFileLock.LockFileExists">
            <summary>
            Indicates whether the physical lock file exists.
            Using this property won't modify the lock file. This has the advantage that the 
            file changed event will not be triggered and that the operation will not be
            blocked for half a second due to access right issues.
            </summary>
            <returns>"true" id the lock file exists, "false" otherwise</returns>
        </member>
        <member name="P:CSharpFramework.Serialization.IFileLock.LockOwnerMachine">
            <summary>
            Returns the machine name that owns the lock. This information is only valid after calling IsLocked or TryLock.
            If this user owns the lock (OwnsLock property), then this property returns EditorManager.MachineName
            </summary>
        </member>
        <member name="P:CSharpFramework.Serialization.IFileLock.LockOwnerUser">
            <summary>
            Returns the user name that owns the lock. This information is only valid after calling IsLocked or TryLock.
            If this user owns the lock (OwnsLock property), then this property returns EditorManager.UserName
            </summary>
        </member>
        <member name="P:CSharpFramework.Serialization.IFileLock.LockOwnerNiceName">
            <summary>
            Combines user and machine name in a nice printable format. Also handles null name.
            </summary>
        </member>
        <member name="P:CSharpFramework.Serialization.IFileLockFactory.RemoveReadOnlyFlag">
            <summary>
            Gets or sets the behavior what to do with read-only files. The default behavior is no to
            lock these files so they cannot be edited. In case of using local editing for a project 
            that is in a valid RCS workspace it might still make sense to disable this behavior. 
            
            In respect with the Perforce RCS you can refer this to "Working Disconnected":
            http://kb.perforce.com/article/2
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Scene2DViewFilterCategory">
            <summary>
            Defines a filter category that appears in the 2D overview panel in the check mark list
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Scene2DViewFilterCategory.Name">
            <summary>
            name of the category to appear in the drop down
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Scene2DViewFilterCategory.Enabled">
            <summary>
            Current enabled status. Does not have to be checked on the user side
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Scene2DViewFilterCategory.Image">
            <summary>
            Optional image for the menu
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Scene2DViewFilterCategory.Description">
            <summary>
            Optional description text
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Scene2DActions">
            <summary>
            Class that is used to collect relevant operations for IScene2DViewRenderable objects in the 2D view
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Scene2DActions.AddAction(CSharpFramework.Scene.IScene2DViewRenderable,System.String)">
            <summary>
            Use this function to associate an action name with an object. Call this from inside IScene2DViewRenderable.Get2DViewActions
            </summary>
            <param name="_object"></param>
            <param name="_actionName"></param>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.PropertyGridCollapseState">
            <summary>
            Class for saving and restoring the collapsed/expanded state of property grid items.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.PropertyGridCollapseState.#ctor(System.Windows.Forms.PropertyGrid)">
            <summary>
            Constructor. Collects the list of expanded items.
            </summary>
            <param name="propGrid"></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.PropertyGridCollapseState.Apply(System.Windows.Forms.PropertyGrid)">
            <summary>
            Applies the list of expanded items to the passed property grid.
            Use this function to restore the collapse state of the property grid after the selected
            item has been changed
            </summary>
            <param name="propGrid"></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.PropertyGridCollapseState.GetRootItem(System.Windows.Forms.GridItem)">
            <summary>
            Gets the root item of the passed grid item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.PropertyGridCollapseState._expandedItemPaths">
            <summary>
            List of grid items (as paths) which are expanded
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.PropertyGridCollapseState.CollectExpandedItemsVisitor">
            <summary>
            Visitor which collects all expanded items of a property grid
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.PropertyGridItemAccessor.IVisitor">
            <summary>
            Interface for the visitor implementations
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.PropertyGridItemAccessor">
            <summary>
            This class provides functionality for executing a visitor on all grid items
            in a property grid.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.PropertyGridItemAccessor.RunVisitor(System.Windows.Forms.GridItem,CSharpFramework.PropertyEditors.PropertyGridItemAccessor.IVisitor)">
            <summary>
            Executes the passed visitor for all grid items in the passed property grid
            (including the passed root item)
            </summary>
            <param name="rootItem"></param>
            <param name="visitor"></param>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.PropertyGridItemAccessor.IVisitor">
            <summary>
            Interface for the visitor implementations
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.PropertyGridItemAccessor.IVisitor.Visit(System.Windows.Forms.GridItem)">
            <summary>
            Visit function which is called for each grid item in the property grid
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.PropertyGridCollapseState.ItemPath">
            <summary>
            Represents a property grid item as a string based path
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.PropertyGridCollapseState.ItemPath.#ctor(System.Windows.Forms.GridItem)">
            <summary>
            Constructor which takes a property grid item and stores the path to the item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.PropertyGridCollapseState.ItemPath.GetItem(System.Windows.Forms.GridItem)">
            <summary>
            Gets instance of the item within the passed property grid, or NULL if the path can't be resolved
            </summary>
            <param name="rootItem"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.PropertyGridCollapseState.ItemPath._pathComponents">
            <summary>
            Path components (first entry is child of root)
            </summary>
        </member>
        <member name="T:CSharpFramework.Helper.ArrayListHelper">
            <summary>
            Helper class that provides useful static array list helper functions
            </summary>
        </member>
        <member name="M:CSharpFramework.Helper.ArrayListHelper.ShallowClone(System.Collections.ArrayList)">
            <summary>
            Creates a new list with the same object references.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.ArrayListHelper.DeepClone(System.Collections.ArrayList)">
            <summary>
            Assumes that all entries in the passed collection implement the ICloneable interface. The returned collection contains
            the cloned elements
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.ArrayListHelper.CreateUnusedName(System.Collections.ArrayList,System.String)">
            <summary>
            Creates a name not yet used in the given list
            Numbers will be added to the name prefix if necessary to make it unique
            </summary>
            <param name="list">the list that has to be searched</param>
            <param name="name">The name prefix</param>
            <returns>The unused name</returns>
        </member>
        <member name="M:CSharpFramework.Helper.ArrayListHelper.FindByName(System.Collections.ArrayList,System.String)">
            <summary>
            Find an object in the list by a given name, ignoring the case
            </summary>
            <param name="list">The list that has to be searched</param>
            <param name="name">The name of the searched object</param>
            <returns>the object with the given name</returns>
        </member>
        <member name="M:CSharpFramework.Helper.ArrayListHelper.FindByName(System.Collections.ArrayList,System.String,System.Boolean)">
            <summary>
            Find an object in the list by a given name
            </summary>
            <param name="list">The list that has to be searched</param>
            <param name="name">The name of the searched object</param>
            <param name="bIgnoreCase">Wether the case should be ignored</param>
            <returns>the object with the given name</returns>
        </member>
        <member name="M:CSharpFramework.Helper.ArrayListHelper.FindByType(System.Collections.ArrayList,System.Type,System.Boolean)">
            <summary>
            Finds th first occurrance of an object of type searchType in the collection.
            </summary>
            <param name="list">the collection to search</param>
            <param name="searchType">the type to find</param>
            <param name="bDerived">if false, it must find the exact type, otherwise it can be derived</param>
            <returns>the first match in the collection or null</returns>
        </member>
        <member name="M:CSharpFramework.Helper.ArrayListHelper.SameObjects(System.Collections.ArrayList,System.Collections.ArrayList,System.Boolean)">
            <summary>
            Checks whether both collections actually contain the same objects. This function handles null pointer gracefully (same as empty collections).
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <param name="bIgnoreOrder">If false, array1[i] must always be array2[i]</param>
            <returns>true, if both collections contain the same elements</returns>
        </member>
        <member name="M:CSharpFramework.Helper.ArrayListHelper.ObjectsEqual(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Compares the content of two arrays by using the Equals function on each member
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.CloneableBase">
            <summary>
            BaseObject class is an abstract class for you to derive from.
            Every class that will be derived from this class will support the 
            Clone method automaticly.
            
            The class implements the interface ICloneable and there 
            for every object that will be derived from this object will support the 
            ICloneable interface as well.
            
            IMPORTANT NOTE: 
            You don't have full control over the cloning process when using this approach.
            Thus we only use it for the dynamic properties and not for the shapes!
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.CloneableBase.System#ICloneable#Clone">
            <summary>
            Explicit interface method impl -- available for 
            clients of ICloneable, but invisible to casual 
            clients of MyCloneableClass
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.CloneableBase.Clone">
            <summary>
            Clone the object, and returning a reference to a cloned object.
            </summary>
            <returns>Reference to the new cloned 
            object.</returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.CloneableBase.GetPropertyDict(System.String)">
            <summary>
            Builds a dictionary of properties in this class instance.
            Don't make this function a property since it would recursively call itself.
            </summary>
            <param name="separator">The separator character for vector components</param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Dialogs.ShapeSearchPanel">
            <summary>
            Panel for searching shapes according to shape type and property values.
            
            The search algorithm processes all shapes derived from ShapeBase. Use the ShapeSearchable
            attribute to exclude specific shape classes from the search (see ShapeSearchableAttribute).
            The property comparison is done as a "contains" operation (not as "matches").
            
            Shape classes can use the ShapeTypeNiceName attribute to provide a human readable name for
            their class (used in shape filter and result list). If this attribute is not provided then
            the class name of the shape is used instead.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.ShapeSearchPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShapeSearchPanel.#ctor(CSharpFramework.Docking.DockingContainer)">
            <summary>
            Constructor
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShapeSearchPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShapeSearchPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShapeSearchPanel.UpdateResultList">
            <summary>
            Update the content of the result list view according to the latest search
            results.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShapeSearchPanel.AdjustListViewColumns">
            <summary>
            Resize the list view columns according to the current size of the list view.
            Necessary when panel is resized.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShapeSearchPanel.GetPublicPropertiesForShape(System.Type)">
            <summary>
            Get the names of all public properties for the passed shapes type
            Takes the Browseable attribute into account. Note that the properties
            of dynamic property collections are not considered.
            </summary>
            <param name="shapeType">type of the shape</param>
            <returns>array of property names</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShapeSearchPanel.ShapeSearchPanel_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Adjust the list view column sizes whne the visibility status of the panel changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShapeSearchPanel.listViewResult_ColumnClick(System.Object,System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            Update the list view sorting when double clicking on a column.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShapeSearchPanel.IScene_ShapeChanged(System.Object,CSharpFramework.Shapes.ShapeChangedArgs)">
            <summary>
            Keep track of renamed and deleted shapes.
            For renamed shapes: update the text of the corresponding list view item
            For deleted shapes: remove the corresponding item from the list view
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShapeSearchPanel.ShapeSearchPanel_Resize(System.Object,System.EventArgs)">
            <summary>
            Adjust the list view column sizes when the form is resized
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShapeSearchPanel.listViewResult_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Update the application selection when the user modifies the result list view selection.
            Use a timer to bundle consecutive updates.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShapeSearchPanel.listViewResult_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Perform the shape's double click operation when user double clicks in the list view
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShapeSearchPanel._timerApplySelection_Tick(System.Object,System.EventArgs)">
            <summary>
            Apply the current list view selection on the application (timer function).
            The timer is used to bundle consecutive update operations in order to avoid flickering.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:CSharpFramework.Dialogs.ShapeSearchPanel.AlphabeticItemSorter">
            <summary>
            ListItemSorter class for the result list view.
            Sorts the rows by the selected column.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShapeSearchPanel.AlphabeticItemSorter.Compare(System.Object,System.Object)">
            <summary>
            Overridden comparision function that compares the two list item elements
            by sorting order and colum.
            
            </summary>
            <param name="x">first element</param>
            <param name="y">second element</param>
            <returns>integer value specifing the comparison result</returns>
        </member>
        <member name="P:CSharpFramework.Dialogs.ShapeSearchPanel.AlphabeticItemSorter.Order">
            <summary>
            Sorting order (ascending or descending)
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ShapeSearchPanel.AlphabeticItemSorter.SortColumn">
            <summary>
            Index of the column to sort by
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.PropertyGridBase">
            <summary>
            Base class for property grids in vForge panels.
            
            This property grid derives from the standard .NET property grid and adds support for composite parameters
            (such as shader effect properties).
            
            Note: you additionally need to assign the UndoableObjectConverter type converter attribute to your
            composite property.
            
            This class is designed for being used in vForge panels (custom dialogs). It doesn't support
            undo/redo.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.PropertyGridBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.GradientBox">
            <summary>
            Gradient Box to preview curves and color gradients.
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.GradientBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.GradientBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.GradientBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.GradientBox.ColorArray">
            <summary>
            Access the array of cached lookup colors. The length of the array matches the width of this control
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.PresetBox">
            <summary>
            Gradient Box with special functionality for using it as a button
            </summary>
        </member>
        <member name="T:CurveEditorBox.CurveType">
            <summary>
            Curve type (single vs color...)
            </summary>
        </member>
        <member name="F:CurveEditorBox.CurveType.SingleCurve">
            <summary>
            Single curve
            </summary>
        </member>
        <member name="F:CurveEditorBox.CurveType.ColorCurve">
            <summary>
            RGBA color curve
            </summary>
        </member>
        <member name="F:CurveEditorBox.CurveType.PositionCurve">
            <summary>
            xyz position curve
            </summary>
        </member>
        <member name="F:CurveEditorBox.CurveType.MinMaxCurve">
            <summary>
            2 component min/max curve
            </summary>
        </member>
        <member name="T:CurveEditorBox.CurveEditorBox">
            <summary>
            Control to edit a color curve
            </summary>
        </member>
        <member name="F:CurveEditorBox.CurveEditorBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:CurveEditorBox.CurveEditorBox.AffectAll">
            <summary>
            UI
            </summary>
        </member>
        <member name="F:CurveEditorBox.CurveEditorBox.SnapToGrid">
            <summary>
            UI
            </summary>
        </member>
        <member name="F:CurveEditorBox.CurveEditorBox._curveType">
            <summary>
            UI
            </summary>
        </member>
        <member name="F:CurveEditorBox.CurveEditorBox.Colors">
            <summary>
            Color Curve Preview Properties
            </summary>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.InitCurves">
            <summary>
            Internal init function
            </summary>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.GetSelectedCurve">
            <summary>
            UI
            </summary>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.SelectCurve(System.Int32)">
            <summary>
            UI
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.SelectCurve(CSharpFramework.BaseTypes.ColorCurves.ColorType)">
            <summary>
            UI
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.TriggerCurveChanged">
            <summary>
            UI
            </summary>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.ResetCurvePresetName">
            <summary>
            This function is triggered, when the user changes some points in the curve.
            The name of the preset will then be resetted.
            </summary>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.OnSizeChanged(System.EventArgs)">
            <summary>
            UI
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.RemoveCurvePoint">
            <summary>
            UI
            </summary>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.SetTangentType(System.Boolean)">
            <summary>
            UI
            </summary>
            <param name="IsLinear"></param>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.CalculateTangents(System.Boolean,System.Boolean)">
            <summary>
            UI
            </summary>
            <param name="calcAll"></param>
            <param name="alpha"></param>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.CalculatePoints(System.Int32[])">
            <summary>
            UI
            </summary>
            <param name="Values"></param>
        </member>
        <member name="M:CurveEditorBox.CurveEditorBox.ExportCurve">
            <summary>
            UI
            </summary>
        </member>
        <member name="P:CurveEditorBox.CurveEditorBox.WrapAround">
            <summary>
            Determines if the position on the leftmost and the rightmost curve 
            point should be kept in sync.
            </summary>
        </member>
        <member name="P:CurveEditorBox.CurveEditorBox.CurveType">
            <summary>
            Determine if the CurveEditor display RGBA Curves
            </summary>
        </member>
        <member name="P:CurveEditorBox.CurveEditorBox.GridMaximum">
            <summary>
            Gets or Set the maximum Grid Number
            </summary>
        </member>
        <member name="P:CurveEditorBox.CurveEditorBox.GridTimeMaximum">
            <summary>
            Gets or Set the maximum Grid Time
            </summary>
        </member>
        <member name="P:CurveEditorBox.CurveEditorBox.GridLines">
            <summary>
            Gets or Sets the Number of Grid Lines
            </summary>
        </member>
        <member name="P:CurveEditorBox.CurveEditorBox.PointOffset">
            <summary>
            Gets or Sets the Offset between Points
            </summary>
        </member>
        <member name="P:CurveEditorBox.CurveEditorBox.ShowAlpha">
            <summary>
            UI
            </summary>
        </member>
        <member name="P:CurveEditorBox.CurveEditorBox.Curve">
            <summary>
            Gets or Sets one single PointList
            </summary>
        </member>
        <member name="P:CurveEditorBox.CurveEditorBox.ColorCurves">
            <summary>
            Gets or Sets the Color Curves
            </summary>
        </member>
        <member name="P:CurveEditorBox.CurveEditorBox.Linear">
            <summary>
            Gets or Sets the Tangent Type of the Selected Point or the next created Point
            </summary>
        </member>
        <member name="P:CurveEditorBox.CurveEditorBox.EditorHintString">
            <summary>
            String that is displayed in the editor to give a hint what curve is currently displayed
            </summary>
        </member>
        <member name="E:CurveEditorBox.CurveEditorBox.OnCurveChanged">
            <summary>
            Event that is triggered when the value changed
            </summary>
        </member>
        <member name="T:CurveEditorBox.CurveEditorBox.OnCurveChangedEventHandler">
            <summary>
            Delegate
            </summary>
        </member>
        <member name="T:CSharpFramework.View.HotSpotPushButton">
            <summary>
            Hot spot for push buttons
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotPushButton.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.UInt32,System.UInt32,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="owner"></param>
            <param name="bitmapfile"></param>
            <param name="iColorNormal"></param>
            <param name="iColorHigh"></param>
            <param name="fSize"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotPushButton.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.UInt32,System.UInt32,System.UInt32,System.Single)">
            <summary>
            This constructor overload takes an additional transparency key for the icon image
            </summary>
            <param name="owner"></param>
            <param name="bitmapfile"></param>
            <param name="iTranspColor"></param>
            <param name="iColorNormal"></param>
            <param name="iColorHigh"></param>
            <param name="fSize"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotPushButton.OnDragBegin(CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotPushButton.OnDrag(CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotPushButton.OnDragEnd(CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotPushButton.IsMouseOver(System.Single,System.Single)">
            <summary>
            Overridden function
            </summary>
            <param name="fMouseX"></param>
            <param name="fMouseY"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.View.HotSpotPushButton.MouseOverCursor">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotPushButton.MouseOver">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="T:CSharpFramework.View.HotSpotColorButton">
            <summary>
            Hotspot button class that pops up a ColorDialog and sets the color on the specified owner shape's property
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotColorButton.#ctor(CSharpFramework.Shapes.Shape3D,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="owner">Owner shape</param>
            <param name="propertyName">paroperty name of the owner shape. Must be a Color property</param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotColorButton.EvaluatePosition">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotColorButton.RenderHotSpot(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotColorButton.OnClicked(CSharpFramework.VisionViewBase)">
            <summary>
            Open the color dialog and set the value via action
            </summary>
            <param name="view"></param>
        </member>
        <member name="P:CSharpFramework.View.HotSpotColorButton.CurrentColor">
            <summary>
            Returns the current color (property of the owner shape)
            </summary>
        </member>
        <member name="T:CSharpFramework.View.DummyEditorConsole">
            <summary>
            Empty implementation of IEditorConsole
            </summary>
        </member>
        <member name="M:CSharpFramework.View.DummyEditorConsole.Print(System.String)">
            <summary>
            Overridden function (does not do anything)
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:CSharpFramework.View.DummyEditorConsole.PrintWarning(System.String)">
            <summary>
            Overridden function (does not do anything)
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:CSharpFramework.View.DummyEditorConsole.PrintError(System.String)">
            <summary>
            Overridden function (does not do anything)
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:CSharpFramework.View.DummyEditorConsole.ParseMessage(System.String)">
            <summary>
            Overridden function (does not do anything)
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:CSharpFramework.Tests.TestAction">
            <summary>
            test action
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.TestAction.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="mask"></param>
        </member>
        <member name="M:CSharpFramework.Tests.TestAction.Do">
            <summary>
            IAction function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.TestAction.Undo">
            <summary>
            IAction function
            </summary>
        </member>
        <member name="F:CSharpFramework.Tests.TestAction.iResultMask">
            <summary>
            IAction function
            </summary>
        </member>
        <member name="P:CSharpFramework.Tests.TestAction.ShortName">
            <summary>
            IAction function
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.ActionStackTest">
            <summary>
            Summary description for ActionStackTest.
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.ActionStackTest.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.ActionStackTest.TestStack">
            <summary>
            test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.ActionStackTest.TestGroup">
            <summary>
            test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.ActionStackTest.TestLimit">
            <summary>
            test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.ActionStackTest.TestDependentActions">
            <summary>
            Test
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.ActionStackTest.CollectDependentActions(System.Object,CSharpFramework.IAction,CSharpFramework.ActionCollection,CSharpFramework.ActionCollection)">
            <summary>
            Test
            </summary>
            <param name="sender"></param>
            <param name="action"></param>
            <param name="dependentPreActionsOut"></param>
            <param name="dependentPostActionsOut"></param>
        </member>
        <member name="T:CSharpFramework.ShapeCollection">
            <summary>
            ShapeCollection :  A collection of shapes
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.Insert(System.Int32,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Collection function
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.GetAt(System.Int32)">
            <summary>
            Collection function
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.Clone">
            <summary>
            Performs a deep copy on the shape collection, i.e. also clones the shapes in it
            </summary>
            <returns>new collection</returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.CloneForClipboard">
            <summary>
            This version only clones the shapes that have the CanCopyPaste flag set
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.GetUniqueRootShapes">
            <summary>
            Returns a collection of unique root shapes with all shapes filtered out that do occur as a child shape of another one
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.ShallowCopy">
            <summary>
            Returns a new shape collection with same references in it
            </summary>
            <returns>new collection (with same shapes)</returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.GetClipboardData">
            <summary>
            Returns a clipboard data object with a "nice" name
            </summary>
            <returns>A new clipboard data object</returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.ContainsRecursive(CSharpFramework.ShapeCollection,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Indicates whether the passed shape is in the collection or child of any shape in the collection
            </summary>
            <param name="shapes"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.ContainsRecursive(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Indicates whether the passed shape is in this collection or child of any shape in the collection
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.StoreShapePositionArray">
            <summary>
            Creates a copy of all shape positions and puts them into an array. This is useful to store old positions
            before draggings shapes around with the gizmo
            </summary>
            <returns>Position array with same size as input collection</returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.StoreShapeOrientationArray">
            <summary>
            Creates a copy of all shape orientations and puts them into an array. This is useful to store old orientations
            before draggings shapes around with the gizmo
            </summary>
            <returns>Orientation array with same size as input collection. Vector xyz matches Euler angles</returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.StoreShapeScalingArray">
            <summary>
            Creates a copy of all shape scalings and puts them into an array. This is useful to store old scalings
            before draggings shapes around with the gizmo
            </summary>
            <returns>Scaling array with same size as input collection.</returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.EnumChildIndices">
            <summary>
            Enumerates the shapes in this collection and writes the index to the ChildIndex member
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.RemoveChildren">
            <summary>
            Removes all shapes in this collection that have one of their parents in the collection as well.
            E.g. used to filter the shape collection before deleting the shapes.
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.FindByLocalID(System.UInt32,System.Boolean)">
            <summary>
            Finds a shape in this collection by its 32bit local ID. Optionally searches in children
            </summary>
            <param name="iID"></param>
            <param name="bRecurseChildren"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.FindByName(System.String,System.Boolean)">
            <summary>
            Finds a shape in this collection by its name (case sensitive). Optionally searches in children
            </summary>
            <param name="name"></param>
            <param name="bRecurseChildren"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.SameShapes(CSharpFramework.ShapeCollection,CSharpFramework.ShapeCollection)">
            <summary>
            Indicates whether both collections contain the same shapes (regardless of order)
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.EvaluateUseShapeUnLockingPreference">
            <summary>
            Determines whether shapes should be locked or unlocked.
            This function returns true if at least one shape has the HintFlags_e.ManualLock hint flag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.SetHintFlag(CSharpFramework.Shapes.ShapeBase.HintFlags_e,System.Boolean,System.Boolean)">
            <summary>
            Sets or removes the passed flag on all shapes in this list
            </summary>
            <param name="flag"></param>
            <param name="bStatus"></param>
            <param name="bRecurseChildren"></param>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.IsNameInCollectionUnique(System.String,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Returns true if there is no other shape in the child collection of the same name
            </summary>
            <param name="wantedName"></param>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.GetRelevantOperationsMenuItem">
            <summary>
            Returns a menu item for the relevant operations of this shape collection
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.OnRelevantOperationClick(System.Object,System.EventArgs)">
            <summary>
            Gets triggered by right-click context menu, relevant operations
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:CSharpFramework.ShapeCollection.AnyCanCopyPaste">
            <summary>
            Indicates whether any shape in this collection has the CanCopyPaste flag set
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeCollection.CanCopyPaste">
            <summary>
            Indicates whether all shapes in the collection can be copied/pasted
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeCollection.FlatList">
            <summary>
            Creates a flat list of shapes (i.e. recursively add all children)
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeCollection.FlatList3D">
            <summary>
            Creates a flat list of Shapes3D. Ignores all other simple shapes
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeCollection.Center">
            <summary>
            Calculates the center of all (root-) shapes
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeCollection.BoundingBox">
            <summary>
            Returns the bounding box union of all shapes. The returned box is not null, but might be invalid
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeCollection.RelevantOperations">
            <summary>
            Returns a list of strings that specify names of relevant operations that work on all shapes of this collection
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeCollection.Modifiable">
            <summary>
            Implements ISceneObject by forwarding to each shape in this collection
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeCollection.Modified">
            <summary>
            Implements ISceneObject by forwarding to each shape in this collection
            </summary>
        </member>
        <member name="T:CSharpFramework.ShapeCollection.PasteHint">
            <summary>
            Provides hints for pasting shapes
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.PasteHint.#ctor(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Constructor
            </summary>
            <param name="parent">parent of the pasted shapes</param>
        </member>
        <member name="F:CSharpFramework.ShapeCollection.PasteHint._parent">
            <summary>
            Private field
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeCollection.PasteHint.Parent">
            <summary>
            Gets the parent
            </summary>
        </member>
        <member name="T:CSharpFramework.ShapeCollection.RelevantOperationMenuItem">
            <summary>
            Nested menu item class that has a special member for storing the full path operation name
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.RelevantOperationMenuItem.#ctor(System.String,System.EventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="onClick"></param>
        </member>
        <member name="M:CSharpFramework.ShapeCollection.RelevantOperationMenuItem.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeCollection.RelevantOperationMenuItem.OperationName">
            <summary>
            Full path name of the relevant operation
            </summary>
        </member>
        <member name="T:CSharpFramework.IEngineShapeInstance">
            <summary>
            Interface for an engine instance. Every Shape has an engine instance that represents the actual object in the engine
            The engine instance implementation code is usually written in managed C++ code to access native engine code.
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.GetNativeObject">
            <summary>
            Return a pointer to the native object (e.g. native entity). Rarely used by the editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.IsNativeObject(System.IntPtr)">
            <summary>
            Tests whether the passed pointer matches the native object pointer (using virtual GetNativeObject function)
            </summary>
            <param name="checkPtr"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.OnPostEngineInstanceCreation">
            <summary>
            This function is called for every shape after all engine instances of the scene have been created
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.SetUniqueID(System.UInt64)">
            <summary>
            Sets the 64-bit unique ID of the shape. The upper 32bit are layer specific (name hash) and the lower
            32 bits are subsequent shape ids
            </summary>
            <param name="iID"></param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.SetUserDataString(System.String)">
            <summary>
            Overridable that takes the user data of the shape. Default implementation is just empty
            </summary>
            <param name="userData"></param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.SetParentZone(CSharpFramework.Scene.Zone)">
            <summary>
            Overridable that is called whenever the parent zone of an object changes
            </summary>
            <param name="zone"></param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.CanAttachComponent(CSharpFramework.Scene.ShapeComponent,System.String@)">
            <summary>
            Override this function to determine whether components of specific type can be attached to this instance or not.
            </summary>
            <param name="compType"></param>
            <param name="sErrorMsgOut">Reason for failure in case of a failure</param>
            <returns>TRUE if the component can be added,otherwise FALSE</returns>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.OnAttachComponent(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            This overridable is called when vForge attaches a component instance to this engine instance.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.OnRemoveComponent(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            This overridable is called when vForge de-attaches a component instance from this engine instance.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.SetVisible(System.Boolean)">
            <summary>
            Set the visible state of the engine instance
            </summary>
            <param name="bStatus">visible or not</param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.SetPosition(System.Single,System.Single,System.Single)">
            <summary>
            Set the new position of the engine instance
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.GetPosition(CSharpFramework.Math.Vector3F@)">
            <summary>
            Gets the current position of the engine instance and stores it in the passed
            "enginePosition" parameter. If no position readback is supported by the
            engine instance then false is returned.
            
            When overriding this function you have to return false if reading back the position
            is not supported by your engine instance
            </summary>
            <param name="enginePosition">new engine position (only valid true is returned)</param>
            <returns>true if the position has been read, false if not</returns>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.SetOrientation(System.Single,System.Single,System.Single)">
            <summary>
            Sets the new Euler orientation of the engine instance
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.GetOrientation(CSharpFramework.Math.Vector3F@)">
            <summary>
            Gets the current orientation of the engine instance and stores it in the passed
            "engineOrientation" parameter. If no orientation readback is supported by the
            engine instance then false is returned.
            
            When overriding this function you have to return false if reading back the orientation
            is not supported by your engine instance
            </summary>
            <param name="engineOrientation">the engine instance orientation</param>
            <returns>true if the orientation has been read, false if not</returns>
            
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.SetScaling(System.Single,System.Single,System.Single)">
            <summary>
            Sets the scaling factors for the engine instance
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.SetObjectKey(System.String)">
            <summary>
            Optional; Sets the new object key
            </summary>
            <param name="newKey"></param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.GetNativeLinks(CSharpFramework.Shapes.Shape3D,CSharpFramework.Shapes.LinkCollection,CSharpFramework.Shapes.LinkCollection,CSharpFramework.Shapes.LinkCollection)">
            <summary>
            Optional; Override this function to put link sources and targets into the collections
            </summary>
            <param name="pOwner">The owner shape</param>
            <param name="pSrcCollection">Collection to fill with link sources</param>
            <param name="pTgtCollection">Collection to fill with link targets</param>
            <param name="pBiDirCollection">Collection to fill with bi-directional links</param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.TraceShape(CSharpFramework.Shapes.Shape3D,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.ShapeTraceResult@)">
            <summary>
            Perform a trace test for picking/drop to floor. See other virtual overload that takes a ShapeTraceMode_e parameter
            </summary>
            <param name="ownerShape">Shape this instance belongs to</param>
            <param name="rayStart">Ray start position (world space)</param>
            <param name="rayEnd">Ray end position (world space)</param>
            <param name="result">Trace result to be filled in</param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.GetLocalBoundingBox(CSharpFramework.Math.BoundingBox@)">
            <summary>
            Get the local bounding box, e.g. (-10,-10,-10, 10,10,10). Usually from the model
            </summary>
            <param name="bbox">bounding box class to fill in</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.TraceShape(CSharpFramework.Shapes.Shape3D,CSharpFramework.ShapeTraceMode_e,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.ShapeTraceResult@)">
            <summary>
            Virtual overridable function that additionally takes a ShapeTraceMode_e mode enum. All editor functions call this function.
            By default, this function calls the pure virtual TraceShape function without a mode
            </summary>
            <param name="ownerShape">Shape this instance belongs to</param>
            <param name="mode">trace mode. E.g. picking or drop-to-floor</param>
            <param name="rayStart">Ray start position (world space)</param>
            <param name="rayEnd">Ray end position (world space)</param>
            <param name="result">Trace result to be filled in</param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method 
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.Dispose">
            <summary>
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.DisposeObject">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.OnAttachToParent(CSharpFramework.IEngineShapeInstance)">
            <summary>
            Attaches the instance to a new parent.
            Can be implemented by derived classes to support parenting.
            </summary>
            <param name="newParent">New parent of the instance</param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.OnDetachFromParent">
            <summary>
            Detaches the instance from the current parent
            Can be implemented by derived classes to support parenting.
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.OnExport(CSharpFramework.Scene.SceneExportInfo)">
            <summary>
            This abstract function is called at export time of the scene.
            </summary>
            <param name="info">provides export information</param>
            <returns>false if an error occurs</returns>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.OnBeforeExport(CSharpFramework.Scene.SceneExportInfo)">
            <summary>
            Overridable that is called for all involved shapes before the scene (or parts of it) is exported
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.OnAfterExport(CSharpFramework.Scene.SceneExportInfo)">
            <summary>
            Overridable that is called for all involved shapes after the scene (or parts of it) has been exported
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.GetDependencies(CSharpFramework.Scene.ResourceSnapshotInfo)">
            <summary>
            Overridable to collect the resource dependencies from the native shape
            </summary>
            <param name="info">The info object has a member that can be casted to a native VResourceSnapshot instance</param>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.OnRecomputeVisibility">
            <summary>
            Overridable to reassign the native shape to visibility zones
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineShapeInstance.OnRenderHook(CSharpFramework.Shapes.ShapeBase,System.Int32)">
            <summary>
            This callback is called for every engine instance for which the owner shape has the WantsNativeRenderHookCallback property set.
            This callback is called from inside a renderloop and thus allows for direct mesh render calls through the native engine API.
            </summary>
            <param name="owner">The owner shape</param>
            <param name="iConstant">The renderhook constant. Currently it is only called for the native constant VIS_RENDERORDER_PRE_PARTICLES</param>
        </member>
        <member name="P:CSharpFramework.IEngineShapeInstance.SupportsComponents">
            <summary>
            Override this function to enable components for this engine instance
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.SceneExportInfo">
            <summary>
            Helper class that gets passed to every shape at export time. Keeps a pointer to the native archive (VArchive)
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.ExportType">
            <summary>
            Defines the export type
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.AbsoluteFilename">
            <summary>
            The absolute filename of the export file
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.RelativeFilename">
            <summary>
            The relative filename of the export file
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.AbsoluteExportDataFolder">
            <summary>
            Absolute directory for additional data (i.e. vscene_data subfolder)
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.NativeShapeArchivePtr">
            <summary>
             This member can be casted to VArchive
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.NativeExporterPtr">
            <summary>
            This mamber can be casted to IVisSceneExporter_cl
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.RelevantExportZones">
            <summary>
            Points to a collection of zones that are relevant for exporting
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.RelevantEmbeddedZones">
            <summary>
            Points to a collection of zones that should be embedded as references into the main export
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.RelevantShapes">
            <summary>
            Collection that holds all shapes that are to be exported (flat list)
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.CurrentZone">
            <summary>
            If export mode is vzone, then this points to the zone in question
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.IncludeVisibility">
            <summary>
            Flag that indicates whether the scene export should export visibility information as well
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.EmbedCustomLitFile">
            <summary>
            Flag that determines whether the .lit file stored in the layer's directory should be embedded into the scene export so
            that the VSceneLoader triggers the Vision::Callbacks.OnLightmapFileLoaded callback at loading time.
            This flag is not necessary for standard scene lightmapping (e.g. of static meshes)
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.LastErrorMessage">
            <summary>
            Contains the last error message to be displayed to the user, in case the export failed
            or was canceled.
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.ExportFlags">
            <summary>
            Bitflags that determine which portions of the scene should be exported. Casted to SceneExportFlags_e
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportInfo.TriggerOnBeforeExport">
            <summary>
            Used internally by misc export helper functions
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportInfo.TriggerOnAfterExport">
            <summary>
            Used internally by misc export helper functions
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportInfo.AddPluginInfo(CSharpFramework.Serialization.EditorPluginInfo)">
            <summary>
            This function may be called during export to add a plugin dependency. This function handles info==null gracefully.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportInfo.GetUniqueNativePluginNames(System.Collections.Specialized.StringCollection)">
            <summary>
            Builds a list of unique plugin names from the UniquePluginInfos list
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportInfo.GetRelevantExportShapes(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Static helper function that collects all shapes under the root that should be included into an export step
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportInfo.UniquePluginInfos">
            <summary>
            Returns the unique list generated by calls of AddPluginInfo. Each entry is of type EditorPluginInfo
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.SceneExportInfo.ExportType_e">
            <summary>
            Determines the export target
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.ExportType_e.VScene">
            <summary>
            Save a vscene file
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.ExportType_e.VZone">
            <summary>
            Export to vzone file
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.ExportType_e.VPrefab">
            <summary>
            Export to binary prefab
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportInfo.ExportType_e.Custom">
            <summary>
            Export is triggered by custom code
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.SceneExportInfo.CollectPluginInfoVisitor">
            <summary>
            Visitor class to traverse the shape hierarchy and call SceneExportInfo.AddPluginInfo for every shape
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportInfo.CollectPluginInfoVisitor.#ctor(CSharpFramework.Scene.SceneExportInfo)">
            <summary>
            Constructor
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportInfo.CollectPluginInfoVisitor.Visit(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Overridden function
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Scene.SceneExportInfo.CollectExportRelevantShapes">
            <summary>
            This visitor class collects all shapes under the root that should be included into an export step
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ResourceSnapshotInfo">
            <summary>
            Helper class that gets passed to every shape in the GetDependencies function
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ResourceSnapshotInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ResourceSnapshotInfo.AbsoluteFilename">
            <summary>
            The absolute filename of the snapshot file
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ResourceSnapshotInfo.NativeResourceSnapshotPtr">
            <summary>
             This member can be casted to VResourceSnapshot
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ResourceSnapshotInfo.CurrentZone">
            <summary>
            This can be set to the owner zone. It is used by ExportHelper::EndResourceSnapshot to call GetDependencies on the native counterpart
            </summary>
        </member>
        <member name="T:CSharpFramework.Helper.StringHelper">
            <summary>
            Helper class that provides useful static string helper functions
            </summary>
        </member>
        <member name="M:CSharpFramework.Helper.StringHelper.IsValidName(System.String)">
            <summary>
            Check if a string is a valid name.
            
            That is, it has no special characters,
            but it can have underscores, numbers, and spaces
            however, not at the beginning
            </summary>
            <param name="name">name that should be validated</param>
            <returns>true if the name is valid</returns>
        </member>
        <member name="M:CSharpFramework.Helper.StringHelper.IsValidName(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Check if a string is a valid name.
            
            That is, it has no special characters,
            but it can optionally have underscores, numbers, and spaces
            however, not at the beginning
            </summary>
            <param name="name">name that should be validated</param>
            <param name="bSpace">wether spaces are allowed</param>
            <param name="bNumber">wether numbers are allowed</param>
            <param name="bUnderscore">wether underscores are allowed</param>
            <returns>true if the name is valid</returns>
        </member>
        <member name="M:CSharpFramework.Helper.StringHelper.FindString(System.String[],System.String,System.Boolean)">
            <summary>
            Helper function to search for a string occurrence in the passed array. Returns the lit index or -1
            </summary>
            <param name="array"></param>
            <param name="name"></param>
            <param name="bIgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.StringHelper.ToStringArray(System.Collections.Specialized.StringCollection)">
            <summary>
            Converts the passed string collection into an array (StringCollection is missing that function)
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.StringHelper.SameStrings(System.String[],System.String[],System.Boolean,System.Boolean)">
            <summary>
            Compares two string arrays
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="bIgnoreCase"></param>
            <param name="bIgnoreOrder"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.StringHelper.ComputeStringHash32(System.String)">
            <summary>
            Computes a string hash that is compatible with string.GetHashCode on WIN32 platforms. This function should be used when the same hash should be evaluated
            in the 32 and 64 bit version (note this is different for string.GetHashCode)
            </summary>
            <param name="inStr"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.StringHelper.AreEqualIgnoreCase(System.String,System.String)">
            <summary>
            Performs a case insensitive string comparison
            </summary>
            <param name="str1">first string</param>
            <param name="str2">second string</param>
            <returns>true of the two strings are equal (case insensitive)</returns>
        </member>
        <member name="M:CSharpFramework.Helper.StringHelper.StringHasNumber(System.String,System.Int32@)">
            <summary>
            Checks if a decimal number is present anywhere in given string.
            </summary>
            <param name="str">string to check</param>
            <param name="numOut">stores number in variable if number found</param>
            <returns>true if number was located in string, false otherwise</returns>
        </member>
        <member name="M:CSharpFramework.Helper.StringHelper.CompareStringsNaturally(System.String,System.String)">
            <summary>
            Performs a string comparison where existing numbers area treated in natural order.
            </summary>
            <param name="str1">first string</param>
            <param name="str2">second string</param>
            <returns>signed number indicating string difference (0 for equal)</returns>
        </member>
        <member name="T:CSharpFramework.Helper.IStringEditor">
            <summary>
            Interface that can be used for string editing
            </summary>
        </member>
        <member name="M:CSharpFramework.Helper.IStringEditor.EditString(System.Object,System.String)">
            <summary>
            Key function of this interface. Gets called to obtain a new string
            </summary>
            <param name="instance">The instance that requests a new string</param>
            <param name="current">The current string</param>
            <returns>The new string</returns>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicClassManager">
            <summary>
            DEPRECATED. Use DynamicProperties instead
            
            Allows the registration of property collection classes via class description and offers the
            possibility to create instances for the registered classes. Also provides functionality for fixing
            property collections which refer to an old assembly (e.g. old entity plugin).
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.#ctor(System.String)">
            <summary>
            Constructor that takes the name of the class manager
            </summary>
            <param name="name">Internal name</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.AddClass(CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition)">
            <summary>
            Adds a class definition to the manager
            </summary>
            <param name="def">Class to add</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.CreateEnum(System.String,System.Type,System.String[],System.Object[])">
            <summary>
            Creates a new enum in the dynamic assembly
            </summary>
            <param name="name">Name of the enum type</param>
            <param name="valueType">Type of the enum values (e.g. int)</param>
            <param name="names">Names of the enum constants</param>
            <param name="values">Values of the enum constants</param>
            <returns>Created enum type</returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.CreateInstance(System.String)">
            <summary>
            Get a new instance for a class and initialize the property values to the default values
            of the class. Throws an exception in case the passed class is marked as missing.
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.CreateFixedInstance(System.Object)">
            <summary>
            Creates a new instance for the passed instance and copies the values into the new instance.
            Also adds the class as a missing class if it doesn't exist in the manager yet.
            New properties are initializes with the default value.
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.GetClassByName(System.String)">
            <summary>
            Finds a class definition by class name. Returns null if class does not exist
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.Exists(System.String)">
            <summary>
            Checks whether a class of specified name exists in this manager
            </summary>
            <param name="classname"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinitions">
            <summary>
            Get the collection of class definitions
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicClassManager.ClassNames">
            <summary>
            Access the class names as an array of strings
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicClassManager.AssemblyBuilder">
            <summary>
            Get the instance of the assembly builder
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicClassManager.ClassNotFoundException">
            <summary>
            Exception triggered if a class is not found
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.ClassNotFoundException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="className"></param>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicClassManager.ClassAlreadyExistsException">
            <summary>
            Exception triggered if a class is tried to be added that already exists
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.ClassAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="className"></param>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicClassManager.ClassMarkedAsMissingException">
            <summary>
            Exception triggered if an instance of a class should be created that is marked as "missing"
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.ClassMarkedAsMissingException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="className"></param>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition">
            <summary>
            Describes a class and it's properties
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.#ctor(System.String)">
            <summary>
            Constructor that takes the class name
            </summary>
            <param name="name">name of the class</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.AddProperty(System.String,System.Type)">
            <summary>
            Adds a property to the class
            </summary>
            <param name="name">Name of the property</param>
            <param name="type">The type of the property</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.AddProperty(System.String,System.Type,System.String,System.Object)">
            <summary>
            Adds a property to the class
            </summary>
            <param name="name">Name of the property</param>
            <param name="type">The type of the property</param>
            <param name="description">A description string for the property</param>
            <param name="defaultValue">Object that represents the default value</param>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.Name">
            <summary>
            Get the name of the class
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.Missing">
            <summary>
            Get (or set) the "missing" status of a class
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.Properties">
            <summary>
            Get the collection of properties
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.PropertyDefinition">
            <summary>
            Class that represents a single property
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.PropertyDefinition.#ctor(System.String,System.Type,System.String,System.Object)">
            <summary>
            Constructor that takes the property parameters
            </summary>
            <param name="name">Name of the property</param>
            <param name="type">Type of the property</param>
            <param name="description">Description string for the property</param>
            <param name="defaultValue">Object that represents the default value</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.PropertyDefinition.AddAttribute(CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.AttributeDefinition)">
            <summary>
            Adds a single attribute to this property
            </summary>
            <param name="attrDef"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.PropertyDefinition.AddFileBrowseAttribute(System.String[])">
            <summary>
            Helper function to add a file filter attribute to this property
            </summary>
            <param name="fileFilters">string array of file filters to use</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.PropertyDefinition.AddBitmapBrowseAttribute">
            <summary>
            Helper function to add a bitmap browse editor attribute to this property
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.PropertyDefinition.AddModelBrowseAttribute">
            <summary>
            Helper function to add a model file browse editor attribute to this property
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.PropertyDefinition.AddAnyFileBrowseAttribute">
            <summary>
            Helper function to add a model file browse editor attribute to this property
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.PropertyDefinition.AddSceneObjectKeyAttribute(CSharpFramework.IEngineManager.ObjectKeyType_e)">
            <summary>
            Helper function to add a dropdown attribute that enumerates key strings of special scene objects such as entities
            </summary>
            <param name="types"></param>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.PropertyDefinition.Name">
            <summary>
            Get name of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.PropertyDefinition.Type">
            <summary>
            Get type of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.PropertyDefinition.Description">
            <summary>
            Get description of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.PropertyDefinition.DefaultValue">
            <summary>
            Get the default value of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicClassManager.ClassDefinition.PropertyDefinition.AttributDefinitions">
            <summary>
            Returns the list of custom property attributes
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.TextureAtlasEditorDlg.#ctor(System.Boolean)">
            <summary>
            Creates a new atlas dialog
            </summary>
            <param name="bFullProperties">if true, additional atlas properties (texture, blendmode,..) are shown in a property grid</param>
        </member>
        <member name="F:CSharpFramework.Dialogs.TextureAtlasEditorDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.TextureAtlasEditorDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.TextureAtlasEditorDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.LayerLockDlg">
            <summary>
            This dialog is opened on scene load when specified in the project settings (Project.LayerLocking).
            When this setting is set to "Lock All Layers" this dialog won't be shown and all layer will be
            locked automatically (if not locked by any other user).
            
            The dialog lists all layers and allows the user to lock them (if not locked by any other user). 
            The locking is done directly when checking the checkbox of the respective layer. The dialog only
            provides an OK button as canceling the operation doesn't make much sense here.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.LayerLockDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.LayerLockDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.LayerLockDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.IEngineResourceDlg">
            <summary>
            IEngineResourceDlg : Dialog that shows the engine resource. This class still has some virtual functions that
            are implemented by managed c++ code (class EngineResourceDlg) to access the Vision Engine
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.IEngineResourceDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.IEngineResourceDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.IEngineResourceDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.IEngineResourceDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.IEngineResourceDlg.GetManagerCount">
            <summary>
            Should be overridden to access the number of resource manager
            </summary>
            <returns>Number of resource managers</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.IEngineResourceDlg.GetManagerInfo(System.Int32,CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo)">
            <summary>
            Should be overridden to get information of manager #iIndex
            </summary>
            <param name="iIndex">The index of the resource manager</param>
            <param name="info">Info structure to be filled in</param>
            <returns>true if manager is valid and should show up in the list view</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.IEngineResourceDlg.PurgeAll">
            <summary>
            Overridable to purge all manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.IEngineResourceDlg.UpdateResourceManager">
            <summary>
            Updates the list view
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo">
            <summary>
            Class that provides information about a single resource manager
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo.iListIndex">
            <summary>
            list index
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo.ManagerName">
            <summary>
             Name of the resource
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo.eType">
            <summary>
            Manager type
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo.iColorRef">
            <summary>
            Display color
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo.iResourceCount">
            <summary>
            Number of resources
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo.iLoadedCount">
            <summary>
            Number of loaded resources
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo.iMemSize">
            <summary>
            Memory size
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo.iMemLimit">
            <summary>
            Memory limit
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo.ResourceManagerType_e">
            <summary>
            manager type
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo.ResourceManagerType_e.System">
            <summary>
            System resource manager
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo.ResourceManagerType_e.Custom">
            <summary>
            Custom defined manager
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo.ResourceManagerType_e.Summary">
            <summary>
            Just a summary entry
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerListItem">
            <summary>
            Special list view item that represents a resource manager. It has some sub items
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerListItem.FormatMemoryShort(System.Int32)">
            <summary>
            Formats a byte count to nice short string, such as 5.1MB. TODO: Put this into central place.
            </summary>
            <param name="iByteCount">byte count to format into string</param>
            <returns>formatted string</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerListItem.FormatMemory(System.Int32)">
            <summary>
            Formats a byte count to nice string using format 1,000,000. TODO: Put this into central place.
            </summary>
            <param name="iByteCount">byte count to format into string</param>
            <returns>formatted string</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerListItem.#ctor(CSharpFramework.Dialogs.IEngineResourceDlg.ResourceManagerInfo)">
            <summary>
            Creates a list item from info structure
            </summary>
            <param name="info">info of the resource manager</param>
        </member>
        <member name="F:CSharpFramework.Dialogs.BinaryChoiceDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.BinaryChoiceDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.BinaryChoiceDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.InteractiveHelpControl">
            <summary>
            The InteractiveHelpControl displays help pages.
            
            There are three protocols that can be displayed:
              - ihelp-app: Help pages for the application
              - ihelp-proj: Help pages for the current project
              - ihelp-cmd: Commands to control the iHelp System
              
            Within an iHelp page it is possible to call the ScriptObject
            via the external of javascript.
            Example:  javascript:external.ShowError();
                      Shows the error page of the current help page.
            </summary>
        </member>
        <member name="T:CSharpFramework.Help.IiHelp">
            <summary>
            The Interface for the iHelp System.
            The interactive help system implements this interface.
            </summary>
        </member>
        <member name="M:CSharpFramework.Help.IiHelp.ShowError">
            <summary>
            Show the default error page for this help page
            </summary>
        </member>
        <member name="M:CSharpFramework.Help.IiHelp.ShowError(System.String)">
            <summary>
            Show the given error page for this help page
            </summary>
            <param name="errorURL">html page which is displayed</param>
        </member>
        <member name="P:CSharpFramework.Help.IiHelp.ActivePage">
            <summary>
            The help page shown in the iHelp System
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.InteractiveHelpControl._activePage">
            <summary>
            The active help page of the system
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.InteractiveHelpControl._defaultErrorHtmlCode">
            <summary>
            This html code is shown if no other error url is available
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.InteractiveHelpControl._defaultErrorUrl">
            <summary>
            The default error url is displayed if no url for a particular page is available
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.InteractiveHelpControl._pageNotFoundUrl">
            <summary>
            This url is displayed if a page was not found
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.InteractiveHelpControl._currentApplicationHelpPath">
            <summary>
            The current path of the application help page
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.InteractiveHelpControl._rootApplicationHelpPath">
            <summary>
            The root path of the application help page
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.InteractiveHelpControl._currentProjectHelpPath">
            <summary>
            The current path of the project help page
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.InteractiveHelpControl._rootProjectHelpPath">
            <summary>
            The root path of the project help page
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.InteractiveHelpControl._internetExplorerControl">
            <summary>
            The browser control to display the help pages
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.InteractiveHelpControl._history">
            <summary>
            The history of the browser
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.InteractiveHelpControl._isErrorPage">
            <summary>
            Is the error html code of the page currently shown
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.InteractiveHelpControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.InteractiveHelpControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.InteractiveHelpControl.Reload">
            <summary>
            Reload the html from the active page and refresh the view
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.InteractiveHelpControl.OpenApplicationHelpPage(System.String)">
            <summary>
            Open application help page
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.InteractiveHelpControl.OpenProjectHelpPage(System.String)">
            <summary>
            Open project help page
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.InteractiveHelpControl.Back">
            <summary>
            Go back to the last viewed page (so far, just one)
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.InteractiveHelpControl.ShowError">
            <summary>
            Show the error page for this help page
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.InteractiveHelpControl.ShowError(System.String)">
            <summary>
            Show a custom error page for this help page
            </summary>
            <param name="errorUrl">error page to be displayed</param>
        </member>
        <member name="M:CSharpFramework.Controls.InteractiveHelpControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.InteractiveHelpControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.InteractiveHelpControl.openHelpPage(System.String,System.String,System.String)">
            <summary>
            Open help page
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.InteractiveHelpControl.ScriptObject">
            <summary>
            This object is accessable through javascript
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.InteractiveHelpControl.ActivePage">
            <summary>
            The active iHelp page
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.InteractiveHelpControl.RootApplicationHelpPath">
            <summary>
            The root of help for the application
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.InteractiveHelpControl.CurrentApplicationHelpPath">
            <summary>
            The current path of help for the application
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.InteractiveHelpControl.RootProjectHelpPath">
            <summary>
            The root of help for the project
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.InteractiveHelpControl.CurrentProjectHelpPath">
            <summary>
            The current path of help for the project
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.InteractiveHelpControl.DefaultErrorUrl">
            <summary>
            The default error page
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.InteractiveHelpControl.PageNotFoundUrl">
            <summary>
            The page not found url
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.StandardThumbnailProvider">
            <summary>
            Implements the IImageProvider interface by opening an image file that is named similiarily to the incoming path.
            For instance, if the filename is scene1.scene then this provider can be configured to open scene1.scene.Layers\Thumbnail.bmp.
            The exact conversion is defined by the conversionFormat string in the constructor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.StandardThumbnailProvider.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="conversionFormat">Defines how to translate from any filename to the image filename.
            This string must contain a "{0}" substring which is replaced by the incoming pathname in GetImageFor.
            Using the example from the class description, this conversion string would be "{0}.Layers\Thumbnail.bmp"</param>
        </member>
        <member name="M:CSharpFramework.Controls.StandardThumbnailProvider.#ctor(System.String[])">
            <summary>
            Same as other constructor except that it allows for multiple formats. 
            GetImageFor returns the first image that can be found with any of the entries
            </summary>
            <param name="conversionFormats"></param>
        </member>
        <member name="M:CSharpFramework.Controls.StandardThumbnailProvider.GetImageFor(System.String,System.String@)">
            <summary>
            Return the image for the passed filename. If the operation fails it outputs an error string
            </summary>
            <param name="pathname"></param>
            <param name="reasonForFailing"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Controls.StandardThumbnailProvider.GetDescriptionFor(System.String)">
            <summary>
            Empty
            </summary>
            <param name="pathname"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Controls.SliderBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.SliderBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Controls.SliderBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.SliderBar._value">
            <summary>
            Color value, from 0 to MAX_VALUE
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.SliderBar._sliderPos">
            <summary>
            Slider value, from 0 to this.Width
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SliderBar.Vertical">
            <summary>
            Gets or sets the orientation of this control
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SliderBar.ShowUnits">
            <summary>
            Show or Hide units
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SliderBar.TimeOfDay">
            <summary>
            Enable/Disable special time of day mode
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.ColorPreview.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ColorPreview.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Controls.ColorPreview.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ColorPickerControlEx.SwitchToSmallLayout">
            <summary>
            Reduces the number of custom color items to 6 instead of 15, leaving
            more space for the color preview.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ColorPickerControlEx.SetLiveUpdate(System.Object,System.String)">
            <summary>
            Sets an instnce/property pair that will be updated immediately when the color changes. The instance can be an object[] array, too.
            </summary>
            <param name="instance"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:CSharpFramework.Controls.ColorPickerControlEx.RestoreLiveUpdate">
            <summary>
            Can be called after the color dialog has been closed with "Cancel" to restore the live update color to what it was before.
            As defined behavior, this passes a null object to the property, so the property setter is responsible to restore.
            Note that the property should not be of type "Color" as Color is a value type and does not accept null. Rather use "object" and cast
            inside the property.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ColorPickerControlEx.UIntToColor(System.UInt32)">
            <summary>
            Converts a UINT color to a System.Drawing.Color. We use this helper function here
            only as we want to ignore the alpha value, basically we only want solid colors.
            </summary>
            <param name="color">UINT color</param>
            <returns>Solid System.Drawing.Color</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:CSharpFramework.Controls.ColorPickerControlEx._colorNew" -->
        <!-- Badly formed XML comment ignored for member "F:CSharpFramework.Controls.ColorPickerControlEx._activeCustomColor" -->
        <!-- Badly formed XML comment ignored for member "F:CSharpFramework.Controls.ColorPickerControlEx._dirty" -->
        <!-- Badly formed XML comment ignored for member "F:CSharpFramework.Controls.ColorPickerControlEx._updateArea" -->
        <!-- Badly formed XML comment ignored for member "F:CSharpFramework.Controls.ColorPickerControlEx._updateBar" -->
        <!-- Badly formed XML comment ignored for member "F:CSharpFramework.Controls.ColorPickerControlEx._showAlpha" -->
        <!-- Badly formed XML comment ignored for member "F:CSharpFramework.Controls.ColorPickerControlEx._customColors" -->
        <member name="F:CSharpFramework.Controls.ColorPickerControlEx.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ColorPickerControlEx.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Controls.ColorPickerControlEx.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:CSharpFramework.Controls.ColorPickerControlEx.OkClicked">
            <summary>
            Fired when the user presses the Ok button
            </summary>
        </member>
        <member name="E:CSharpFramework.Controls.ColorPickerControlEx.CancelClicked">
            <summary>
            Fired when the user presses the Cancel button
            </summary>
        </member>
        <member name="E:CSharpFramework.Controls.ColorPickerControlEx.ValueChanged">
            <summary>
            Fired when the selected color value changes, even if the drop down
            has not been closed (and thus the value has not yet been accepted by the user)
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.ColorPickerControlEx.ValueChangedEvent">
            <summary>
            Event structure for the ValueChanged event
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.SortShapeChildrenAction">
            <summary>
            Defines an action that can resort the child collection
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SortShapeChildrenAction.#ctor(CSharpFramework.Shapes.ShapeBase,CSharpFramework.ShapeCollection)">
            <summary>
            Constructor
            </summary>
            <param name="parent">parent shape</param>
            <param name="newChildren">Collection that defines the new order</param>
        </member>
        <member name="M:CSharpFramework.Actions.SortShapeChildrenAction.#ctor(CSharpFramework.Shapes.ShapeBase,System.Collections.Generic.IComparer{CSharpFramework.Shapes.ShapeBase})">
            <summary>
            This constructor allows for injecting a custom shape comparer
            </summary>
            <param name="parent">The parent shape</param>
            <param name="comparer">The shape comparer used to sort the children of parent</param>
        </member>
        <member name="M:CSharpFramework.Actions.SortShapeChildrenAction.Do">
            <summary>
            Overridden action function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SortShapeChildrenAction.Undo">
            <summary>
            Overridden action function
            </summary>
        </member>
        <member name="F:CSharpFramework.Actions.SortShapeChildrenAction._parent">
            <summary>
            Internal member
            </summary>
        </member>
        <member name="F:CSharpFramework.Actions.SortShapeChildrenAction._newChildren">
            <summary>
            Internal member
            </summary>
        </member>
        <member name="F:CSharpFramework.Actions.SortShapeChildrenAction._oldChildren">
            <summary>
            Internal member
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SortShapeChildrenAction.ShortName">
            <summary>
            Overridden action function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SortShapeChildrenAction.Valid">
            <summary>
            Overridden action function
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.SortShapeChildrenAlphabeticallyAction">
            <summary>
            Derived action for sorting shapes alphabetically
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SortShapeChildrenAlphabeticallyAction.#ctor(CSharpFramework.Shapes.ShapeBase,System.Windows.Forms.SortOrder)">
            <summary>
            Constructor
            </summary>
            <param name="parent"></param>
            <param name="order"></param>
        </member>
        <member name="T:CSharpFramework.Actions.SortShapeChildrenAlphabeticallyAction.ShapeNameComparer">
            <summary>
            Shape name comparer helper class
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SortShapeChildrenAlphabeticallyAction.ShapeNameComparer.#ctor(System.Windows.Forms.SortOrder)">
            <summary>
            Constructor
            </summary>
            <param name="order">alphabetic order constant</param>
        </member>
        <member name="M:CSharpFramework.Actions.SortShapeChildrenAlphabeticallyAction.ShapeNameComparer.Compare(System.Object,System.Object)">
            <summary>
            Implements IComparer
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Actions.LinkAction">
            <summary>
            Action to link a shape to a parent
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.LinkAction.#ctor(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Constructor that takes the parent and child shape to link
            </summary>
            <param name="src">the link source</param>
            <param name="target">the link target</param>
        </member>
        <member name="M:CSharpFramework.Actions.LinkAction.Do">
            <summary>
            Called for doing or redoing the action
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.LinkAction.Undo">
            <summary>
            Called for undoing the action
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.LinkAction.ShortName">
            <summary>
            Short name of the action, to show in the menu
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.LinkAction.LongName">
            <summary>
            Long name of this action
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.LinkAction.IconIndex">
            <summary>
            Return the icon index for this action
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.LinkAction.IconImage">
            <summary>
            Static function to return the image used to display this type of action in the history
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.LinkAction.Valid">
            <summary>
            Overridden valid function (checks layer editable flag)
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.UnlinkAction">
            <summary>
            Action to unlink a shape from another shape
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.UnlinkAction.#ctor(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Constructor that takes the link source and target to unlink
            </summary>
            <param name="src">link source</param>
            <param name="target">link target</param>
        </member>
        <member name="M:CSharpFramework.Actions.UnlinkAction.Do">
            <summary>
            Called for doing or redoing the action
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.UnlinkAction.Undo">
            <summary>
            Called for undoing the action
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.UnlinkAction.ShortName">
            <summary>
            Short name of the action, to show in the menu
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.UnlinkAction.LongName">
            <summary>
            Long name of the action
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.UnlinkAction.Valid">
            <summary>
            Overridden valid function (checks layer editable flag)
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.UnlinkAction.IconIndex">
            <summary>
            Return the icon index for this action
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.UnlinkAction.IconImage">
            <summary>
            Static function to return the image used to display this type of action in the history
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.UnlinkShapeTargetsAction">
            <summary>
            removes all link targets from a shape
            </summary>
        </member>
        <member name="T:CSharpFramework.GroupAction">
            <summary>
            A group action is a collection of actions that are all performed at the same time. The Action stack handles
            the order of execution (forward in Do operation, backwards in Undo operation) correctly.
            </summary>
        </member>
        <member name="M:CSharpFramework.GroupAction.#ctor(System.String)">
            <summary>
            Constructor of empty group action.
            </summary>
            <param name="name">The name of the group action to show up in the history</param>
        </member>
        <member name="M:CSharpFramework.GroupAction.Do">
            <summary>
            Performs the Do operation on all sub-actions
            </summary>
        </member>
        <member name="M:CSharpFramework.GroupAction.Undo">
            <summary>
            Performs the Undo operation on all sub-actions (start with last action)
            </summary>
        </member>
        <member name="M:CSharpFramework.GroupAction.OnDispose">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.GroupAction.Add(CSharpFramework.IAction)">
            <summary>
            Adds a sub-action to the group. Does not perform the Do operation (for that, the group action has to be added to action stack)
            </summary>
            <param name="action">Action to add</param>
        </member>
        <member name="M:CSharpFramework.GroupAction.Add(CSharpFramework.ActionCollection)">
            <summary>
            Adds multiple sub-actions to the group. Does not perform the Do operations (for that, the group action has to be added to action stack)
            </summary>
            <param name="actions">Action to add</param>
        </member>
        <member name="P:CSharpFramework.GroupAction.GroupName">
            <summary>
            Get or set the group name
            </summary>
        </member>
        <member name="P:CSharpFramework.GroupAction.Valid">
            <summary>
            Returns true if this group has more than zero entries and at least one action is valid itself
            </summary>
        </member>
        <member name="P:CSharpFramework.GroupAction.ShortName">
            <summary>
            Gets the short name
            </summary>
        </member>
        <member name="P:CSharpFramework.GroupAction.ParentStack">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.GroupAction.ActionList">
            <summary>
            Get the Action collection
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.UnlinkShapeTargetsAction.#ctor(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Constructor
            </summary>
            <param name="shape">Shape that should unlink all targets</param>
        </member>
        <member name="T:CSharpFramework.Actions.UnlinkShapeSourcesAction">
            <summary>
            removes all link sources from a shape
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.UnlinkShapeSourcesAction.#ctor(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Constructor
            </summary>
            <param name="shape">Shape that should be unlinked from all sources</param>
        </member>
        <member name="T:CSharpFramework.Visitors.RepositionShapesVisitor">
            <summary>
            Visitor class that sets new render position on shapes
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CSharpFramework.Tests.ZoneTest.SetUp" -->
        <member name="M:CSharpFramework.Tests.ZoneTest.TearDown">
            <summary>
            Clears the test data
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.ITestHelpers">
            <summary>
            Interface for utility functions used by automated tests.
            This interface is implemented by the application. The instance is accessible
            via the TestManager.Helpers property.
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.ITestHelpers.ProcessEvents">
            <summary>
            Processes the application events
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.ITestHelpers.CreateTestScene(System.String)">
            <summary>
            Creates a new project and scene file that can be used by the test.
            The project is made in the test directory (see TestDirectory property).
            Please note that this function creates an editor project with an editor scene,
            and not just dummy test projects and scenes.
            
            You will have to close the project with CloseTestProject when the test is finished.
            </summary>
            <param name="sceneName">name of the scene</param>
        </member>
        <member name="M:CSharpFramework.Tests.ITestHelpers.CreateLocalCopy(System.String)">
            <summary>
            Copies all files in the directory to a new local directory.
            </summary>
            <param name="subDir">the sub-directory to copy the files from.</param>
        </member>
        <member name="M:CSharpFramework.Tests.ITestHelpers.CloseTestProject">
            <summary>
            Closes the test project.
            This function may only be called if CreateTestScene has been called before.
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.ITestHelpers.OpenSceneFromFile(System.String)">
            <summary>
            Opens the specified scene file.
            Use CloseActiveProject to close the scene again.
            </summary>
            <param name="sceneFileName"></param>
        </member>
        <member name="M:CSharpFramework.Tests.ITestHelpers.CloseActiveProject">
            <summary>
            Closes the active project (including the active scene)
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.ITestHelpers.LoadExportedScene(System.String)">
            <summary>
            Loads a scee that has been exported
            </summary>
            <param name="vsceneFile"></param>
        </member>
        <member name="M:CSharpFramework.Tests.ITestHelpers.CloseExportedScene">
            <summary>
            This function must be called when a scene has been loaded with LoadExportedScene
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.ITestHelpers.CursorMoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to the new position in x,y.
            </summary>
            <param name="x">x-coordinate (screen-space)</param>
            <param name="y">y-coordinate (screen-space)</param>
        </member>
        <member name="M:CSharpFramework.Tests.ITestHelpers.CursorMoveTo3D(CSharpFramework.Math.Vector3F)">
            <summary>
            Projects a 3D Vector into 2D space and sets the cursor to the new location.
            </summary>
            <param name="pos">3D-position to project to 2D.</param>
        </member>
        <member name="M:CSharpFramework.Tests.ITestHelpers.SetButtonState(System.Windows.Forms.MouseButtons,System.Boolean,CSharpFramework.Contexts.KeyModifier)">
            <summary>
            Sets the buttonstate and calls the OnMouse*() events for the ActiveView.
            </summary>
            <param name="button">button to press/release.</param>
            <param name="buttonState">new state of the button.</param>
            <param name="keyModifier">the key modifier to use.</param>
        </member>
        <member name="M:CSharpFramework.Tests.ITestHelpers.PlaybackSession(System.String)">
            <summary>
            Playback a single recorded test file. This function loads the parent project
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:CSharpFramework.Tests.ITestHelpers.PlaybackSessionsInProject(System.String,System.String)">
            <summary>
            Playback all recorded test files that are in subdirectory of a project
            </summary>
            <param name="projectDir"></param>
            <param name="subdir"></param>
        </member>
        <member name="P:CSharpFramework.Tests.ITestHelpers.TestDataDir">
            <summary>
            Returns the absolute path where to find the locally copied test data
            </summary>
        </member>
        <member name="P:CSharpFramework.Tests.ITestHelpers.TestDataSourceDir">
            <summary>
            Returns the directory containing the original test data.
            </summary>
        </member>
        <member name="P:CSharpFramework.Tests.ITestHelpers.TestDataDirExists">
            <summary>
            Indicates whether the test data directory exists and thus the application can run the tests
            </summary>
        </member>
        <member name="P:CSharpFramework.Tests.ITestHelpers.TestDirectory">
            <summary>
            Gets the directory that is used to store temporary files during tests
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.TestProject">
            <summary>
            Almost empty project implementation for test classes
            </summary>
        </member>
        <member name="T:CSharpFramework.IProject">
            <summary>
            Represents an editor project
            </summary>
        </member>
        <member name="M:CSharpFramework.IProject.Save">
            <summary>
            Saves the project. Resets the dirty flag if successful
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:CSharpFramework.IProject.Close">
            <summary>
            Close the project
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:CSharpFramework.IProject.NewScene(System.String,System.Boolean)">
            <summary>
            Create a new scene
            </summary>
            <param name="relFileName">project relative filename of the scene</param>
            <param name="bPlainEmpty">if true, an empty scene without main layer is created</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:CSharpFramework.IProject.NewScene(System.String)">
            <summary>
            This non-virtual overload calls NewScene with bPlainEmpty=false
            </summary>
            <param name="relFileName"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IProject.OpenScene(System.String)">
            <summary>
            Open an existing scene by specifying a project relative filename
            </summary>
            <param name="relFilename">project relative filename of the scene</param>
            <returns>true if successful</returns>
        </member>
        <member name="F:CSharpFramework.IProject.ProjectDir">
            <summary>
            Absolute directory of the project. Has to end with a \
            </summary>
        </member>
        <member name="F:CSharpFramework.IProject.FileName">
            <summary>
            Name of the project file inside the project directory. Usually not used.
            </summary>
        </member>
        <member name="M:CSharpFramework.IProject.MakeRelative(System.String)">
            <summary>
            Helper function that makes an absolute path relative to project directory. If it is not relative, an exception is thrown.
            </summary>
            <param name="fileName">path to make relative</param>
            <returns>The relative file name</returns>
        </member>
        <member name="M:CSharpFramework.IProject.CheckRelative(System.String)">
            <summary>
            Helper function that makes an absolute path relative to project directory. If it is not relative, false is returned indicating invalid path.
            </summary>
            <param name="fileName">path to check</param>
            <returns>True if path is ok, false otherwise.</returns>
        </member>
        <member name="M:CSharpFramework.IProject.MakeAbsolute(System.String)">
            <summary>
            Makes the filename absolute. Checks whether filename starts with a slash and either prepends the
            basedata directory or project directory
            </summary>
            <param name="fileName">filename to make absolute</param>
            <returns>absolute version</returns>
        </member>
        <member name="M:CSharpFramework.IProject.IsInCustomDataDirectory(System.String)">
            <summary>
            Indicates whether the passed absolute path name is located in any custom directory (other than base and project dir)
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.IProject._projectEditorPlugins">
            <summary>
            Collection of project specific editor plugins
            </summary>
        </member>
        <member name="M:CSharpFramework.IProject.AddCustomDataDirectory(System.String,System.String)">
            <summary>
            Adds a custom data diretory to the editor on top of the built-in directories which are project and base data.
            Each directory is added to the engine's file manager and shows up in the file open dialogs as a separate root node.
            Since all custom data directories are removed upon project unloading time, a good time to add them is at project loading time.
            See respective callback IProject.NewProjectLoaded.
            </summary>
            <param name="dir">A new directory to add. If not absolute, it is assumed to be project relative.</param>
            <param name="displayName">Optional name of the root node to show up in open dialogs. Default is 'Custom Directory'</param>
            <returns>A new entry. Store this reference if you need to remove this data directory via RemoveCustomDataDirectory</returns>
        </member>
        <member name="M:CSharpFramework.IProject.RemoveCustomDataDirectory(CSharpFramework.IProject.CustomDataDirectoryEntry)">
            <summary>
            Removes a custom data directory entry that has been added via AddCustomDataDirectory.
            Project directory or base data cannot be removed.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:CSharpFramework.IProject.RemoveAllCustomDataDirectories">
            <summary>
            Removes all custom data directories. This is called automatically when the project is closed.
            </summary>
        </member>
        <member name="M:CSharpFramework.IProject.CreateDataFile(System.String)">
            <summary>
            Creates a new data file for the project.
            This ensures it's also added to RCS
            </summary>
            <param name="absFilename">Absolute path to file</param>
        </member>
        <member name="M:CSharpFramework.IProject.UpdateRCSStatus(System.Boolean)">
            <summary>
            Updates the status of whether a Revision Control System is active for this project.
            Called at project open. Requires ProjectFile to be set otherwise "Project isn't loaded" is shown.
            </summary>
            <param name="bInit">Is this an init or a deinit</param>
        </member>
        <member name="M:CSharpFramework.IProject.DetectFolderType">
            <summary>
            Evaluates the folder type the project is located in. It can be either on a local disk, on a
            shared network driver or inside a revision control system (e.g. Perforce).
            </summary>
            <returns>The folder type the project is located in.</returns>
        </member>
        <member name="M:CSharpFramework.IProject.HasValidRepository(ManagedBase.IRCSProvider)">
            <summary>
            Determines whether this project has a valid repository in the passed revision control system.
            </summary>
            <param name="rcs">The revision control system the project is tested with.</param>
            <returns>TRUE if project has a valid repository inside the RCS, FALSE otherwise.</returns>
        </member>
        <member name="M:CSharpFramework.IProject.SendNewProjectLoadedEvent">
            <summary>
            Public helper function to fire the event. Should not be triggered manually
            </summary>
        </member>
        <member name="M:CSharpFramework.IProject.SendProjectUnloadedEvent">
            <summary>
            Public helper function to fire the event. Should not be triggered manually
            </summary>
        </member>
        <member name="P:CSharpFramework.IProject.Dirty">
            <summary>
            Indicates whether the project is dirty and needs to be saved
            </summary>
        </member>
        <member name="P:CSharpFramework.IProject.Scene">
            <summary>
            Get or set the current scene
            </summary>
        </member>
        <member name="P:CSharpFramework.IProject.EditorPlugins">
            <summary>
            Sets or gets the editor plugins that are loaded from the project directory
            </summary>
        </member>
        <member name="P:CSharpFramework.IProject.CustomDataDirectories">
            <summary>
            Access the list of custom data directories. Each entry is of class type IProject.CustomDataDirectoryEntry.
            The list can be null. Use AddCustomDataDirectory to fill it.
            </summary>
        </member>
        <member name="E:CSharpFramework.IProject.NewProjectLoaded">
            <summary>
            Event that gets triggered in the EditorManager.Project.set function after the new project is set.
            </summary>
        </member>
        <member name="E:CSharpFramework.IProject.ProjectUnloaded">
            <summary>
            Event that gets triggered in the EditorManager.Project.set function. Inside the event callback, EditorManager.Project is null
            </summary>
        </member>
        <member name="T:CSharpFramework.IProject.CustomDataDirectoryEntry">
            <summary>
            Represents a custom directory entry
            </summary>
        </member>
        <member name="F:CSharpFramework.IProject.CustomDataDirectoryEntry.AbsolutePath">
            <summary>
            Absolute path of the directory
            </summary>
        </member>
        <member name="F:CSharpFramework.IProject.CustomDataDirectoryEntry.DisplayString">
            <summary>
            String to show it in file browse dialogs
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.TestProject.#ctor">
            <summary>
            Constructor that creates the directory 'TempProject' inside the test data directory
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.TestProject.Close">
            <summary>
            Empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Tests.TestProject.NewScene(System.String,System.Boolean)">
            <summary>
            Creates a new TestScene
            </summary>
            <param name="relFileName"></param>
            <param name="bPlainEmpty"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Tests.TestProject.OpenScene(System.String)">
            <summary>
            Empty
            </summary>
            <param name="relFilename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Tests.TestProject.Save">
            <summary>
            Empty
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Tests.TestProject.Dirty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.TestScene">
            <summary>
            Test scene class that can be used in the tests. Does not do anything
            </summary>
        </member>
        <member name="T:CSharpFramework.IScene">
            <summary>
            Main scene object. Only one per project may be open at a time
            </summary>
        </member>
        <member name="M:CSharpFramework.IScene.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.IScene.#ctor(CSharpFramework.IProject)">
            <summary>
            Creates a new scene
            </summary>
            <param name="_Project">Parent project</param>
        </member>
        <member name="M:CSharpFramework.IScene.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method 
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="M:CSharpFramework.IScene.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method.
            Therefore, you should call GC.SupressFinalize to
            take this object off the finalization queue 
            and prevent finalization code for this object
            from executing a second time.
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene.SCENE_VERSION_UNDEFINED">
            <summary>
            Undefined version number
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene.SCENE_VERSION_1">
            <summary>
            version 1 - Initial release
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene.SCENE_VERSION_2">
            <summary>
            version 2 - Added plugin and client versioning
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene.SCENE_VERSION_3">
            <summary>
            version 3 - Scene settings
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene.SCENE_VERSION_4">
            <summary>
            version 4 - Custom tool objects
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene.SCENE_VERSION_5">
            <summary>
            version 5 - Using new dynamic property system for entities
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene.SCENE_VERSION_10">
            <summary>
            version 10 - New scene saving style (0 bytes scene file, layers in subfolder)
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene.SCENE_VERSION_FIRST_LAYERFILES">
            <summary>
            First version number that supports saving layers to separate files
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene.SCENE_VERSION_CURRENT">
            <summary>
            Always latest version number
            </summary>
        </member>
        <member name="M:CSharpFramework.IScene.GetPluginVersion(System.String)">
            <summary>
            Use this function while loading a scene to get the
            version number of a plugin that was used for saving the scene
            </summary>
            <param name="plugin">Name of the plugin</param>
            <returns>Returns -1 for unknown plugins</returns>
        </member>
        <member name="F:CSharpFramework.IScene._pluginVersion">
            <summary>
             Hashmap for storing plugin versions when saving and loading
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene._iSceneversion">
            <summary>
            Current scene version
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene._iClientSceneVersion">
            <summary>
            Current scene version for use by clients
            </summary>
        </member>
        <member name="M:CSharpFramework.IScene.Save">
            <summary>
            Saves the scene. Resets the dirty flag if successful
            </summary>
            <returns>true if sucessful</returns>
        </member>
        <member name="M:CSharpFramework.IScene.SaveAs(System.String)">
            <summary>
            Save the scene under a different file name
            </summary>
            <param name="relFilename">new file name (project relative)</param>
            <returns>true if sucessful</returns>
        </member>
        <member name="M:CSharpFramework.IScene.Close">
            <summary>
            Close the scene
            </summary>
            <returns>true if sucessful</returns>
        </member>
        <member name="M:CSharpFramework.IScene.UpdateView(System.Boolean)">
            <summary>
            Updates the view (implementation can call the same function on the view)
            </summary>
            <param name="bImmediate">if true, the update will be immediately and not timer based</param>
        </member>
        <member name="M:CSharpFramework.IScene.PasteClipboardContent(CSharpFramework.Clipboard.EditorClipboard,System.Object)">
            <summary>
            Paste the content of a clipboard into the scene. Analyses the content.
            </summary>
            <param name="Clipboard">The clipboard to copy its content from</param>
            <param name="opHint">optional parameter that provides additional information for pasting the data (e.g. ShapeCollection.PasteHint)</param>
            <returns>true if sucessful</returns>
        </member>
        <member name="M:CSharpFramework.IScene.OnSceneRelocation(System.String,System.String)">
            <summary>
            Run scene relocation to a new folder on the scene
            </summary>
            <param name="oldProjectPath"></param>
            <param name="newProjectPath"></param>
        </member>
        <member name="M:CSharpFramework.IScene.ExportScene(System.String,System.Boolean)">
            <summary>
            Performs scene export into the absolute file path.
            </summary>
            <param name="absPath">Absolute file path, can be null</param>
            <param name="bShowDialog">true to open the export dialog, false to silently export</param>
            <returns>Result of the export step. If the dialofg is shown and the user quits it, this function returns true (no error)</returns>
        </member>
        <member name="M:CSharpFramework.IScene.HideUnsupportedShapes(System.Int32)">
            <summary>
            
            </summary>
            <param name="targetPlatform"></param>
        </member>
        <member name="M:CSharpFramework.IScene.UpdateStaticLighting(System.Boolean,CSharpFramework.Scene.ZoneCollection,System.Boolean)">
            <summary>
            Performs static lighting update on the scene or parts of it.
            </summary>
            <param name="bShowDlg">If true the lighting config dialog is shown</param>
            <param name="zones">Optional collection of zones to be lit</param>
            <param name="bIncludeMainZone">true if the main parts of the scene should be lit</param>
            <returns>true if lighting was successful</returns>
        </member>
        <member name="M:CSharpFramework.IScene.ResetStaticLighting">
            <summary>
            Can be called to reset the static lighting of the scene
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.AddLayer(CSharpFramework.Layer,System.Boolean)">
            <summary>
            Adds a layer to the scene
            </summary>
            <param name="layer">The layer to add</param>
            <param name="bSetAsActive">if true, this will be the new active layer</param>
            <returns>true if sucessful</returns>
        </member>
        <member name="M:CSharpFramework.IScene.InsertLayer(CSharpFramework.Layer,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Insert a layer at the specified index to the scene
            </summary>
            <param name="layer">The layer to add</param>
            <param name="bSetAsActive">if true, this will be the new active layer</param>
            <param name="bCreateEngineInstances">Create all the engine instances or not</param>
            <param name="index">Index of the inserted layer</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.AddLayer(CSharpFramework.Layer,System.Boolean,System.Boolean)">
            <summary>
            Adds a layer to the scene and also locks it
            </summary>
            <param name="layer">The layer to add</param>
            <param name="bSetAsActive">If true, this will be the new active layer</param>
            <param name="bCreateEngineInstances">Create all the engine instances or not</param>
            <returns>TRUE if successful</returns>
        </member>
        <member name="M:CSharpFramework.IScene.AddLayer(CSharpFramework.Layer,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a layer to the scene and allows to specify the locking
            </summary>
            <param name="layer">The layer to add</param>
            <param name="bSetAsActive">If true, this will be the new active layer</param>
            <param name="bCreateEngineInstances">Create all the engine instances or not</param>
            <param name="bLock">If true, this layer will be locked</param>
            <returns>TRUE if successful</returns>
        </member>
        <member name="M:CSharpFramework.IScene.MoveLayer(CSharpFramework.Layer,System.Int32)">
            <summary>
            Moves the specified layer upwards or downwards in the collection
            </summary>
            <param name="layer">The layer to move</param>
            <param name="index">New index of the layer</param>
        </member>
        <member name="M:CSharpFramework.IScene.RemoveLayer(CSharpFramework.Layer)">
            <summary>
            Remove layer from scene. Renames the layer file to layername.layer.deleted
            </summary>
            <param name="layer">Layer to remove</param>
            <returns>true if sucessful</returns>
        </member>
        <member name="M:CSharpFramework.IScene.UpdateLayerLocks">
            <summary>
            Updates the lock status of  all layers
            </summary>
        </member>
        <member name="M:CSharpFramework.IScene.GetZoneLayerCount(CSharpFramework.Scene.Zone)">
            <summary>
            Returns the number of layers that are attached to a zone
            </summary>
            <param name="zone"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.GetZoneLayers(CSharpFramework.Scene.Zone,System.Boolean)">
            <summary>
            Returns a layer collection that is attached to the zone.
            Note that scene.GetZoneLayers(null,false) is not the same as scene.Layers
            </summary>
            <param name="zone">The zone to test (or null for non attached layers)</param>
            <param name="bForceNewCollection">If false, then the zone's own collection is returned, otherwise a shallow copy of the collection</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.CreateUniqueZoneName(System.String)">
            <summary>
            Creates unique zone name from given name
            </summary>
            <param name="name">Wanted name for the zone</param>
            <returns>New name of the zone. May be the same as before</returns>
        </member>
        <member name="F:CSharpFramework.IScene._bForceLocalPosition">
            <summary>
            Internal temp value
            </summary>
        </member>
        <member name="M:CSharpFramework.IScene.GetShapeRenderPosition(CSharpFramework.Shapes.Shape3D)">
            <summary>
            Make a shape's render position local to current global offset
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.IScene._repositionVisitor">
            <summary>
            internal static instance
            </summary>
        </member>
        <member name="M:CSharpFramework.IScene.OnRepositionShapes(CSharpFramework.Scene.Zone)">
            <summary>
            Called whenever shapes need to reposition (either all shapes or only for passed zone)
            </summary>
            <param name="zone">zone to update. Can be null for all zones</param>
        </member>
        <member name="M:CSharpFramework.IScene.GetExportRelevantZones">
            <summary>
            Returns a collection of all zones that are relevant for export (i.e. have at least one layer that
            should be exported)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.GetRelevantEmbeddedZones">
            <summary>
            Returns a collection of all zones that have the EmbedReferenceIntoExport flag set
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.AddZone(CSharpFramework.Scene.Zone)">
            <summary>
            Rather use this method than Zones.Add
            </summary>
            <param name="zone"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.RemoveZone(CSharpFramework.Scene.Zone)">
            <summary>
            Rather use this method than Zones.Remove
            </summary>
            <param name="zone"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.CallShapesAddedToSceneFunction(System.Boolean)">
            <summary>
            Helper function to recursively call the OnAddedToScene/OnRemoveFromScene function
            </summary>
            <param name="bStatus"></param>
        </member>
        <member name="M:CSharpFramework.IScene.RunShapeVisitor(CSharpFramework.Visitors.IShapeVisitor,System.Boolean,System.Boolean)">
            <summary>
            Helper function to run a shape visitor on all shapes in the scene
            </summary>
            <param name="visitor">visitor instance</param>
            <param name="bIncludeUnLoadedLayers">If true, also runs the visitor on layers that are currently not loaded</param>
            <param name="bIncludeNotModifiableLayers">If true, also runs the visitor on layers that not modifiable</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.RunShapeVisitor(CSharpFramework.Visitors.IShapeVisitor)">
            <summary>
            Overloaded version that calls RunShapeVisitor(visitor, true, true);
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.OnRemoveAllEngineInstances">
            <summary>
            Recursively remove all engine instances from the shapes in this layer
            </summary>
        </member>
        <member name="M:CSharpFramework.IScene.OnCreateAllEngineInstances(CSharpFramework.Scene.ProgressStatus)">
            <summary>
            Recursively create all engine instances of the shapes in this scene
            </summary>
            <param name="progress">Optional</param>
        </member>
        <member name="M:CSharpFramework.IScene.AddShapeBoundingBoxRecursive(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Math.BoundingBox)">
            <summary>
            Internal function to traverse through scene
            </summary>
            <param name="parent"></param>
            <param name="box"></param>
        </member>
        <member name="M:CSharpFramework.IScene.FindFirstShapeOfType(System.Type,System.Boolean)">
            <summary>
            Utilizes the FindShapeOfTypeVisitor visitor class to find the first occurrence of the passed shape type.
            </summary>
            <param name="shapeType"></param>
            <param name="bDerived"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.AllShapesOfType(System.Type,System.Boolean)">
            <summary>
            Get a collection of all shapes of a given type in a scene
            </summary>
            <param name="shapeType">The type that should be searched for</param>
            <param name="bDerived">Include derived types as well</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.AllShapesOfType(System.Type)">
            <summary>
            Get a collection of all shapes of a given type (or derived types) in a scene
            </summary>
            <param name="shapeType">The type that should be searched for</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.FindShapeByName(System.String)">
            <summary>
            Finds the first occurrence of a shape with specified name
            </summary>
            <param name="shapename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.FindShapeByID(System.UInt64)">
            <summary>
            Finds the shape with the passed unique ID
            </summary>
            <param name="iUniqueID"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IScene.GetNewShapeNameIndex(System.String,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Gets an integer index for enumerating shapes
            </summary>
            <param name="shapeName">Source name</param>
            <param name="ignoreShape">An existing shape that should be ignored while checking</param>
            <returns>next number used for unique naming</returns>
        </member>
        <member name="M:CSharpFramework.IScene.CreateNewShapeName(System.String,System.Boolean,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Creates a unique shape name
            </summary>
            <param name="startName">The source name, e.g. "light"</param>
            <param name="bRemoveDigits">if true, remove digits at the end of the startName</param>
            <param name="ignoreShape">An existing shape that should be ignored while checking</param>
            <returns>new unique name, e.g. light17</returns>
        </member>
        <member name="M:CSharpFramework.IScene.CreateNewShapeName(System.String)">
            <summary>
            Version of CreateNewShapeName that just uses a name
            </summary>
            <param name="startName">The source name, e.g. "light"</param>
            <returns>new unique name, e.g. light17</returns>
        </member>
        <member name="F:CSharpFramework.IScene.FileName">
            <summary>
            File name of the scene
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene.Project">
            <summary>
            Scene project
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene.LayerDirectoryExtension">
            <summary>
            The extension appended to the scene filename for the layers directory
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene.LayerFileExtension">
            <summary>
            The file extension used for a single layer file inside the directory
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene.ZoneFileExtension">
            <summary>
            The file extension used for a single zone file inside the directory
            </summary>
        </member>
        <member name="F:CSharpFramework.IScene.BackupFileExtension">
            <summary>
            The file extension used for backup files of any type (e.g. layer backups)
            </summary>
        </member>
        <member name="M:CSharpFramework.IScene.SendLayerChangedEvent(CSharpFramework.LayerChangedArgs)">
            <summary>
            Send event that a layer has changed. This function also calls the virtual OnLayerActionTriggered function on the layer
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.IScene.SendZoneChangedEvent(CSharpFramework.Scene.ZoneChangedArgs)">
            <summary>
            Send event that a zone has changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.IScene.SendShapeChangedEvent(CSharpFramework.Shapes.ShapeChangedArgs)">
            <summary>
            Send event that a shape has changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.IScene.SendPropertyChangedEvent(CSharpFramework.PropertyChangedArgs)">
            <summary>
            Send event that a shape property has changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.IScene.SendUniqueIDInPrefabChangedEvent(CSharpFramework.UniqueIDInPrefabChangedArgs)">
            <summary>
            Send event that a uniqueID of a shape inside a prefab has changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.IScene.SendEngineInstancesChangedEvent(CSharpFramework.EngineInstancesChangedArgs)">
            <summary>
            Send event that the engine instances have been removed/created
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.IScene.SendShaderResourceChangedEvent(System.EventArgs)">
            <summary>
            Send an event that any shader resource has changed and the core assignment needs to updated
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.IScene.SendDirtyFlagChangedEvent">
            <summary>
            Triggers the OnDirtyFlagChanged callback
            </summary>
        </member>
        <member name="M:CSharpFramework.IScene._watcher_LockStatusChanged(System.Object,CSharpFramework.SceneFileWatcher.LayerChangedEventArgs)">
            <summary>
            Event that is triggered when one or more layer lock files
            have been modified
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.IScene._watcher_LayerContentChanged(System.Object,CSharpFramework.SceneFileWatcher.LayerChangedEventArgs)">
            <summary>
            Event that is triggered when the content of one or more layers changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.IScene.RemoveFileWatcher">
            <summary>
            Deletes the scene file watcher instance that listens for lock file and layer file changes.
            </summary>
        </member>
        <member name="M:CSharpFramework.IScene.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The purpose of scene serialization is only to support action recording
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.IScene.IsActive">
            <summary>
            Indicates whether this scene is currently active
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.IsInitialising">
            <summary>
            Indicates whether the scene is currently being initialized, typically due to the 
            scene being loaded/set.
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.SceneVersion">
            <summary>
            Returns the scene version number while loading and saving.
            This version number is used internally for keeping track of file revisions
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.ClientSceneVersion">
            <summary>
            Returns the client's scene version number while loading and saving.
            Clients can use this version number for their own purposes.
            Normally you only need a version number for your plugin, but if you only 
            modify the main executable you can use this additional version number.
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.Dirty">
            <summary>
            Indicates whether the scene is dirty and needs to be saved
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.CurrentExportProfile">
            <summary>
            Return the current scene export profile
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.RendererNodeClass">
            <summary>
            Get or set the new renderer type
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.RendererProperties">
            <summary>
            Get or set properties associated with the renderer node
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.Postprocessors">
            <summary>
            get or set the colelction of postprocessor components
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.LastSaveErrorMsg">
            <summary>
            get the last error msg that occurs when the scene save failed
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.ActiveLayer">
            <summary>
            Get or set the active layer
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.Layers">
            <summary>
            Get or set collection of layers
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.GlobalPivot">
            <summary>
            Gets or sets the current global pivot position. All Shapes in the scenes are positioned relatively to this position
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.ActiveZone">
            <summary>
            Gets or sets the active zone
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.Zones">
            <summary>
            Get or set the collection of zones
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.RootShapes">
            <summary>
            Returns a list of "all" root shapes that are relevant for picking (depending on the global settings)
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.CalculateSceneExtents">
            <summary>
            Calculates the extents of the current scene, taking the absolute bounding box of every 3D shape
            The returned box is always valid and has a minimum extent of 2.0
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.SceneExtents">
            <summary>
            Return the scene extents (used for orthographic view etc.). This implementation returns CalculateSceneExtents.
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.CurrentShapeSpawnPosition">
            <summary>
            get or set the shape origin (the position where new shapes are positioned)
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.AbsoluteFileName">
            <summary>
            Absolute file name of the scene (ProjectDir + FileName)
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.FileNameNoExt">
            <summary>
            Returns the relative scene name without the .scene extension
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.LayerDirectoryName">
            <summary>
            Returns the absolute directory for storing the layer files (basically combination of AbsoluteFileName and extension)
            </summary>
        </member>
        <member name="P:CSharpFramework.IScene.RelativeLayerDirectoryName">
            <summary>
            Returns the project relative directory for storing the layer files (basically combination of FileName and extension)
            </summary>
        </member>
        <member name="E:CSharpFramework.IScene.LayerChanged">
            <summary>
            Event for changed layer
            </summary>
        </member>
        <member name="E:CSharpFramework.IScene.ZoneChanged">
            <summary>
            Event for changed zone
            </summary>
        </member>
        <member name="E:CSharpFramework.IScene.ShapeChanged">
            <summary>
            Shape changed event
            </summary>
        </member>
        <member name="E:CSharpFramework.IScene.PropertyChanged">
            <summary>
            This callback is triggered whenever a property has been changed through the property grid.
            </summary>
        </member>
        <member name="E:CSharpFramework.IScene.UniqueIDInPrefabChanged">
            <summary>
            This callback is triggered whenever a uniqueID of a shape inside a prefab has been changed after a prefab has been resaved or collapsed.
            </summary>
        </member>
        <member name="E:CSharpFramework.IScene.EngineInstancesChanged">
            <summary>
            EngineInstances changed event
            </summary>
        </member>
        <member name="E:CSharpFramework.IScene.ShaderResourceChanged">
            <summary>
            ShaderResourceChanged event - gets triggered when shaders are to be updated in the scene
            </summary>
        </member>
        <member name="E:CSharpFramework.IScene.OnDirtyFlagChanged">
            <summary>
            OnDirtyFlagChanged gets triggered when the Dirty flag of a scene actually changed. The sender is the scene
            </summary>
        </member>
        <member name="T:CSharpFramework.IScene.FindShapeOfTypeVisitor">
            <summary>
            Visitor that finds the first occurrence of a shape of given type. The result can be retrieved from the Found member.
            </summary>
        </member>
        <member name="M:CSharpFramework.IScene.FindShapeOfTypeVisitor.#ctor(System.Type,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="shapeType">Shape class to find</param>
            <param name="bAllowDerived">If true, also derived classes are allowed</param>
        </member>
        <member name="M:CSharpFramework.IScene.FindShapeOfTypeVisitor.Visit(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Overridden Visit function
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.IScene.FindShapeOfTypeVisitor.Found">
            <summary>
            Result shape, can be null
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.TestScene.#ctor(CSharpFramework.IProject)">
            <summary>
            Creates a single (active) layer
            </summary>
            <param name="proj"></param>
        </member>
        <member name="M:CSharpFramework.Tests.TestScene.Close">
            <summary>
            Empty function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Tests.TestScene.Save">
            <summary>
            Empty function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Tests.TestScene.SaveAs(System.String)">
            <summary>
            Empty function
            </summary>
            <param name="relFilename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Tests.TestScene.UpdateView(System.Boolean)">
            <summary>
            Empty function
            </summary>
            <param name="bImmediate"></param>
        </member>
        <member name="M:CSharpFramework.Tests.TestScene.PasteClipboardContent(CSharpFramework.Clipboard.EditorClipboard,System.Object)">
            <summary>
            Empty function
            </summary>
            <param name="Clipboard"></param>
            <param name="opHint">optional parameter that provides additional information for pasting the data (e.g. ShapeCollection.PasteHint)</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Tests.TestScene.ExportScene(System.String,System.Boolean)">
            <summary>
            Empty
            </summary>
            <param name="absPath"></param>
            <param name="bShowDialog"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Tests.TestScene.HideUnsupportedShapes(System.Int32)">
            <summary>
            Empty
            </summary>
            <param name="targetPlatform"></param>
            <param name="hide"></param>
        </member>
        <member name="M:CSharpFramework.Tests.TestScene.UpdateStaticLighting(System.Boolean,CSharpFramework.Scene.ZoneCollection,System.Boolean)">
            <summary>
            Empty
            </summary>
            <param name="bShowDlg"></param>
            <param name="zones"></param>
            <param name="bIncludeMainZone"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Tests.TestScene.ResetStaticLighting">
            <summary>
            Empty
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Tests.TestScene.Dirty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="P:CSharpFramework.Tests.TestScene.CurrentShapeSpawnPosition">
            <summary>
            Implements the abstract function to get or set the current shape spawn position
            </summary>
        </member>
        <member name="P:CSharpFramework.Tests.TestScene.CurrentExportProfile">
            <summary>
            Empty
            </summary>
        </member>
        <member name="P:CSharpFramework.Tests.TestScene.RendererNodeClass">
            <summary>
            Empty
            </summary>
        </member>
        <member name="P:CSharpFramework.Tests.TestScene.RendererProperties">
            <summary>
            Empty
            </summary>
        </member>
        <member name="P:CSharpFramework.Tests.TestScene.Postprocessors">
            <summary>
            Empty
            </summary>
        </member>
        <member name="P:CSharpFramework.Tests.TestScene.LastSaveErrorMsg">
            <summary>
            Empty
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.CloneTest">
            <summary>
            Summary description for CloneTest.
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.CloneTest.TestShapeCloning">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeLink">
            <summary>
            Base class for shape links
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeLink.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId">unique ID of the link within the owner shape</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeLink.SetOwnerShapeInternal(CSharpFramework.Shapes.Shape3D)">
            <summary>
            Internal function
            </summary>
            <param name="shape"></param>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeLink._ownerShape">
            <summary>
            owner shape
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeLink._linkName">
            <summary>
            link name (displayed in the view)
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeLink._primaryStringId">
            <summary>
            String ID used to identify links within a shape.
            Has to be unique within the shape.
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeLink._links">
            <summary>
            connected links
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeLink._unresolvedLinkPaths">
            <summary>
            List of linked shaps paths (to be resolved after deserialization)
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeLink._hotspotIconFilename">
            <summary>
            Default file name used for displaying the hotspot
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeLink.CanLink(CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Override this function to enable linking on a link class basis rather than shape class. See ShapeBase.CanLink.
            This default impolementation returns false.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeLink.Clone">
            <summary>
            Clones the link, but not the collection of links it is assigned to
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeLink.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeLink.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeLink.ResolveLinkPaths">
            <summary>
            Try to resolve the still unresolved links
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeLink.HasLinkTo(CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Checks whether this link has a reference to the passed link,
            either resolved or unresolved.
            </summary>
            <param name="linkIn"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeLink.SetShowHotspot(System.Boolean,System.Single@)">
            <summary>
            Set the hotspot visible status
            </summary>
            <param name="bStatus"></param>
            <param name="fYOfs"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeLink.CanLinkThisTo(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink@,CSharpFramework.Shapes.ShapeLink@)">
            <summary>
            Checks whether the link represented by 'this' can be linked to the passed link
            </summary>
            <param name="otherLink"></param>
            <param name="linkSource"></param>
            <param name="linkTarget"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeLink.CustomID">
            <summary>
            For custom purposes, ignored by vForge and also not serialized
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeLink.OwnerShape">
            <summary>
            Access the owner shape
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeLink.Name">
            <summary>
            get the link name
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeLink.PrimaryStringId">
            <summary>
            Get the primary string id of this link (unique within the owner shape)
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeLink.Links">
            <summary>
            get the collection of connected links
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeLink.UnresolvedLinkPaths">
            <summary>
            Internal function
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeLink.DisplayPosition">
            <summary>
            Get the 3D position for line rendering. This function can be overridden in derived shape classes.
            By default it returns OwnerShape.RenderPosition, thus displaying the blue lines at the shape's pivot.
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeLink.HotspotIconFilename">
            <summary>
            Overridable that returns the filename of the icon image used for the hotspot in the view
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeLink.DefaultHotspotIconFilename">
            <summary>
            Overridable that returns the filename of the icon image used for the hotspot in the view
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeLink.Modifiable">
            <summary>
            ISceneObject implementation - forwards to the owner shape
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeLink.Modified">
            <summary>
            ISceneObject implementation - forwards to the owner shape
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.LinkSource">
            <summary>
            Derived link class that is used for all link sources. That means, ShapeBase.LinkSources only contains LinkSource entries
            and on the other hand ShapeBase.LinkSources.Links are all of type LinkTarget
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkSource.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId">unique ID of the link within the owner shape</param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkSource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Shapes.LinkSource.DefaultHotspotIconFilename">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.LinkTarget">
            <summary>
            Derived link class that is used for all link targets. That means, ShapeBase.LinkTargets only contains LinkTarget entries
            and on the other hand ShapeBase.LinkTargets.Links are all of type LinkSource
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkTarget.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId">unique ID of the link within the owner shape</param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkTarget.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkTarget.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Shapes.LinkTarget.DefaultHotspotIconFilename">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.LinkBidirectional">
            <summary>
            Derived link class that is used for all links that work in both directions.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkBidirectional.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId">unique ID of the link within the owner shape</param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkBidirectional.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkBidirectional.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Shapes.LinkBidirectional.DefaultHotspotIconFilename">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.LinkCollection">
            <summary>
            Collection of links
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.Add(CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Collection function
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.AddUnique(CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Add uniquely, i.e. tet if already in collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.Insert(System.Int32,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Collection function
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.Remove(CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Collection function
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.SafeRemove(CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Safe remove, i.e. test if in collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.GetAt(System.Int32)">
            <summary>
            Collection function
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.Contains(CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Collection function
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.IndexOf(CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Collection function
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.CopyTo(CSharpFramework.Shapes.ShapeLink[],System.Int32)">
            <summary>
            Collection function
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.Clone">
            <summary>
            Clones the collection. Also clones all links in it
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.SetShowHotspots(System.Boolean,CSharpFramework.Shapes.ShapeLink,System.Single@)">
            <summary>
            Enables or disables the hotspots for the view
            </summary>
            <param name="bStatus">show or hide hotspots</param>
            <param name="matching">only affect the ones that are compatible with this one (null for all)</param>
            <param name="fYOfs">increase the display y coordinate</param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.ReassignAll">
            <summary>
            Reassigns all links again, i.e. call shape.OnLink for each n*m link combinations in this collection
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.BreakAndReconnectAll">
            <summary>
            Temporarily breaks all links to other shapes and reconnects them, thus causing 
            OnUnlink and OnLink events on the involved shapes.
            
            Use this method if you need the linked shapes to re-establish their connection.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.GetLinkByPrimaryId(System.String)">
            <summary>
            Gets the link by its primary id
            </summary>
            <param name="primaryStringId"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.GetLinkByType(System.Type,System.Boolean)">
            <summary>
            Finds a link by type in this collection
            </summary>
            <param name="t"></param>
            <param name="bDerived"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.RenderLinks(CSharpFramework.VisionViewBase,System.UInt32)">
            <summary>
            Render all n*m link combinations in this collection as an arrow
            </summary>
            <param name="view"></param>
            <param name="iColorRef"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.RemoveTagged">
            <summary>
            Removes all entries from the collection that have the CustomTag set to true
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.TagLinksOfType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Sets the CustomTag for all links in this collection with specified type
            </summary>
            <param name="type">Type to check</param>
            <param name="bExactType">If true, only exact types are considered, otherwise the class may be derived</param>
            <param name="bTagValue">The tag value to set on affected links</param>
            <returns>Number of found elements</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkCollection.BreakOtherLinksForTagged">
            <summary>
            Internal function
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.LinkCollection.Item(System.Int32)">
            <summary>
            Collection function
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.LinkCollection.CustomTag">
            <summary>
            For custom usage: (un-)set tag value on all entries
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.LinkSourceTargetPairHotspot">
            <summary>
            Helper struct used for view.VisibleLinkPairs
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkSourceTargetPairHotspot.#ctor(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Constructor
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="F:CSharpFramework.Shapes.LinkSourceTargetPairHotspot.Source">
            <summary>
            Link source
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.LinkSourceTargetPairHotspot.Target">
            <summary>
            Link target
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkSourceTargetPairHotspot.EvaluatePosition">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkSourceTargetPairHotspot.OnClicked(CSharpFramework.VisionViewBase)">
            <summary>
            Trigger the unlink action here
            </summary>
            <param name="view"></param>
        </member>
        <member name="P:CSharpFramework.Shapes.LinkSourceTargetPairHotspot.CenterPosition">
            <summary>
            Returns the average position of the source and target position
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.LinkSourceObject3D">
            <summary>
            Derived link source class used by entities etc.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkSourceObject3D.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId">unique ID of the link within the owner shape</param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkSourceObject3D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkSourceObject3D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:CSharpFramework.Shapes.LinkSourceObject3D.iIndex">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.LinkTargetObject3D">
            <summary>
            Derived link target class used by entities etc.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkTargetObject3D.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId">unique ID of the link within the owner shape</param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkTargetObject3D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkTargetObject3D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:CSharpFramework.Shapes.LinkTargetObject3D.iIndex">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.LinkBiDirectionalObject3D">
            <summary>
            Derived link target class used by entities etc.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkBiDirectionalObject3D.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId">unique ID of the link within the owner shape</param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkBiDirectionalObject3D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkBiDirectionalObject3D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:CSharpFramework.Shapes.LinkBiDirectionalObject3D.iIndex">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.LinkSourceTriggerComponent">
            <summary>
            Derived link source class used by entities etc.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkSourceTriggerComponent.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId">unique ID of the link within the owner shape</param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkSourceTriggerComponent.CanLink(CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Overridden function; Allow linking to LinkTargetTriggerComponent
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkSourceTriggerComponent.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkSourceTriggerComponent.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:CSharpFramework.Shapes.LinkTargetTriggerComponent">
            <summary>
            Derived link source class used by entities etc.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkTargetTriggerComponent.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId">unique ID of the link within the owner shape</param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkTargetTriggerComponent.CanLink(CSharpFramework.Shapes.ShapeLink)">
            <summary>
            Overridden function; Allow linking to LinkSourceTriggerComponent
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkTargetTriggerComponent.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.LinkTargetTriggerComponent.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:CSharpFramework.Scene.TextureFile">
            <summary>
            Wrapper class for easier array handling
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Material">
            <summary>
            This class represents a Material in the scene. The available materials can be accessed via IScene.MaterialList
            Custom material classes can be created via the the global IMaterialFactory instance (EditorManager.MaterialFactory)
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material.CAT_SHADER">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material.CATORDER_SHADER">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material.CAT_MATERIAL">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material.CATORDER_MATERIAL">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material.CAT_OVERRIDE">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material.CATORDER_OVERRIDE">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material.CAT_LIGHTMAP">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material.CATORDER_LIGHTMAP">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material.CAT_PHYSICS">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material.CATORDER_PHYSICS">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Material.#ctor(CSharpFramework.Scene.IMaterialProvider)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Material.ToString">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.Material.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method 
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Material.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method.
            Therefore, you should call GC.SupressFinalize to
            take this object off the finalization queue 
            and prevent finalization code for this object
            from executing a second time.
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material.OwnerProvider">
            <summary>
            The provider resource that provides this material
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._nativeSrfPtr">
            <summary>
            Points to the engine's VisSurface_cl instance (world or model) - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._displayInList">
            <summary>
            Flag that determines whether the material should be visible in the material list
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._name">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._userData">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._eLightingMethod">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._eTransparency">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._basetexture">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._normalmaptexture">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._specmul">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._specexp">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._specularmaptexture">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._parallaxScale">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._parallaxBias">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._alphaTestThreshold">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._doublesided">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._depthWrite">
            <summary>
            Shader writes to depth buffer
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._depthBias">
            <summary>
            Depth offset for the shader
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._depthBiasClamp">
            <summary>
            Clamp value for the depth offset
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._slopeScaledDepthBias">
            <summary>
            Slope depth bias
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._ambientColor">
            <summary>
            The ambient color of the surface (used for vLux)
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._iSortingKey">
            <summary>
            Sorting key of the material
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._iDeferredID">
            <summary>
            8-bit value for the deferred material ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._shaderFX">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._bModified">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._iLightmapSizeX">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._iLightmapSizeY">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._iLightmapPageID">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._fLightmapGranularity">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._bSupportsLightmapping">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Material._bCastStaticShadows">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Material.NativeMaterialDataExchange(System.IntPtr,System.Boolean)">
            <summary>
            Overridable for data exchange between custom material classes and native material. This function is called when a property in the
            material changes (bToNative=true). Furthermore it is called with bToNative=false after the material has been created.
            This default implementation does not do anything.
            This function is called by UpdateCoreMaterial which in turn is called for every default material property that is changed.
            Custom material properties might call this function directly in the setter.
            </summary>
            <param name="nativeMaterial">A pointer to engine's native surface. Same as this._nativeSrfPtr</param>
            <param name="bToNative">If true, data should be written from this material to native. false for the other direction.</param>
        </member>
        <member name="M:CSharpFramework.Scene.Material.UpdateShaderMaterialProperties">
            <summary>
            hardcoded shader property update for default material parameter that go into the "MaterialParams" register. See also [#24044]
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Material.UpdateCoreShader">
            <summary>
            Updates the core shader assignment of this material
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Material.UpdateCoreMaterial">
            <summary>
            Updates the core shader assignment of this material
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Material.ReapplyLightingShader">
            <summary>
            Reapply the lighting shader if it was an automatically assigned one
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Material.UpdateMaterialTextures">
            <summary>
            Updates the textures of this material
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Material.GetMaterialPropertiesFromNative">
            <summary>
            Gather all material properties from its native counterpart
            </summary>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Scene.Material.ModifiedChanged">
            <summary>
            Event that is triggered when the modified status of a material has changed. Sender can be casted to Material.
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Material.TriggerNativeMaterialCreated(System.IntPtr)">
            <summary>
            Triggers the NativeMaterialCreated callback
            </summary>
            <param name="nativePtr"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Material.TriggerNativeMaterialDestroyed(System.IntPtr)">
            <summary>
            Triggers the NativeMaterialDestroyed callback
            </summary>
            <param name="nativePtr"></param>
        </member>
        <member name="P:CSharpFramework.Scene.Material.IsActive">
            <summary>
            This flag determines whether the material is still used in the scene (otherwise core updating shaders is dangerours)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.OverrideLibrary">
            <summary>
            Gets or sets the path of the Override Library (*.MaterialLib).
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.OverrideMaterial">
            <summary>
            Gets or sets the Material-Name of the Material from the Override Library, that will be used to override this Material.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.HasOverrideMaterial">
            <summary>
            Returns whether this Material has a valid Override Material set.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.Name">
            <summary>
            Name of the material
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.UserDataString">
            <summary>
            User data
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.Transparency">
            <summary>
            Transparency type
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.BaseTexture">
            <summary>
            Diffuse base texture filename
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.NormalmapTexture">
            <summary>
            Normal map texture filename
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.SpecularMapTexture">
            <summary>
            Specular map texture filename
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.SpecularMultiplier">
            <summary>
            Specular multiplier
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.SpecularExponent">
            <summary>
            Specular exponent
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.ParallaxScale">
            <summary>
            Parallax mapping scale
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.ParallaxBias">
            <summary>
            Parallax mapping bias
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.AmbientColor">
            <summary>
            Parallax mapping bias
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.AlphaTestThreshold">
            <summary>
            Parallax mapping bias
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.DepthWrite">
            <summary>
            Parallax mapping bias
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.DepthBias">
            <summary>
            Depth bias
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.DepthBiasClamp">
            <summary>
            Depth bias clamp
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.SlopeScaledDepthBias">
            <summary>
            Depth bias clamp
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.SortingKey">
            <summary>
            Specular exponent
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.DeferredID">
            <summary>
            Specular exponent
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.DoubleSided">
            <summary>
            Material is doublesided - or not
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.SupportsLightmaps">
            <summary>
            Material is lightmapped - or not
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.LightmapSizePageX">
            <summary>
            If the material is lightmapped, this property specifies the wanted tile size inside the larger lightmap
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.LightmapSizePageY">
            <summary>
            If the material is lightmapped, this property specifies the wanted tile size inside the larger lightmap
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.LightmapGranularity">
            <summary>
            If >0 this setting overrides the LightmapSizePageX/Y value. The granularity defines the number of world units per lightmap texel (heuristically).
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.LightmapPageID">
            <summary>
            This ID allows to merge multiple materials inside this mesh to use the same texture quad. Materials in this mesh with the same ID should have no overlapping lightmap UV
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.CastStaticShadows">
            <summary>
            This flag is logically ANDed with the per-object CastStaticShadows flag. If set to false, this material will be completely transparent for static lights.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.Shader_Mode">
            <summary>
            Whether an automatic or manual shader should be used
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.LightingMethod">
            <summary>
            LightingMethod for AUTO mode
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.Shader">
            <summary>
            Shader effect config of the material - should always be != null and can represent a null-effect
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.HasEffect">
            <summary>
            Indicates whether this material has a shader effect applied
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.Material.OnMaterialShaderChanged">
            <summary>
            This static event gets triggered when the shader applied to a material gets changed. The sender can be casted
            to Material class, the event args are just empty.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.AuxiliaryTextureFilenames">
            <summary>
            Helper function to convert to or from string collection
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.Modifiable">
            <summary>
            Implements the ISceneObject interface. Currently returns true
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Material.Modified">
            <summary>
            Implements the ISceneObject interface and sets the Dirty status
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.Material.NativeMaterialCreated">
            <summary>
            Event that is triggered when a material is created by the engine
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.Material.NativeMaterialDestroyed">
            <summary>
            Event that is triggered when a destroyed is created by the engine
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.Material.IconChanged">
            <summary>
            Event that is triggered when the material's icon needs to be updated. The sender specifies the material.
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.Material.NameChanged">
            <summary>
            Event that is triggered when the material's name has changed. The sender specifies the material.
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.Material.OnMaterialLibraryReferenced">
            <summary>
            Event that is triggered when the material references a MaterialLibrary. The sender specifies the material.
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Material.NativeMaterialEventArgs">
            <summary>
            Event arg that is sent by callbacks that reference a native engine material
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Material.NativeMaterialEventArgs.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="nativePtr"></param>
        </member>
        <member name="F:CSharpFramework.Scene.Material.NativeMaterialEventArgs.nativeMaterial">
            <summary>
            Native VisSurface_cl pointer
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.MaterialLibraryContent">
            <summary>
            String converter for enumerating material names in a material library
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.MaterialLibraryContent.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standard values are supported
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.MaterialLibraryContent.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standard values are supported, but not exclusively
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.LayerChangedEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.ZoneChangedEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.ShapeChangedEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyChangedEventHandler">
            <summary>
            Delegate declaration. Sends a data object of type PropertyChangedArgs which provides information about
            the property
            </summary>
        </member>
        <member name="T:CSharpFramework.UniqueIDInPrefabChangedEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.EngineInstancesChangedEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyChangedArgs">
            <summary>
            Event class for changed shape properties. This data object is used by the static IScene.PropertyChanged event.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyChangedArgs.#ctor(System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="component"></param>
            <param name="propertyName"></param>
        </member>
        <member name="F:CSharpFramework.PropertyChangedArgs._propertyName">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyChangedArgs._component">
            <summary>
            Source Component (i.e. owner of the property)
            </summary>
        </member>
        <member name="T:CSharpFramework.UniqueIDInPrefabChangedArgs">
            <summary>
            This data object is used by the static IScene.UniqueIDInPrefabChanged event. 
            </summary>
        </member>
        <member name="M:CSharpFramework.UniqueIDInPrefabChangedArgs.#ctor(System.Collections.Generic.Dictionary{CSharpFramework.Shapes.ShapeBase,System.UInt64})">
            <summary>
            Constructor
            </summary>
            <param name="component"></param>
            <param name="propertyName"></param>
        </member>
        <member name="F:CSharpFramework.UniqueIDInPrefabChangedArgs._prefabChildrenListWithOldUniqueID">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.UniqueIDInPrefabChangedArgs.PrefabChildrenListWithOldUniqueID">
            <summary>
            stores the shapes with their old uniqueID as value
            </summary>
        </member>
        <member name="T:CSharpFramework.EngineInstancesChangedArgs">
            <summary>
            EngineInstancesChangedArgs : event notification for RemoveAllEngineInstance/CreateAllEngineInstances
            </summary>
        </member>
        <member name="M:CSharpFramework.EngineInstancesChangedArgs.#ctor(CSharpFramework.EngineInstancesChangedArgs.Action)">
            <summary>
            Constructor
            </summary>
            <param name="_action"></param>
        </member>
        <member name="F:CSharpFramework.EngineInstancesChangedArgs.action">
            <summary>
            Related action (reason why event got triggered)
            </summary>
        </member>
        <member name="T:CSharpFramework.EngineInstancesChangedArgs.Action">
            <summary>
            EngineInstancesChanged Action
            </summary>
        </member>
        <member name="F:CSharpFramework.EngineInstancesChangedArgs.Action.PreRemoveAll">
            <summary>
            Triggered before all engine instances get removed
            </summary>
        </member>
        <member name="F:CSharpFramework.EngineInstancesChangedArgs.Action.PostRemoveAll">
            <summary>
            All engine instances have been removed
            </summary>
        </member>
        <member name="F:CSharpFramework.EngineInstancesChangedArgs.Action.PreCreateAll">
            <summary>
            Triggered before all engine instances get created
            </summary>
        </member>
        <member name="F:CSharpFramework.EngineInstancesChangedArgs.Action.PostCreateAll">
            <summary>
            All engine instances have been created
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.IEngineTextureProxy">
            <summary>
            Abstract class to use texture objects in C#. In Vision implemented to keep a VTextureObject reference.
            This object holds a smart pointer reference to the native object, so Remove must be called.
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IEngineTextureProxy.Load(System.String)">
            <summary>
            Load from file
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IEngineTextureProxy.Remove">
            <summary>
            Dispose the texture
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.IEngineTextureProxy.NativePtr">
            <summary>
            Pointer to the native texture object
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.IEngineOverlay">
            <summary>
            Interface for engine texture overlays. In Vision implemented as screenmasks
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IEngineOverlay.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IEngineOverlay.Remove">
            <summary>
            Dispose the overlay
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IEngineOverlay.SetScreenRect(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set target screen coordinates
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IEngineOverlay.SetColor(System.UInt32)">
            <summary>
            Set the modulation color
            </summary>
            <param name="iColorRef"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IEngineOverlay.SetVisible(System.Boolean)">
            <summary>
            Set the visible status
            </summary>
            <param name="bStatus"></param>
        </member>
        <member name="T:CSharpFramework.Scene.EditorSettingsBase">
            <summary>
            Base class for global editor settings. Accessible via EditorManager.Settings. Custom editors can
            derive their own settings class from EditorSettingsBase.
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_SELECTION">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_SELECTION">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_NAVIGATION">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_NAVIGATION">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_VIEW">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_VIEW">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_LOADSAVE">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_LOADSAVE">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_LAYOUT">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_LAYOUT">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_LOG">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_LOG">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_STREAMING">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_STREAMING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_LIGHTING">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_LIGHTING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_THUMBNAILS">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_THUMBNAILS">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_REMOTE_XBOX360">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_REMOTE_XBOX360">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_REMOTE_PS3">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_REMOTE_PS3">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_REMOTE_WII">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_REMOTE_WII">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_SCRIPT_DEBUGGING">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_SCRIPT_DEBUGGING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_PLAYTHEGAME">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_PLAYTHEGAME">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_SCRIPT_EDITOR">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_SCRIPT_EDITOR">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_VLUX_LIGHTING">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_VLUX_LIGHTING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CAT_FILE_SERVE">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CATORDER_FILE_SERVE">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last category ID
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.EditorSettingsBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.EditorSettingsBase.GetProjectTargetDirectoryXbox360">
            <summary>
            Builds a target directory for the project
            </summary>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.UIUnitScaleModes">
            <summary>
            Returns the default UI Unit Scale Modes
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.EngineViewSizeModes">
            <summary>
            Returns the default Engine View Size Modes
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.EngineViewSafeModes">
            <summary>
            Returns the default Engine View Safe Modes
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.EditorSettingsBase.Clone">
            <summary>
            Clones the settings
            </summary>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.InheritShapeFlags">
            <summary>
            If enabled, shapes inherit the "Visible" and "ExportShape" flag from their parent. This defines new behavior in Vision 8.0.
            Setting to false retains the old behavior.
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.EditorSettingsBase.SetPropertyFlags(System.String,CSharpFramework.Scene.PropertyFlags_e)">
            <summary>
            Sets the propertyflags like hidden, read-only or none on a specific property
            </summary>
            <param name="propertyName">Name of the property</param>
            <param name="flag">Property flag</param>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ActiveApplicationLayout">
            <summary>
            Active application layout
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ExposeVisibilityShapes">
            <summary>
            If enabled, visibility shapes (zone, portals) show up in the shape creator panel
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ShapeSelectionMode">
            <summary>
            Determines which shapes are relevant for picking
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.AllowLockedShapesSelection">
            <summary>
            Determines which shapes are relevant for picking
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.MaxPickingDistance">
            <summary>
            Determines the maximum distance at which shapes are picked
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.HighlightShapes">
            <summary>
            Determines which shapes are previewed in the view
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.LinkDisplayMode">
            <summary>
            Determines which links are displayed in the view
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.HighlightLinkedShapes">
            <summary>
            Determines which links are displayed in the view
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.SelectionHighlight">
            <summary>
            If enabled, selected entities and selected static meshes are rendered with a wireframe overlay in the view
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.GlobalUnitScaling">
            <summary>
            Unit scaling compared to standard Vision units (cm). This factor does not apply any scaling to coordinates, but is just a hint for some UI scalings (gizmo size etc.)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.BackgroundColor">
            <summary>
            Defines the default clear color within the engine view
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.RemoteFileSharingXbox360">
            <summary>
            Specifies whether to use remote file sharing. If remote file sharing is used, the console will try to load title data from the host PC's shared directory rather than the console's temporary directory.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.RemoteFileSharingCommonDirectoryXbox360">
            <summary>
            Specifies the directory for shared data when Remote File Sharing is used.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.RemoteFileSharingProjectDirectoryXbox360">
            <summary>
            Specifies the directory for project files when Remote File Sharing is used.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.RemoteTempDirectoryXbox360">
            <summary>
            Temporary directory for exported scenes on the remote machine, relative to the path of the console client application.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ConnectOnStartupXbox360">
            <summary>
            If true, the editor will always try to connect to the currently selected console on startup.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.PropagateCameraUpdatesXbox360">
            <summary>
            If true, vForge will automatically propagate changes of the camera position and orientation to the remote system.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.RemoteMachineNameXbox360">
            <summary>
            Name of the console (remote machine) to connect to
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.RemoteApplicationXbox360">
            <summary>
            Path and Name of the console client application to launch
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ConnectOnStartupPS3">
            <summary>
            If true, the editor will always try to connect to the currently selected console on startup.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.PropagateCameraUpdatesPS3">
            <summary>
            If true, vForge will automatically propagate changes of the camera position and orientation to the remote system.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.RemoteMachineNamePS3">
            <summary>
            Name of the console (remote machine) to connect to
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.RemoteTempDirectoryWii">
            <summary>
            Temporary directory for exported scenes on the remote machine, relative to the path of the console client application.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.RemoteCommonDirectoryWii">
            <summary>
            Temporary directory for exported scenes on the remote machine, relative to the path of the console client application.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ConnectOnStartupWii">
            <summary>
            If true, the editor will always try to connect to the currently selected console on startup.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.PropagateCameraUpdatesWii">
            <summary>
            If true, vForge will automatically propagate changes of the camera position and orientation to the remote system.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.RemoteApplicationWii">
            <summary>
            Path and Name of the console client application to launch
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.AskForDebuggerOnScriptError">
            <summary>
            Should the editor ask to connect to the script debugger when a script error occurs.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.UseAutoCompleteInScriptEditor">
            <summary>
            "Enable auto complete feature in Script Editor). This setting is hidden, since it should be only controlable by the appropriate icon in the script editor
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.AlwaysUse64BitvLux">
            <summary>
            Should the editor ask to connect to the script debugger when a script error occurs.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.FixedGizmoSize">
            <summary>
            If true, the gizmo has fixed on-screen size, regardless of distance to camera
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.GizmoScaling">
            <summary>
            Relative scaling of the gizmo size (percentage value)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.PlayTheGameInputMode">
            <summary>
            Active application layout
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.MoveSensitivity">
            <summary>
            Percentage value of mouse move sensitivity in the engine view
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ScaledMoveSensitivity">
            <summary>
            Returns the sesitivity scaled by GlobalUnitScaling
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.RotateSensitivity">
            <summary>
            Percentage value of mouse rotate sensitivity in the engine view
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.CameraStyle">
            <summary>
            Style of the camera in the engine view
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.MoveCameraWithKeys">
            <summary>
            Camera Control with Arrow and [W,A,S,D] Keys (Disables Hotkeys). This setting is hidden, since it should be only controlable by the appropriate icon in the enginepanel
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.LastProjectDirectory">
            <summary>
            Defines the directory that is initially set when opening a project. C:\ by default, the last one otherwise.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.AdditionalPluginDirectory">
            <summary>
            Defines an additional project relative path to search for plugins. Empty by default
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.SaveResourcesAtExportTime">
            <summary>
            If set, all edited and unsaved resources (such as particle effect templates) are saved after successful export
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.SaveModifiedLayersOnly">
            <summary>
            If set, then saving the scene will only save the modified layer files. Usually every action on a shape modifies its layer.
            However, custom plugins might bypass this so the layer might not be considered modified
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.RecreateEntitiesOnExport">
            <summary>
            If set, all engine entities will be destroyed and recreated on export
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ShowPluginWarnings">
            <summary>
            If set, an info dialog will be displayed with all plugins that failed to load
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.UseStandardBrowseDialogs">
            <summary>
            If true, standard Windows file browse dialogs are used to pick files.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.OpenStartupDialog">
            <summary>
            If true, a startup dialog will appear when starting vForge.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ShowRecentFilesFirst">
            <summary>
            If true, the scene wizard dialog will be shown when a new scene is created.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ShowSceneWizardOnSceneCreation">
            <summary>
            If true, the scene wizard dialog will be shown when a new scene is created.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ShowSceneWizardOptionDescriptions">
            <summary>
            If true, detailed descriptions and pictures will be displayed in the scene wizard dialog.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.OpenMultiUserEditingDialogOnProjectLoad">
            <summary>
            If true, the multi-user editing dialog will be opened when a project is loaded.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.OpenMultiUserEditingDialogForLocalProjects">
            <summary>
            If true, the multi-user editing dialog will be also opened for local projects.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.PrefabDirectory">
            <summary>
            Defines a project relative directory where prefabs are saved and where the creator panel searches for it. This can be an empty string to allow for saving in the project's root
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.WindowSizeOnRestore">
            <summary>
            This property is used to restore the window size
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.WindowLocationOnRestore">
            <summary>
            This property is used to restore the window location
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.WindowSizeOnRestoreMaximized">
            <summary>
            This property is used to set if window should be restored maximized
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ThumbnailBackgroundColor">
            <summary>
            Defines an additional project relative path to search for plugins. Empty by default
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.DefaultThumbnailResolutionX">
            <summary>
            Defines the default thumbnail resolution at which thumbnails are created by vForge
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.DefaultThumbnailResolutionY">
            <summary>
            Defines the default thumbnail resolution at which thumbnails are created by vForge
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.SaveThumbnailsAsJPG">
            <summary>
            Defines the output file format (JPG or BMP)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ThumbnailsRotateMeshes">
            <summary>
            If true, models and meshes auto-rotate when previewing
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ThumbnailsSupported">
            <summary>
            Indicates whether thumbnail settings are correct
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.DisplayedLogLines">
            <summary>
            If set, all edited and unsaved resources (such as particle effect templates) are saved after successful export
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ShowMixedAssemblyWarnings">
            <summary>
            Determines if mixed assemblies warning should be shown
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.AllowZonePivots">
            <summary>
            This feature enables extended large coordinate support
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.PurgeResourcesOnZoneUnload">
            <summary>
            If enabled, engine resource managers are purged automatically when zones are unloaded in the editor
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.ForceZonesUnloadedAtStartup">
            <summary>
            If enabled, all zones remain unloaded at scene loading time regardless of their actual state. This can be used to work around memory issues when working with very large scenes.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.AllowFullZoneUnloading">
            <summary>
            If enabled, zone unloading even temporarily removes the layers from the scene. This however is unwanted for some operations that might require the layers to be there in unloaded state. So full unloading can be suppressed through this property
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.CustomColors">
            <summary>
            Array of custom colors
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.EditorSettingsBase.EnableFileServe">
            <summary>
            Should the editor show error messages of vFileServe as message windows
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.EditorSettingsBase.ShapeSelectionMode_e">
            <summary>
            Determines which shapes are relevant for picking
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.ShapeSelectionMode_e.All">
            <summary>
            all shapes are considered
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.ShapeSelectionMode_e.ActiveLayer">
            <summary>
            shapes in the currently active layer are considered
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.ShapeSelectionMode_e.VisibleLayer">
            <summary>
            shapes in all visible layers are considered 
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.EditorSettingsBase.LinkDisplayMode_e">
            <summary>
            Determines which links are displayed in the view
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.LinkDisplayMode_e.None">
            <summary>
            Links are never displayed
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.LinkDisplayMode_e.ActiveLayer">
            <summary>
            Links in the active layer are displayed
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.LinkDisplayMode_e.SelectedShapes">
            <summary>
            Only links of selected shapes are displayed
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.LinkDisplayMode_e.All">
            <summary>
            All links are displayed
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.EditorSettingsBase.CameraStyle_e">
            <summary>
            Determines the behaviour of the camera, for example wenn the middle mouse ist pressed
            
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CameraStyle_e.MiddleMousePan">
            <summary>
            Pan the view along the viewing plane with the middle mouse button
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CameraStyle_e.MiddleMousePanHorizontal">
            <summary>
            Pan the view along the x/y plane (move horizontal) with the middle mouse button
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CameraStyle_e.MiddleMouseOrbitSelection">
            <summary>
            Orbit around the Gizmo with the middle mouse button
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CameraStyle_e.MaxStyle">
            <summary>
            3ds max style camera
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.CameraStyle_e.MayaStyle">
            <summary>
            Maya style camera
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.EditorSettingsBase.PlayTheGameInputMode_e">
            <summary>
            Determines which shapes are relevant for picking
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.PlayTheGameInputMode_e.DirectInputMode">
            <summary>
            Default input mode
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.PlayTheGameInputMode_e.WindowInputMode">
            <summary>
            Allows to have the same input mode as application does
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.EditorSettingsBase.UIUnitScaleMode">
            <summary>
            Struct that holds the name and the value of a single UI unit scale mode
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.EditorSettingsBase.UIUnitScaleMode.#ctor(System.String,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.UIUnitScaleMode.ModeName">
            <summary>
            Name to display
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.UIUnitScaleMode.ModeValue">
            <summary>
            Scaling value
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.EditorSettingsBase.EngineViewSizeMode">
            <summary>
            Struct that holds the name and the value of a engine view size mode
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.EditorSettingsBase.EngineViewSizeMode.#ctor(System.String,System.Drawing.Size)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.EngineViewSizeMode.ModeName">
            <summary>
            Display name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.EngineViewSizeMode.ModeValue">
            <summary>
            View size
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.EditorSettingsBase.EngineViewSafeMode">
            <summary>
            Struct that holds the name and the value of a engine view safe mode
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.EditorSettingsBase.EngineViewSafeMode.#ctor(System.String,System.Drawing.SizeF)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.EngineViewSafeMode.ModeName">
            <summary>
            Display name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.EditorSettingsBase.EngineViewSafeMode.ModeValue">
            <summary>
            Safe mode percentage (width, height)
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder">
            <summary>
            DEPRECATED. Use DynamicProperties instead
            
            Class for setting up a dynamic assemblies in runtime. A dynamic assembly can contain an arbitrary
            amount of dynamic classes. For each dynamic class the properties can be defined via the ClassBuilder.
            The DynamicAssemblyBuilder is used for the dynamic property system (e.g. for entity properties)
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.CreateClassBuilder(System.String)">
            <summary>
            returns a ClassBuilder instance
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.CreateEnum(System.String,System.Type,System.String[],System.Object[])">
            <summary>
            Create a new enum
            </summary>
            <param name="name"></param>
            <param name="valueType"></param>
            <param name="names"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.SaveToMemory">
            <summary>
            Save the dynamic assembly into a byte array
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.GetByteBuffer">
            <summary>
            Get the dynamic assembly as a byte buffer
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.GetTypeForClass(System.String)">
            <summary>
            Finds the type of a class with specific name
            </summary>
            <param name="className">Class name to find</param>
            <returns>The type of the class (or null)</returns>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.Types">
            <summary>
            Get the list of types
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.AttributeDefinition">
            <summary>
            A class that represents a single property atribute. That is, attribute type and constructor arguments
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.AttributeDefinition.#ctor(System.Type,System.Type[],System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="attributeType"></param>
            <param name="constructorArgTypes"></param>
            <param name="constructorArgs"></param>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.AttributeDefinition.AttributeType">
            <summary>
            Gets the attribute type
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.AttributeDefinition.ConstructorArgTypes">
            <summary>
            Gets the array of constructor argument types
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.AttributeDefinition.ConstructorArgs">
            <summary>
            Gets the array of constructor argument objects
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.ClassBuilder">
            <summary>
            Class for dynamically creating classes
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.ClassBuilder.#ctor(System.String,CSharpFramework.DynamicProperties.DynamicAssemblyBuilder)">
            <summary>
            Constructor
            </summary>
            <param name="className"></param>
            <param name="dynAsmBuilder"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.ClassBuilder.AddProperty(System.String,System.Type)">
            <summary>
            Add a class property
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.ClassBuilder.AddProperty(System.String,System.Type,System.String,System.Collections.ArrayList)">
            <summary>
            Add a class property
            </summary>
            <param name="name">name of the property</param>
            <param name="type">property type</param>
            <param name="description">property description</param>
            <param name="attributeDefinitions">an array of property attributes</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicAssemblyBuilder.ClassBuilder.Finish">
            <summary>
            Finish the class building
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.ShapeTreeNode">
            <summary>
            Tree view node class for displaying Shapes. Has a reference to a ShapeBase instance
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeTreeNode.#ctor(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Constructor that takes the Shape
            </summary>
            <param name="_shape">Shape to be represented by this tree item</param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeNode.IsChildNodeOf(CSharpFramework.ShapeTreeNode)">
            <summary>
            Checks whether this node is a child node of other node
            </summary>
            <param name="other">Other node to test</param>
            <returns>true, if "this" is a child of "other"</returns>
        </member>
        <member name="M:CSharpFramework.ShapeTreeNode.AllowsDropOn(CSharpFramework.ShapeTreeNode)">
            <summary>
            Checks whether dropping "this" shape node on the dest node is allowed
            </summary>
            <param name="destNode">drop target (new parent)</param>
            <returns>true, if "this" might be dropped on destNode</returns>
        </member>
        <member name="M:CSharpFramework.ShapeTreeNode.AllowsDropOnShape(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Checks whether dropping "this" tree node on the shape is allowed (does not check parenting)
            </summary>
            <param name="destShape"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.ShapeTreeNode.shape">
            <summary>
            The shape associated with this tree node item
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeTreeNode.CompareTo(System.Object)">
            <summary>
            Compares indices between two TreeNodes.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Controls.Scene2DView">
            <summary>
            Picture box that shows a 2D overview of the scene
            </summary>
            <summary>
            Picture box that shows a 2D overview of the scene
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.ScrollablePictureBox">
            <summary>
            User control to display an image that is larger than the control using scroll bars.
            Part of the code was taken from http://www.codeproject.com/KB/graphics/YLScsImagePanel.aspx
            License: http://www.codeproject.com/info/cpol10.aspx
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.ScrollablePictureBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ScrollablePictureBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ScrollablePictureBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ScrollablePictureBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ScrollablePictureBox.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden function to prevent background painting
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="M:CSharpFramework.Controls.ScrollablePictureBox.EnableDoubleBuffering">
            <summary>
            Enables double buffering for painting this control to prevent flickering
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.ScrollablePictureBox.PaintArea">
            <summary>
            Returns the client area minus the space used for the scroll bars
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.ScrollablePictureBox.PaintOffset">
            <summary>
            Gets (or sets) the offset for painting the image. The set function sets the scroll bars
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.ScrollablePictureBox.VirtualSize">
            <summary>
            Gets or sets the size of the full scrolling area. Updates the scroll bars properly.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.UpdateView">
            <summary>
            Marks the view as dirty so it will be repainted
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.UpdateZoomFit">
            <summary>
            Updates the paint area so the map fits into it.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.RecalcVirtualSize">
            <summary>
            Recalculate the required size of the view
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            overridden Paint function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.OnSizeChanged(System.EventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.Transform(CSharpFramework.Math.Vector3F)">
            <summary>
            Transforms a 3D position to 2D
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.Transform(System.Drawing.Point,System.Single,System.Boolean)">
            <summary>
            Transforms a 2D pos into 3D
            </summary>
            <param name="pos"></param>
            <param name="fZOfs"></param>
            <param name="bTraceZ"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.Transform(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Transforms a 2D pos into 3D
            </summary>
            <param name="px"></param>
            <param name="py"></param>
            <param name="fZOfs"></param>
            <param name="bTraceZ"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.MakeValidRect(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Creates a bounding rectangle from the two points
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Controls.Scene2DView.RelevantObjects">
            <summary>
            Global array that holds the relevant IScene2DViewRenderable instances for 2d painting
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.Update2DViews">
            <summary>
            Static version of Update2DView
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.Scene2DView_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse Up Event - Here the pan mode gets deactivated.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.Scene2DView_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse Down Event - Here the pan mode gets activated.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.Scene2DView_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse Move Event - Here the panning gets processed.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse Wheel Event - Control the zoom in/out via mouse wheel.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.CheckOffsetBounds(System.Int32,System.Int32)">
            <summary>
            Helper to check the new paint offset against the bounds of the paint area.
            </summary>
            <param name="offsetX"> New offset on X-Axis </param>
            <param name="offsetY"> New offset on Y-Axis </param>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.TouchesSelectionMarquee(CSharpFramework.Math.BoundingBox)">
            <summary>
            Indicates whether the passed box intersects with the current selection box (if there is any)
            </summary>
            <param name="WSBox"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.CreateFilterCategory(System.String)">
            <summary>
            Look up filter category by name or create one if it does not exist
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.FindFilterCategory(System.String)">
            <summary>
            Look up filter category by name. Returns null if not available
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Controls.Scene2DView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Controls.Scene2DView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.Scene2DView.Zoom">
            <summary>
            Get or set the zoom factor
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.Scene2DView.ZoomFit">
            <summary>
            Get or set the zoom fit flag (i.e. adjust size automatically)
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.Scene2DView.SelectionMarqueeDragging">
            <summary>
            Indicates whether the user currently opens a marquee in the view
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.Scene2DView.HasSelectionMarquee">
            <summary>
            Indicates whether the view has a valid marquee. That one can be queried via SelectionMarquee or SelectionMarqueeWorldBox
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.Scene2DView.SelectionMarquee">
            <summary>
            The 2D version of the marquee
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.Scene2DView.SelectionMarqueeWorldBox">
            <summary>
            A bounding box that represents the marquee in world space coordinates. The z-coordinate is set to very large extent
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.Scene2DView.Filters">
            <summary>
            List of current filter categories
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.Scene2DView.ShowCameraFrustum">
            <summary>
            Gets or sets the property whether to display camera frustum or not.
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.Scene2DView.ShowCameraDirection">
            <summary>
            Gets or sets the property whether to display camera direction or not.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.EngineViewSafeModeDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.EngineViewSafeModeDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.EngineViewSafeModeDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.ActionRecorderPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ActionRecorderPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ActionRecorderPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.PropertyGridEx">
            <summary>
            Derived PropertyGrid class which extends the default property grid with 
            various features:
            
            - Support for tabbing through the fields [#22195].
              See: http://www.pcreview.co.uk/forums/thread-1312692.php
              
            - Professional Renderer
              See: http://www.codeproject.com/KB/tabs/RendererPropertyGrid.aspx
              
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.PropertyGridEx.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.PropertyGridEx.m_snap">
            <summary>
            Hook to doccomment from base class.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.PropertyGridEx.OnHandleCreated(System.EventArgs)">
            <summary>
            Raised on handle created.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.PropertyGridEx.SetRendererAndColor">
            <summary>
            Set internal renderer from main windows.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.PropertyGridEx.ProcessKeyPreview(System.Windows.Forms.Message@)">
            <summary>
            Overridden function
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Controls.PropertyGridEx.ProcessTabKey(System.Boolean)">
            <summary>
            Overridden function
            </summary>
            <param name="forward"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Controls.PropertyGridEx.HelpBackgroundImage">
            <summary>
            Get or set the HelpBackgroundImage
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.ColorBar._value">
            <summary>
            Color value, from 0 to MAX_VALUE
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.ColorBar._sliderPos">
            <summary>
            Slider value, from 0 to this.Width
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.ColorBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ColorBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Controls.ColorBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.ColorBar.BaseColor">
            <summary>
            Gets or sets base color of this control that also defines the background color
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.ColorBar.Vertical">
            <summary>
            Gets or sets the orientation of this control
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.IMaterialProvider">
            <summary>
            Class that provides information about the material properties of an engine resource (e.g. entity model or mesh file).
            See derived classes VisionEntityModelInfo and VisionStaticMeshFileInfo
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IMaterialProvider.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IMaterialProvider.FindMaterial(System.String)">
            <summary>
            Finds the material by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IMaterialProvider.FindMaterialByNativePtr(System.IntPtr)">
            <summary>
            Finds the material by the native pointer assigned to it
            </summary>
            <param name="nativeSrf"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IMaterialProvider.AllocateMaterials(System.Int32)">
            <summary>
            Internal function to allocate the material list
            </summary>
            <param name="iCount"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IMaterialProvider.IsMaterialLibrary">
            <summary>
            Function that returns whether this Material Provider acts as a library.
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IMaterialProvider.AddMaterial">
            <summary>
            Derived classes may support to add materials to the list.
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IMaterialProvider.RemoveMaterial(CSharpFramework.Scene.Material)">
            <summary>
            Derived classes may support to remove materials from the list.
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IMaterialProvider.SaveMaterialInfo">
            <summary>
            Overridable to save material information file (e.g. shader assignment). Should be overridden by engine
            specific class
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IMaterialProvider.ToString">
            <summary>
            Returns the DisplayName
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Scene.IMaterialProvider.FileName">
            <summary>
            Access the resource's (file-)name
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.IMaterialProvider.MaterialList">
            <summary>
            Returns a list of materials provided by this instance
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.IMaterialProvider.MaterialCount">
            <summary>
            Reurns the number of materials
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.IMaterialProvider.Modified">
            <summary>
            Indicates whether any material of this model has been modified
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.IMaterialProvider.DisplayName">
            <summary>
            Overridable that returns the string for displaying this provider in the list
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.IMaterialProvider.CategoryName">
            <summary>
            Optional category string (default:null)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.IMaterialProvider.CanSave">
            <summary>
            Return true if the material list can bve saved to file (e.g. materials.xml). Default returns true
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.ShapeComponentEditor">
            <summary>
            UITypeEditor for adding/removing shape components
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.RendererComponentEditor">
            <summary>
            UITypeEditor for adding/removing components to a renderer node
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.ScriptFilenameEditor">
            <summary>
            UITypeEditor for setting the script name for a property. Filepicker for .lua files
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ScriptFilenameEditor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.ScriptFilenameEditor.DEFAULT_SCRIPT_EXTENSION">
            <summary>
            Default file extension for script files
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ScriptFilenameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.ScriptFilenameEditor.editorService">
            <summary>
            Service instances passed to the EditValue function
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ScriptFilenameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overriden Edit value function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ScriptFilenameEditor.CreateEmptyScriptFile(System.String,System.String)">
            <summary>
            Helper function to physically create a new script file
            </summary>
            <param name="absFilename">absolute file path. If null, a browse dialog appears</param>
            <param name="oldFilename">optional for browsing. Can be null</param>
            <returns>string array with one relative and one absolute path</returns>
            
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ScriptFilenameEditor.BrowseScriptFile(System.String)">
             <summary>
             Opens a browse dialog for script files.
             </summary>
             <param name="oldFilename">previous name for browsing. Can be null</param>
             <returns>A string array with absolute filenames, which could be null.</returns>
            
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ScriptFilenameEditor.BrowseScriptFile(System.String,System.Boolean)">
             <summary>
             Opens a browse dialog for script files.
             </summary>
             <param name="oldFilename">previous name for browsing. Can be null</param>
             <param name="allowMultiselect">Allow multi file selection.</param>
             <returns>A string array with absolute filenames, which could be null.</returns>
            
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ScriptFilenameEditor.OpenScriptFile(System.String)">
            <summary>
            Helper function to open a script file in the script panel
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ScriptFilenameEditor.OpenScriptFile(System.String,System.Boolean)">
            <summary>
            Helper function to open a script file in the script panel
            </summary>
            <param name="filename"></param>
            <param name="switchToScriptLayout">set to false to avoid a layout switch</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ScriptFilenameEditor.AddFileNameToMRU(System.String)">
            <summary>
            Helper function to add filename to MRU list
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:CSharpFramework.Helper.HSL">
            <summary>
            HSL color representation
            </summary>
        </member>
        <member name="M:CSharpFramework.Helper.RGB_HSL.SetBrightness(System.Drawing.Color,System.Single)">
            <summary>
            Sets the absolute brightness of a colour
            </summary>
            <param name="c">Original colour</param>
            <param name="brightness">The luminance level to impose</param>
            <returns>an adjusted colour</returns>
        </member>
        <member name="M:CSharpFramework.Helper.RGB_HSL.ModifyBrightness(System.Drawing.Color,System.Single)">
            <summary>
            Modifies an existing brightness level
            </summary>
            <remarks>
            To reduce brightness use a number smaller than 1. To increase brightness use a number larger tnan 1
            </remarks>
            <param name="c">The original colour</param>
            <param name="brightness">The luminance delta</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:CSharpFramework.Helper.RGB_HSL.SetSaturation(System.Drawing.Color,System.Single)">
            <summary>
            Sets the absolute saturation level
            </summary>
            <remarks>Accepted values 0-1</remarks>
            <param name="c">An original colour</param>
            <param name="Saturation">The saturation value to impose</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:CSharpFramework.Helper.RGB_HSL.ModifySaturation(System.Drawing.Color,System.Single)">
            <summary>
            Modifies an existing Saturation level
            </summary>
            <remarks>
            To reduce Saturation use a number smaller than 1. To increase Saturation use a number larger tnan 1
            </remarks>
            <param name="c">The original colour</param>
            <param name="Saturation">The saturation delta</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:CSharpFramework.Helper.RGB_HSL.SetHue(System.Drawing.Color,System.Single)">
            <summary>
            Sets the absolute Hue level
            </summary>
            <remarks>Accepted values 0-1</remarks>
            <param name="c">An original colour</param>
            <param name="Hue">The Hue value to impose</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:CSharpFramework.Helper.RGB_HSL.ModifyHue(System.Drawing.Color,System.Single)">
            <summary>
            Modifies an existing Hue level
            </summary>
            <remarks>
            To reduce Hue use a number smaller than 1. To increase Hue use a number larger tnan 1
            </remarks>
            <param name="c">The original colour</param>
            <param name="Hue">The Hue delta</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:CSharpFramework.Helper.RGB_HSL.HSL_to_RGB(CSharpFramework.Helper.HSL)">
            <summary>
            Converts a colour from HSL to RGB
            </summary>
            <remarks>Adapted from the algoritm in Foley and Van-Dam</remarks>
            <param name="hsl">The HSL value</param>
            <returns>A Color structure containing the equivalent RGB values</returns>
        </member>
        <member name="M:CSharpFramework.Helper.RGB_HSL.RGB_to_HSL(System.Drawing.Color)">
            <summary>
            Converts RGB to HSL
            </summary>
            <remarks>Takes advantage of whats already built in to .NET by using the Color.GetHue, Color.GetSaturation and Color.GetBrightness methods</remarks>
            <param name="c">A Color to convert</param>
            <returns>An HSL value</returns>
        </member>
        <member name="M:CSharpFramework.Helper.ColorHelper.ClampChannel(System.Int32)">
            <summary>
            A simple helper function to keep the color channels values inside its bounds [0..255].
            The original color channel value gets modified only if it is ouside its bounds.
            </summary>
            <param name="value">The original color channel value</param>
            <returns>The clamped color channel value</returns>
        </member>
        <member name="T:CSharpFramework.Docking.DockingContainer">
            <summary>
            Container class for dockable panels.
            Additionally provides functionality to save and restore layouts.
            </summary>
        </member>
        <member name="M:CSharpFramework.Docking.DockingContainer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Docking.DockingContainer.RegisterPanel(CSharpFramework.Docking.DockableForm)">
            <summary>
            Register a panel in the conainer.
            Only registered panels can be accessed when loading a layout configuration.
            </summary>
            <param name="panel"></param>
        </member>
        <member name="M:CSharpFramework.Docking.DockingContainer.UnregisterPanel(CSharpFramework.Docking.DockableForm)">
            <summary>
            Unregister a panel in the conainer.
            </summary>
            <param name="panel"></param>
        </member>
        <member name="M:CSharpFramework.Docking.DockingContainer.FindPanel(System.String)">
            <summary>
            Searches a panel by name (persistent string) and returns it.
            Used to deserializes layout configurations.
            </summary>
            <param name="persistString"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Docking.DockingContainer.CloseMissingPanels">
            <summary>
            Iterates the available panels and closes all MissingPanel instances
            </summary>
        </member>
        <member name="F:CSharpFramework.Docking.DockingContainer._availablePanels">
            <summary>
            List of available (registered) panels
            </summary>
        </member>
        <member name="M:CSharpFramework.Docking.DockingContainer.LoadLayout(System.String,System.Boolean)">
            <summary>
            Loads the current layout from file (XML format)
            </summary>
            <param name="fileName"></param>
            <param name="forceReload">If specified the layout gets loaded even if it's the active one</param>
        </member>
        <member name="M:CSharpFramework.Docking.DockingContainer.SaveLayout(System.String)">
            <summary>
            Saves the current layout to file (XML format)
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:CSharpFramework.Docking.DockingContainer.GetContentFromPersistString(System.String)">
            <summary>
            Returns the corresponding panel instance for the given persistent string
            </summary>
            <param name="persistString"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Docking.DockingContainer.m_deserializeDockContent">
            <summary>
            Deserialisation callback for resolving persistent strings to panel instances
            </summary>
        </member>
        <member name="P:CSharpFramework.Docking.DockingContainer.AvailablePanels">
            <summary>
            Gets a list of all available (registered) panels
            </summary>
        </member>
        <member name="P:CSharpFramework.Docking.DockingContainer.PanelsMenuItem">
            <summary>
            Gets the panels menu item for showing/hiding the available panels
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.TimeOfDayDlg.LoadCurvePresets">
            <summary>
            Helper function to load curve presets
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.TimeOfDayDlg.RestoreCurvePresets">
            <summary>
            Helper function to restore the default curve presets
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.TimeOfDayDlg.CreatePresetPreview(System.String,CSharpFramework.BaseTypes.ColorCurves)">
            <summary>
            Create a preset preview box (color curve)
            </summary>
            <param name="name">Name of the preset</param>
            <param name="curve">Curve that is assigned tyo the gradient preview box</param>
            <returns>The gradient preview box</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.TimeOfDayDlg.CreatePresetPreview(System.String,CSharpFramework.BaseTypes.PointList)">
            <summary>
            Create a preset preview box (single curve)
            </summary>
            <param name="name">Name of the preset</param>
            <param name="curve">Curve that is assigned tyo the gradient preview box</param>
            <returns>The gradient preview box</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.TimeOfDayDlg.CanUsePresetName(System.String)">
            <summary>
            Check whether the given name can be used for a preset
            </summary>
            <param name="name">Name of Preset</param>
            <returns>TRUE if preset name is ok, FALSE otherwise</returns>
        </member>
        <member name="F:CSharpFramework.Dialogs.TimeOfDayDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.TimeOfDayDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.TimeOfDayDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.TimeOfDayDlg.TimeOfDay">
            <summary>
            Original TimeOfDay property
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.TimeOfDayDlg.DefaultTimeOfDayColorCurvePresetPath">
            <summary>
            Gets the path to the directory with the (non-writeable) default curve presets
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.TimeOfDayDlg.UserTimeOfDayColorCurvePresetPath">
            <summary>
            Gets the path to the customized curve presets of the user
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.TimeOfDayDlg.TimeOfDayColorCurveFileExtension">
            <summary>
            File extension of the single curve preset file (VSC - Vision Single Curve)
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.TimeOfDayDlg.UserSingleCurvePresetPath">
            <summary>
            Gets the path to the customized curve presets of the user
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.TimeOfDayDlg.SingleCurveFileExtension">
            <summary>
            File extension of the single curve preset file (VSC - Vision Single Curve)
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.TimeOfDayEditor">
            <summary>
            Type editor that opens a modal time of day dialog
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.TimeOfDayEditor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.TimeOfDayEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.TimeOfDayEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.TimeOfDayEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Dialogs.ScriptPanel">
            <summary>
            Summary description for ScriptPanel.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.#ctor(CSharpFramework.Docking.DockingContainer)">
            <summary>
            Constructor
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.ScriptPanel.GlobalSettings">
            <summary>
            One instance of script settings
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.AddDocument(System.String)">
            <summary>
            Opens a text file and adds it to the open documents
            </summary>
            <param name="absFilename">The absolute file name of the script file to open</param>
            <returns>true on success, otherwise false</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.DocGotoLine(System.String,System.Int32)">
            <summary>
            Selects a document (and opens it when necessary) and jumps to a specific line
            </summary>
            <param name="Filename">the document to open</param>
            <param name="Linenumber">the line number to go to</param>
            <returns>true if the line was reachable</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.SaveDocument(CSharpFramework.Controls.SourceCodeEditorPanel)">
            <summary>
            Save the document
            </summary>
            <param name="doc">document to save</param>
            <returns>enum containing the result of the saving process</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.SaveDocument(CSharpFramework.Controls.SourceCodeEditorPanel,System.String)">
            <summary>
            Save the document (as)
            </summary>
            <param name="doc">document to save</param>
            <param name="absFilename">optional filename (absolute)</param>
            <returns>enum containing the result of the saving process</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.SaveDocumentAs(CSharpFramework.Controls.SourceCodeEditorPanel)">
            <summary>
            Save the document as (shows a dialog to choose a location and filename)
            </summary>
            <param name="doc">document to save</param>
            <returns>true on success</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.ValidateScriptDocument(System.String)">
            <summary>
            Overridable function
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.OpenHelpWindow">
            <summary>
            Overridable function
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.OnClose">
            <summary>
            called when the documents are to be closed
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.SaveAllDocuments">
            <summary>
            Saves all open documents
            </summary>
            <returns>true if all were saved correctly</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.CloseDocument(System.String)">
            <summary>
            Removes a document from the panel
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.CloseAllDocuments">
            <summary>
            Closes all open documents
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.ReloadAllDocuments">
            <summary>
            Reloads all open documents
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.ScriptPanel_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            If the script panel becomes visible it should show the script of the current shape selection
            Same behavior as EditorManager_ShapeSelectionChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.SourceControl_CaretChange(System.Object,System.EventArgs)">
            <summary>
            Caret changed event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.SourceControl_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            KeyDown event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.SourceControl_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            KeyUp event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.RequestAutoList(System.Boolean)">
            <summary>
            Overridable function
            </summary>
        </member>
        <member name="E:CSharpFramework.Dialogs.ScriptPanel.DocumentEvent">
            <summary>
            The document event of the ScriptPanel
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ScriptPanel.Instance">
            <summary>
            Gets a global instance of the script panel (set by main form)
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ScriptPanel.CurrentPanel">
            <summary>
            returns the current SourceCodeEditorPanel
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.ScriptPanel.FileOpResult">
            <summary>
            Enum containing file save operation results as
            bit values
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.ScriptPanel.DocumentEventHandler">
            <summary>
            The event handler for document events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:CSharpFramework.Dialogs.ScriptPanel.DocumentEventArgs">
            <summary>
            The class describing the event arguments for document events
            (document opened, closed)
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ScriptPanel.DocumentEventArgs.#ctor(CSharpFramework.Controls.SourceCodeEditorPanel,System.Boolean)">
            <summary>
            Default constructor which takes the editor panel and a flag indicating if the document was closed
            </summary>
            <param name="EditorPanel">The editor panel which was the source of the event</param>
            <param name="Closed">True if the document was closed</param>
        </member>
        <member name="P:CSharpFramework.Dialogs.ScriptPanel.DocumentEventArgs.EditorPanel">
            <summary>
            Returns the SourceCodeEditorPanel of this event
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ScriptPanel.DocumentEventArgs.CloseEvent">
            <summary>
            Returns true if the event was a document closing event
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.ScriptPanel.ScriptSettings">
            <summary>
            Used to store some global script editing settings. Accessible via VisionScriptPanel.GlobalSettings
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.PositionCurveDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.PositionCurveDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.PositionCurveDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.PositionCurveDlg.TriggerCurveChanged">
            <summary>
            UI
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.PositionCurveDlg.curveEditorBox_OnCurveChanged(System.Object,System.EventArgs)">
            <summary>
            This function is called whenever the curve is change in the curve editor control.
            Thus, the event will be forwarded and listeners from outside the curve editor dialog
            can listen to curve changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:CSharpFramework.Dialogs.PositionCurveDlg._originalCurves">
            <summary>
            This curve is used for keeping a reference to the original curve
            </summary>
        </member>
        <member name="E:CSharpFramework.Dialogs.PositionCurveDlg.OnCurveChanged">
            <summary>
            Event that is triggered when the value changed
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.PositionCurveDlg.Curves">
            <summary>
            Gets or sets the curve for the editor. The set function clones it
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.PositionCurveDlg.CurvesInstantUpdate">
            <summary>
            Gets or sets the curve for the editor. These function should be used when instant update is required.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.PositionCurveDlg.GridTimeMaximum">
            <summary>
            Gets or sets the Grid Time Maximum
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.PositionCurveDlg.OnCurveChangedEventHandler">
            <summary>
            Delegate
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.FieldOfViewDlg">
            <summary>
            Dialog for editing the field of view.
            
            The initial value is passed to the constructor. The new value can be
            queried with the HorizontalFOV value.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.FieldOfViewDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.FieldOfViewDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.FieldOfViewDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.FieldOfViewDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.FieldOfViewDlg.UpdateControls">
            <summary>
            Puts the settings into the controls
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.FieldOfViewDlg.Apply(System.Boolean)">
            <summary>
            Reads settings from controls and applies it to the engine
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.FieldOfViewDlg.Settings">
            <summary>
            Gets or sets the setting structure on the dialog. The set function clones the structure
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.EditorSettingsDlg">
            <summary>
            Dialog for editin global editor settings (basically just a property grid).
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.EditorSettingsDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.EditorSettingsDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.EditorSettingsDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.EditorSettingsDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.EditorSettingsDlg.Settings">
            <summary>
            Gets or sets the settings
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.AssemblyWarningDlg">
            <summary>
            Dialog that appears at startup to show assembly inconsistencies.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.AssemblyWarningDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.AssemblyWarningDlg.#ctor">
            <summary>
            Shows a warning dialog if the assemblies are mixed (Debug/Release)
            A solution is displayed as well.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.AssemblyWarningDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.AssemblyWarningDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.SliderControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.SliderControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Controls.SliderControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SliderControl.SliderPos">
            <summary>
            Gets or sets the slider position [0 .. WIDTH]
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SliderControl.Value">
            <summary>
            Gets or sets the slider value [MIN_VALUE .. MAX_VALUE]
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SliderControl.Vertical">
            <summary>
            Gets or sets the orientation of this control
            </summary>
        </member>
        <member name="T:CSharpFramework.Contexts.ITabletContext">
            <summary>
            Base class of a tablet context. A tablet context handles the tablet input in the engine view.
            For instance the tablet input is active in the terrain editing contexts.
            </summary>
        </member>
        <member name="M:CSharpFramework.Contexts.ITabletContext.Activate">
            <summary>
            Activates the tablet context, thus the status of the tablet input can be retrieved.
            </summary>
            <returns>TRUE if activating the context succeeded, FALSE otherwise.</returns>
        </member>
        <member name="M:CSharpFramework.Contexts.ITabletContext.Deactivate">
            <summary>
            Deactivates the tablet context, thus the status of the tablet input cannot be retrieved.
            </summary>
            <returns>TRUE if deactivating the context succeeded, FALSE otherwise.</returns>
        </member>
        <member name="P:CSharpFramework.Contexts.ITabletContext.IsAvailable">
            <summary>
            Determines whether the tablet context is available, meaning whether a tablet device could 
            be found.
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.ITabletContext.IsActive">
            <summary>
            Determines whether the tablet context is active, meaning whether a tablet device could be 
            found and the context has been initialized properly.
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.ITabletContext.Button">
            <summary>
            Gets the active button ID (defined in the respective tablet implementation)
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.ITabletContext.IsPressed">
            <summary>
            Helper value determines if pen (tip or eraser) is pressed 
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.ITabletContext.IsPenPressed">
            <summary>
            Helper value that determines if pen tip is pressed
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.ITabletContext.IsEraserPressed">
            <summary>
            Helper value that determines if eraser is pressed
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.ITabletContext.Pressure">
            <summary>
            Gets the pressure value [0..1]
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.ITabletContext.Azimuth">
            <summary>
            Gets the azimuth value [0..360] (Rotation of the pen)
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.ITabletContext.Altitude">
            <summary>
            Gets the altitude value [0..90] (Tilt of the pen)
            </summary>
        </member>
        <member name="T:CSharpFramework.Contexts.NullTabletContext">
            <summary>
            The null tablet context is used when no other tablet context could be found or initialized.
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.DependentPropertiesAttribute">
            <summary>
            Attribute to specify a list of dependent properties
            
            Use this attribute to setup a list of dependent properties for a property. The SetPropertyAction
            takes care that dependent properties are correctly restored during undo/redo operations whenever
            the "parent" property is being modified. 
            
            This attribute is used by the EntityClass property in the EntityShape to setup the EntityProperties
            as a dependent property.
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.DependentPropertiesAttribute.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="dependentProperties">string array of dependent properties</param>
        </member>
        <member name="P:CSharpFramework.Actions.DependentPropertiesAttribute.DependentProperties">
            <summary>
            Access the dependent property string array
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.IPropertyAccessor">
            <summary>
            Common interface for setting and getting property values, both for standard .NET properties
            and for dynamic properties. Provides unified access to property values.
            </summary>
        </member>
        <member name="F:CSharpFramework.Actions.IPropertyAccessor._component">
            <summary>
            Property instance (e.g. property collection or property)
            </summary>
        </member>
        <member name="F:CSharpFramework.Actions.IPropertyAccessor._propertyName">
            <summary>
            Property name
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.IPropertyAccessor.#ctor(System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="component">property component (e.g. property collectio or property)</param>
            <param name="propertyName">property name</param>
        </member>
        <member name="M:CSharpFramework.Actions.IPropertyAccessor.CreateInstance(System.Object,System.String)">
            <summary>
            Creates the corresponding IPropertyAccessor instance for the specified property.
            </summary>
            <param name="component">property component</param>
            <param name="propertyName">property name</param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Actions.IPropertyAccessor.Component">
            <summary>
            Gets the property component (typically either a property collection or a property)
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.IPropertyAccessor.PropertyName">
            <summary>
            Gets the property name
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.IPropertyAccessor.PropertyType">
            <summary>
            Gets the type of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.IPropertyAccessor.Value">
            <summary>
            Sets or gets the current value of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.IPropertyAccessor.IsValid">
            <summary>
            Indicates whether the accessor could be successfully initializes. If not, then the specified property does not exist in the component.
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.IPropertyAccessor.DependentProperties">
            <summary>
            Gets the names of the dependent properties (as defined via the DependentProperties attribute)
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.StandardPropertyAccessor">
            <summary>
            IPropertyAccessor Implementation for standard .NET properties
            </summary>
        </member>
        <member name="F:CSharpFramework.Actions.StandardPropertyAccessor._propInfo">
            <summary>
            property info gathered via reflection
            </summary>
        </member>
        <member name="F:CSharpFramework.Actions.StandardPropertyAccessor._dependentProperties">
            <summary>
            dependent properties
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.StandardPropertyAccessor.#ctor(System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="component">property component (typically the property collection instance)</param>
            <param name="propertyName">property name</param>
        </member>
        <member name="P:CSharpFramework.Actions.StandardPropertyAccessor.Value">
            <summary>
            Sets or gets the current value of the property (overriden)
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.StandardPropertyAccessor.PropertyType">
            <summary>
            Gets the type of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.StandardPropertyAccessor.IsValid">
            <summary>
            Indicates whether the accessor could be successfully initializes. If not, then the specified property does not exist in the component.
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.StandardPropertyAccessor.DependentProperties">
            <summary>
            Gets the names of the dependent properties (as defined via the DependentProperties attribute)
            (overridden)
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.DynamicPropertyAccessor">
            <summary>
            IPropertyAccessor Implementation for dynamic properties (see DynamicPropertyCollection class)
            </summary>
        </member>
        <member name="F:CSharpFramework.Actions.DynamicPropertyAccessor._property">
            <summary>
            Dynamic property instance
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.DynamicPropertyAccessor.#ctor(CSharpFramework.DynamicProperties.DynamicPropertyCollection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="collection">dynamic property collection instance</param>
            <param name="propertyName">property name</param>
        </member>
        <member name="P:CSharpFramework.Actions.DynamicPropertyAccessor.Value">
            <summary>
            Sets or gets the current value of the property (overriden)
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.DynamicPropertyAccessor.PropertyType">
            <summary>
            Gets the type of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.DynamicPropertyAccessor.IsValid">
            <summary>
            Indicates whether the accessor could be successfully initializes. If not, then the specified property does not exist in the component.
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.DynamicPropertyAccessor.DependentProperties">
            <summary>
            Gets the names of the dependent properties (not supported for dynamic properties)
            (overriden)
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.SetPropertyAction">
            <summary>
            Action for setting the value of a property
            Sends a PropertyChanged event whenever the value of the property is changed
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SetPropertyAction.#ctor(System.Object,System.String,System.Object,System.String)">
            <summary>
            Constructor that takes information about the shape property to be changed
            </summary>
            <param name="component">The object that owns the property, e.g. a shape or a property collection</param>
            <param name="propertyName">The name of the property to change</param>
            <param name="newValue">Object that represents the new value of the property</param>
            <param name="orgPropertyName">Optional property name that was the cause for the property change (might have been a sub-property). Set to null if not needed.</param> 
        </member>
        <member name="M:CSharpFramework.Actions.SetPropertyAction.#ctor(System.Object,System.String,System.Object)">
            <summary>
            Constructor that takes information about the shape property to be changed
            </summary>
            <param name="component">The object that owns the property, e.g. a shape or a property collection</param>
            <param name="propertyName">The name of the property to change</param>
            <param name="newValue">Object that represents the new value of the property</param>
        </member>
        <member name="M:CSharpFramework.Actions.SetPropertyAction.CreateSetPropertyAction(System.Object,System.String,System.Object)">
            <summary>
            Instead of using the constructor of SetPropertyAction, please use this function to create a new instance. Since this will use the factory where the user can inject his own SetPropertyAction factory
            </summary>
            <param name="component">The object that owns the property, e.g. a shape or a property collection</param>
            <param name="propertyName">The name of the property to change</param>
            <param name="newValue">object that represents the new value of the property</param>
            <returns>A new instance of SetPropertyAction</returns>
        </member>
        <member name="M:CSharpFramework.Actions.SetPropertyAction.CreateSetPropertyAction(System.Object,System.String,System.Object,System.String)">
            <summary>
            Instead of using the constructor of SetPropertyAction, please use this function to create a new instance. Since this will use the factory where the user can inject his own SetPropertyAction factory
            </summary>
            <param name="component">The object that owns the property, e.g. a shape or a property collection</param>
            <param name="propertyName">The name of the property to change</param>
            <param name="newValue">object that represents the new value of the property</param>
            <param name="orgPropertyName">Optional property name that was the cause for the property change (might have been a sub-property). Set to null if not needed.</param>
            <returns>A new instance of SetPropertyAction</returns>
        </member>
        <member name="M:CSharpFramework.Actions.SetPropertyAction.Do">
            <summary>
            Overridden Do function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SetPropertyAction.Undo">
            <summary>
            Overridden Undo function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SetPropertyAction.ShortName">
            <summary>
            Overridden short name function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SetPropertyAction.LongName">
            <summary>
            Overridden long name function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SetPropertyAction.Valid">
            <summary>
            Overridden valid function (checks layer editable flag)
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SetPropertyAction.IconIndex">
            <summary>
            Overridden icon index function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SetPropertyAction.IconImage">
            <summary>
            Static function to return the image used to display this type of action in the history
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SetPropertyAction.NewValue">
            <summary>
            Gets the new property value set by this action
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.SetPropertyAction.DependentProperty">
            <summary>
            Helper class for backuping up and restoring the dependent properties
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.SetPropertiesAction">
            <summary>
            Group action to set multiple properties
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SetPropertiesAction.#ctor">
            <summary>
            Empty Constructor.
            Use the Add function to add SetPropertyAction instances to this group action.
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SetPropertiesAction.Add(CSharpFramework.IAction)">
            <summary>
            Adds the passed SetPropertyAction instance to this group action
            </summary>
            <param name="action">Action to added to this group</param>
        </member>
        <member name="P:CSharpFramework.Actions.SetPropertiesAction.IconIndex">
            <summary>
            Overridden icon index function
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.ISetPropertyActionProvider">
            <summary>
            Implement this interface in case the property grid should use a custom action rather than base class SetPropertyAction
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.ISetPropertyActionProvider.GetSetPropertyAction(System.String,System.Object)">
            <summary>
            Implement this function to provide a custom action when a property should be changed. The return value can be null
            to default to standard
            </summary>
            <param name="propertyName"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.ActionRecording.IRecordItem.Tag">
            <summary>
            For custom use - e.g. tree view item
            </summary>
        </member>
        <member name="T:CSharpFramework.View.HotSpotShapeViewIcon">
            <summary>
            Hotspot class that selects its owner shape upon click. Used as a default hotspot class for shape view icons
            </summary>
        </member>
        <member name="T:CSharpFramework.TestManager">
            <summary>
            Manager that has a list of test suites to run
            </summary>
        </member>
        <member name="F:CSharpFramework.TestManager.LastResult">
            <summary>
            Provides result information from the last run. Can be null
            </summary>
        </member>
        <member name="F:CSharpFramework.TestManager.TestsCancelled">
            <summary>
            Indicating if the tests were cancelled.
            </summary>
        </member>
        <member name="M:CSharpFramework.TestManager.ExecuteTests(System.Boolean,System.Boolean)">
            <summary>
            Runs all tests in the Suite
            </summary>
            <param name="bShowDialog">specifies whether the test selection dialog will be displayed before the tests are started</param>
            <param name="bOpenOutput">If true, show XML results in explorer</param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.TestManager.TestSuites">
            <summary>
            Acces the test suites
            </summary>
        </member>
        <member name="P:CSharpFramework.TestManager.IsRunning">
            <summary>
            Indicates whether the automated tests are currently running
            </summary>
        </member>
        <member name="P:CSharpFramework.TestManager.Helpers">
            <summary>
            Gets the interface for accessing the test helper functions and properties
            </summary>
        </member>
        <member name="T:CSharpFramework.EventCollector">
            <summary>
            [COMMENT]
            </summary>
        </member>
        <member name="M:CSharpFramework.EventCollector.#ctor(NUnit.Util.ConsoleWriter)">
            <summary>
            Constructor
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:CSharpFramework.EventCollector.RunStarted(NUnit.Core.Test[])">
            <summary>
            [COMMENT]
            </summary>
            <param name="tests"></param>
        </member>
        <member name="M:CSharpFramework.EventCollector.RunFinished(NUnit.Core.TestResult[])">
            <summary>
            [COMMENT]
            </summary>
            <param name="results"></param>
        </member>
        <member name="M:CSharpFramework.EventCollector.RunFinished(System.Exception)">
            <summary>
            [COMMENT]
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:CSharpFramework.EventCollector.TestFinished(NUnit.Core.TestCaseResult)">
            <summary>
            [COMMENT]
            </summary>
            <param name="testResult"></param>
        </member>
        <member name="M:CSharpFramework.EventCollector.TestStarted(NUnit.Core.TestCase)">
            <summary>
            [COMMENT]
            </summary>
            <param name="testCase"></param>
        </member>
        <member name="M:CSharpFramework.EventCollector.SuiteStarted(NUnit.Core.TestSuite)">
            <summary>
            Test
            </summary>
            <param name="suite"></param>
        </member>
        <member name="M:CSharpFramework.EventCollector.SuiteFinished(NUnit.Core.TestSuiteResult)">
            <summary>
            [COMMENT]
            </summary>
            <param name="suiteResult"></param>
        </member>
        <member name="M:CSharpFramework.EventCollector.UnhandledException(System.Exception)">
            <summary>
            [COMMENT]
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:CSharpFramework.ShortCuts.ReservedShortCut">
            <summary>
            Implements ShortCutAction to indicate a reserved binding (copy/paste/...)
            </summary>
        </member>
        <member name="T:CSharpFramework.ShortCuts.ShortCutAction">
            <summary>
            Defines a single shortcut key binding
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutAction.#ctor(System.Windows.Forms.Keys)">
            <summary>
            Constructor
            </summary>
            <param name="defaultKey">The default key binding</param>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutAction.Do">
            <summary>
            Overridable that actually performs the action
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutAction.OnShortCutChanged(System.Windows.Forms.Keys)">
            <summary>
            Notification that the short cut changed
            </summary>
            <param name="oldVal"></param>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutAction.GetKeyCode(System.Windows.Forms.Keys)">
            <summary>
            Extracts the keycode from the passed shortcut
            </summary>
            <param name="shortcut"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutAction.GetModifiers(System.Windows.Forms.Keys)">
            <summary>
            Extracts the modifier key state from the passed shortcut
            </summary>
            <param name="shortcut"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutAction.Clone">
            <summary>
            Clones this action (sets active to false)
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.ActionName">
            <summary>
            Unique name of the action (to appear in the dialog)
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.Category">
            <summary>
            Optional category (to appear in the dialog)
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.Description">
            <summary>
            Optional action description
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.Enabled">
            <summary>
            Overridable to enable/disable this action. Can dynamically change
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.Configurable">
            <summary>
            Non-Configurable keys show up in the menu as read-only and also do not get saved
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.Reserved">
            <summary>
            If true, the shortcut only serves the purpose of reserving the corresponding key. 
            It won't get processed in this case. Useful for reserved specific system hotkeys.
            Should not be changed during runtime.
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.Hidden">
            <summary>
            Actions with the Hidden flag are not shown in the config dialog.
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.Image">
            <summary>
            Optional icon, yet unused
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.Assigned">
            <summary>
            Only false at startup, i.e. no default assigned yet
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.Active">
            <summary>
            Activates or deactivates this hotkey
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.Shortcut">
            <summary>
            Gets or sets the shortcut key binding
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.ShortcutString">
            <summary>
            Same as Shortcut.ToString()
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.DefaultShortcut">
            <summary>
            Gets or sets the default key binding
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.FullName">
            <summary>
            Creates the Category\ActionName string that is used in the FindByName function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.KeyCode">
            <summary>
            Gets the keycode this shortcut is assigned to
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutAction.Modifiers">
            <summary>
            Gets the expected state of the modifier keys for this shortcut
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ReservedShortCut.#ctor(System.String,System.Windows.Forms.Keys)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="key"></param>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ReservedShortCut.ActionName">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ReservedShortCut.Description">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ReservedShortCut.Category">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ReservedShortCut.Enabled">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ReservedShortCut.Active">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ReservedShortCut.Configurable">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ReservedShortCut.Reserved">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="T:CSharpFramework.ShortCuts.PerspectiveModeShortCut">
            <summary>
            Implements ShortCutAction that switches the perspective mode of the active view
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.PerspectiveModeShortCut.#ctor(CSharpFramework.VisionViewBase.ProjectionMode_e,System.Windows.Forms.Keys)">
            <summary>
            Constructor
            </summary>
            <param name="mode"></param>
            <param name="defaultKey"></param>
        </member>
        <member name="M:CSharpFramework.ShortCuts.PerspectiveModeShortCut.Do">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.ShortCuts.PerspectiveModeShortCut.ActionName">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.PerspectiveModeShortCut.Category">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.PerspectiveModeShortCut.Description">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.PerspectiveModeShortCut.Enabled">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeLinkPath">
            <summary>
            Helper class to store the link between two shapes as a string.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeLinkPath.#ctor(CSharpFramework.Shapes.ShapeLink,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="link"></param>
            <param name="bDirectSerialization">If true, then the shape link is serialized directly without going through unique shape ID. This is only possible
            when the link connects two shapes in the same layer.</param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeLinkPath.GetLink(CSharpFramework.IScene)">
            <summary>
            Get the link from the specified scene
            </summary>
            <param name="scene"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeLinkPath.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeLinkPath.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Overridden function
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeLinkPath.Link">
            <summary>
            Get the link from the active scene
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.PropertyKeyValuePair">
            <summary>
            helper class that holds a name and a value. It additionally can create actions for setting properties on shapes and components
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.PropertyKeyValuePair.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="name">sets the name of the property</param>
            <param name="value">sets the value of the property</param>
        </member>
        <member name="M:CSharpFramework.Shapes.PropertyKeyValuePair.CreateAction(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Creates an action for setting a property on the passed shape
            </summary>
            <param name="targetShape">shape the property will be set on</param>
            <returns>action which sets the properties on the passed shape when being executed</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PropertyKeyValuePair.CreateAction(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            Creates an action for setting a property on the passed component
            </summary>
            <param name="targetShape">component the property will be set on</param>
            <returns>action which sets the properties on the passed component when being executed</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PropertyKeyValuePair.CreateAction(CSharpFramework.ShapeCollection)">
            <summary>
            Creates an action for setting the properties on multiple shapes
            </summary>
            <param name="targetShapes">list of shapes the property shall be applied to </param>
            <returns>action which sets the properties on the passed shapes when being executed</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PropertyKeyValuePair.CreateAction(CSharpFramework.Scene.ShapeComponent[])">
            <summary>
            Creates an action for setting the properties on multiple components
            </summary>
            <param name="targetComponents">list of components the property shall be applied to</param>
            <returns>action which sets the properties on the passed shapes when being executed</returns>
        </member>
        <member name="P:CSharpFramework.Shapes.PropertyKeyValuePair.Value">
            <summary>
            sets or gets the value of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PropertyKeyValuePair.Name">
            <summary>
            sets or gets the name of the property
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.AnchorShape.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="nodeName"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.AnchorShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.AnchorShape.CreateEngineInstance(System.Boolean)">
            <summary>
            Create the engine instance
            </summary>
            <param name="bCreateChildren"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.AnchorShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            overridden function to render the shape
            </summary>
            <param name="view">destination view</param>
            <param name="mode">render mode</param>
        </member>
        <member name="M:CSharpFramework.Shapes.AnchorShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Shapes.AnchorShape.ParentingMode">
            <summary>
            Sets parenting mode to scene graph
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.AnchorShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Shapes.AnchorLinkTarget">
            <summary>
            Link target which is provided by the anchors
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.AnchorLinkTarget.#ctor(CSharpFramework.Shapes.Shape3D)">
            <summary>
            Standard constructor
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.AnchorLinkTarget.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Default constructor used by the factory class
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.AnchorLinkTarget.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:CSharpFramework.Scene.SkyLayerPropBase">
            <summary>
            Base class that wraps sky layer properties
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropBase.CAT_BASE">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropBase.CATORDER_BASE">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropBase.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayerPropBase.#ctor(CSharpFramework.Scene.SkyLayer)">
            <summary>
            Constructor
            </summary>
            <param name="_layer"></param>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropBase.Layer">
            <summary>
            the sky layer that is modified by this wrapper class
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropBase.Mapping">
            <summary>
            get or set skylayer mapping type
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropBase.Color">
            <summary>
            get or set skylayer color
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropBase.Intensity">
            <summary>
            get or set skylayer blending type
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.SkyLayerPropCube">
            <summary>
            Property wrapper for cubemap sky
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropCube.CAT_TEXTURING">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropCube.CATORDER_TEXTURING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropCube.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayerPropCube.#ctor(CSharpFramework.Scene.SkyLayer)">
            <summary>
            Constructor
            </summary>
            <param name="_layer"></param>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropCube.CubeTextureRight">
            <summary>
            Texture for the right sky cube face
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropCube.CubeTextureLeft">
            <summary>
            Texture for the left sky cube face
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropCube.CubeTextureFront">
            <summary>
            Texture for the front sky cube face
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropCube.CubeTextureBack">
            <summary>
            Texture for the back sky cube face
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropCube.CubeTextureTop">
            <summary>
            Texture for the top sky cube face
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropCube.CubeTextureBottom">
            <summary>
            Texture for the bottom sky cube face
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.SkyLayerPropSphere">
            <summary>
            Property wrapper for sphere mapping
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropSphere.CAT_TEXTURING">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropSphere.CATORDER_TEXTURING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropSphere.CAT_SCALING">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropSphere.CATORDER_SCALING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropSphere.CAT_SCROLLING">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropSphere.CATORDER_SCROLLING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropSphere.CAT_SPECIAL">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropSphere.CATORDER_SPECIAL">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropSphere.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayerPropSphere.#ctor(CSharpFramework.Scene.SkyLayer)">
            <summary>
            Constructor
            </summary>
            <param name="_layer"></param>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropSphere.Texture">
            <summary>
            texture filename
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropSphere.ScrollX">
            <summary>
            Layer scrolling in x-direction
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropSphere.ScrollY">
            <summary>
            Layer scrolling in y-direction
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropSphere.ScaleX">
            <summary>
            Texture scaling in x-direction
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropSphere.ScaleY">
            <summary>
            Texture scaling in y-direction
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropSphere.HeightOfs">
            <summary>
            Height offset for sphere
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropSphere.SphereCurvedness">
            <summary>
            Curvedness of spherical layers. Larger values make the sky appear flat.
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.SkyLayerPropCylinder">
            <summary>
            Property wrapper for sphere mapping
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropCylinder.CAT_TEXTURING">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropCylinder.CATORDER_TEXTURING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerPropCylinder.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayerPropCylinder.#ctor(CSharpFramework.Scene.SkyLayer)">
            <summary>
            Constructor
            </summary>
            <param name="_layer"></param>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropCylinder.Texture">
            <summary>
            texture filename
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerPropCylinder.HeightOfs">
            <summary>
            Height offset for sphere
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.SkyLayer">
            <summary>
            Represents a single sky layer in Vision
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayer.ToString">
            <summary>
            Get the layer name
            </summary>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer.ParentSky">
            <summary>
            Get the parent sky
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayer.UpdateParent">
            <summary>
            Update the sky
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayer.Clone">
            <summary>
            Clones the config
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._layerName">
            <summary>
            Optional
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._cubeLeft">
            <summary>
            cubemap texture names
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._cubeRight">
            <summary>
            cubemap texture names
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._cubeFront">
            <summary>
            cubemap texture names
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._cubeBack">
            <summary>
            cubemap texture names
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._cubeTop">
            <summary>
            cubemap texture names
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._cubeBottom">
            <summary>
            cubemap texture names
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._texture">
            <summary>
            single texture name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._mappingType">
            <summary>
            layer mapping type
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._Color">
            <summary>
            Layer color (alpha determines intensity)
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._fScrollX">
            <summary>
            layer scroll x
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._fScrollY">
            <summary>
            layer scroll y
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._fScaleX">
            <summary>
            mapping scale x
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._fScaleY">
            <summary>
            mapping scale y
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._fHeightPos">
            <summary>
            height pos
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer._fHeightScale">
            <summary>
            height scale
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayer.PropertyObject">
            <summary>
            Returns a property object instance that represents the respective layer type
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.SkyLayer.SkyMappingType_e">
            <summary>
            Engine sky layer mapping types
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer.SkyMappingType_e.Spherical">
            <summary>
            Spherical mapping
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer.SkyMappingType_e.Cubemap">
            <summary>
            Cubemap mapping
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayer.SkyMappingType_e.Cylindrical">
            <summary>
            Cylindrical mapping
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.SkyLayerCollection">
            <summary>
            Collection of sky layers
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayerCollection.#ctor(CSharpFramework.Scene.SkyConfig)">
            <summary>
            Constructor
            </summary>
            <param name="parent"></param>
        </member>
        <member name="F:CSharpFramework.Scene.SkyLayerCollection.ParentSky">
            <summary>
            access the owner sky
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayerCollection.Add(CSharpFramework.Scene.SkyLayer)">
            <summary>
            Collection function
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayerCollection.InsertAt(System.Int32,CSharpFramework.Scene.SkyLayer)">
            <summary>
            Inserts a layer before the passed index
            </summary>
            <param name="iBefore"></param>
            <param name="item"></param>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayerCollection.Remove(CSharpFramework.Scene.SkyLayer)">
            <summary>
            Collection function
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayerCollection.GetAt(System.Int32)">
            <summary>
            Collection function
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayerCollection.Contains(CSharpFramework.Scene.SkyLayer)">
            <summary>
            Collection function
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayerCollection.IndexOf(CSharpFramework.Scene.SkyLayer)">
            <summary>
            Collection function
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayerCollection.CopyTo(CSharpFramework.Scene.SkyLayer[],System.Int32)">
            <summary>
            Collection function
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:CSharpFramework.Scene.SkyLayerCollection.Clone">
            <summary>
            Clones the collection (deep copy all layers)
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Scene.SkyLayerCollection.Item(System.Int32)">
            <summary>
            Collection function
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.SkyConfig">
            <summary>
            SkyConfig represents a sky with multiple layers
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyConfig.CAT_SKY">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyConfig.CATORDER_SKY">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SkyConfig.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyConfig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyConfig.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method 
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyConfig.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method.
            Therefore, you should call GC.SupressFinalize to
            take this object off the finalization queue 
            and prevent finalization code for this object
            from executing a second time.
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyConfig.Clone">
            <summary>
            Clones the whole config (deep copy of layers)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.SkyConfig.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.SkyConfig.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.SkyConfig.Update">
            <summary>
            Update the sky in the view
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SkyConfig.GetDependencies(CSharpFramework.Scene.ResourceSnapshotInfo)">
            <summary>
            Get native dependencies (such as textures)
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Scene.SkyConfig.ExportSky(System.String)">
            <summary>
            Export the sky to an engine-readable binary file
            </summary>
            <param name="absFilename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.SkyConfig.ToString">
            <summary>
            Overridden ToString function to display the config in the property grid
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Scene.SkyConfig.Active">
            <summary>
            Activates the sky. Only active skies affect the engine
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyConfig.Layers">
            <summary>
            Sky layer collection
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyConfig.VisibleBitmask">
            <summary>
            Global visibility status of the sky. Mask gets compared against the context's bitmask
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyConfig.Subdivisions">
            <summary>
            Number of sky cube subdivisions
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyConfig.LayerCount">
            <summary>
            Number of sky layers
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SkyConfig.ShaderEffect">
            <summary>
            The shader effect configuration assigned to the sky
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.StandardValueConverter">
            <summary>
            String converter class that builds a string list by requesting a StandardValuesCollection from the instance if it implements the
            IStandardValueProvider interface. This converter workd together with the StandardValueKeyAttribute which provides the key string passed to
            IStandardValueProvider.GetStandardValues.
            This way components and entity classes can provide editing hint strings in the native vartable, e.g using hardcoded hint string "dropdown(key)" or "dropdownlist(key)" where
            key stands for the key passed to the shape/component class. See AnimationName variable in the VSimpleAnimationComponent native class.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.StandardValueConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Build the string list. Requested from the instance if the instance implements the IStandardValueProvider interface.
            Otherwise the string list is empty.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.StandardValueKeyAttribute">
            <summary>
            This attribute provides the key string for the string list. Works together with StandardValueConverter.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.StandardValueKeyAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.StandardValueKeyAttribute.Key">
            <summary>
            Key to retrieve the dropdown items
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.StandardValueKeyAttribute.AllowEditing">
            <summary>
            If true, the string can be edited, otherwise it can only be selected from dropdown
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.CurveDialog">
            <summary>
            Dialog for a single curve.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.CurveDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.CurveDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.CurveDialog.TriggerCurveChanged">
            <summary>
            UI
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.CurveDialog.curveEditorBox_OnCurveChanged(System.Object,System.EventArgs)">
            <summary>
            This function is called whenever the curve is change in the curve editor control.
            Thus, the event will be forwarded and listeners from outside the curve editor dialog
            can listen to curve changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.CurveDialog._originalCurve">
            <summary>
            This curve is used for keeping a reference to the original curve
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.CurveDialog.LoadCurvePresets">
            <summary>
            Helper function to load curve presets
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.CurveDialog.RestoreCurvePresets">
            <summary>
            Helper function to restore the default curve presets
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.CurveDialog.CreatePresetPreview(System.String,CSharpFramework.BaseTypes.PointList)">
            <summary>
            Create a preset preview box
            </summary>
            <param name="name">Name of the preset</param>
            <param name="curve">Curve that is assigned tyo the gradient preview box</param>
            <returns>The gradient preview box</returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.CurveDialog.CanUsePresetName(System.String)">
            <summary>
            Check whether the given name can be used for a preset
            </summary>
            <param name="name">Name of Preset</param>
            <returns>TRUE if preset name is ok, FALSE otherwise</returns>
        </member>
        <member name="E:CSharpFramework.PropertyEditors.CurveDialog.OnCurveChanged">
            <summary>
            Event that is triggered when the value changed
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.CurveDialog.Curve">
            <summary>
            Gets or sets the curve for the editor. The set function clones it.
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.CurveDialog.CurveInstantUpdate">
            <summary>
            Gets or sets the curve for the editor. These function should be used when instant update is required.
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.CurveDialog.GridMaximum">
            <summary>
            Gets or sets the Grid Number Maximum
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.CurveDialog.GridTimeMaximum">
            <summary>
            Gets or sets the Grid Time Maximum
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.CurveDialog.DefaultCurvePresetPath">
            <summary>
            Gets the path to the directory with the (non-writeable) default curve presets
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.CurveDialog.UserCurvePresetPath">
            <summary>
            Gets the path to the customized curve presets of the user
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.CurveDialog.SingleCurveFileExtension">
            <summary>
            File extension of the single curve preset file (VSC - Vision Single Curve)
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.CurveDialog.OnCurveChangedEventHandler">
            <summary>
            Delegate
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Vector2F">
            <summary>
            Vector class for a 2D vector with single precision float components
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.#ctor(System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.#ctor(CSharpFramework.Math.Vector2F)">
            <summary>
            Constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.Normalize">
            <summary>
            Normalize the vector. Does not throw exception if length is zero
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.GetLength">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.GetLengthSqr">
            <summary>
            Returns the length square of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.GetOrthogonal">
            <summary>
            Returns the length square of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.op_Equality(CSharpFramework.Math.Vector2F,CSharpFramework.Math.Vector2F)">
            <summary>
            Checks for equality
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.op_Inequality(CSharpFramework.Math.Vector2F,CSharpFramework.Math.Vector2F)">
            <summary>
            Checks for equality
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.op_UnaryNegation(CSharpFramework.Math.Vector2F)">
            <summary>
            Negates the vector
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.op_Addition(CSharpFramework.Math.Vector2F,CSharpFramework.Math.Vector2F)">
            <summary>
            Returns the sum of two vectors
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.op_Subtraction(CSharpFramework.Math.Vector2F,CSharpFramework.Math.Vector2F)">
            <summary>
            Subtracts v2 from v1
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.DotProduct(CSharpFramework.Math.Vector2F,CSharpFramework.Math.Vector2F)">
            <summary>
            Static version of the dor product
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.op_Multiply(CSharpFramework.Math.Vector2F,CSharpFramework.Math.Vector2F)">
            <summary>
            Dot product
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.op_Multiply(CSharpFramework.Math.Vector2F,System.Single)">
            <summary>
            Multiplies by a scalar.
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.op_Multiply(System.Single,CSharpFramework.Math.Vector2F)">
            <summary>
            Multiplies by a scalar.
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.op_Division(CSharpFramework.Math.Vector2F,System.Single)">
            <summary>
            Devides by a scalar
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.GetHashCode">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.ToString">
            <summary>
            Converts this vector to readable string of type (x, y)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.Parse(System.String)">
            <summary>
            Tries to parse the string. The string should be compatible to the ToString result.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.Equals(System.Object)">
            <summary>
            Indicates whether this vector equals another. Other type must be a vector, too
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.System#ICloneable#Clone">
            <summary>
            Clones the vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.Clone">
            <summary>
            Clones the vector (return type is vector)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called while de-serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector2F.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:CSharpFramework.Math.Vector2F.Zero">
            <summary>
            Predefined vector (0,0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector2F.XAxis">
            <summary>
            Predefined vector (1,0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector2F.YAxis">
            <summary>
            Predefined vector (0,1)
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector2F.X">
            <summary>
            Access the x-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector2F.Y">
            <summary>
            Access the y-coordinate
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Vector2FObjectConverter">
            <summary>
            Object converter for vector class
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector2FObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2FObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2FObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2FObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2FObjectConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function - do not support standard values
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Helper.HighPrecisionTimer">
            <summary>
            gives functions for a high precision timer (using QueryPerformanceCounter)
            </summary>
        </member>
        <member name="M:CSharpFramework.Helper.HighPrecisionTimer.#ctor">
            <summary>
            constructor, initializes the timer
            </summary>
        </member>
        <member name="M:CSharpFramework.Helper.HighPrecisionTimer.Start">
            <summary>
            starts the timer
            </summary>
        </member>
        <member name="M:CSharpFramework.Helper.HighPrecisionTimer.Stop">
            <summary>
            stops the timer
            </summary>
        </member>
        <member name="P:CSharpFramework.Helper.HighPrecisionTimer.DurationSeconds">
            <summary>
            returns the duration of the time between Start() and Stop()
            in (seconds)
            </summary>
        </member>
        <member name="P:CSharpFramework.Helper.HighPrecisionTimer.DurationMilliSeconds">
            <summary>
            returns the duration of the time between Start() and Stop()
            in (seconds)
            </summary>
        </member>
        <member name="T:CSharpFramework.Docking.DockingApp">
            <summary>
            Implementation of the docking library's app interface.
            </summary>
        </member>
        <member name="M:CSharpFramework.Docking.DockingApp.CreateMissingContent(System.String)">
            <summary>
            Overridden
            </summary>
            <param name="originalPersistentString"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Docking.DockingApp.ProcessFloatWindowCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Called when the user presses a command key in a floating panel.
            </summary>
            <param name="msg">windows message</param>
            <param name="keyData"></param>
            <returns>true if command keys was processed</returns>
        </member>
        <member name="M:CSharpFramework.Docking.DockingApp.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            message function
            </summary>
            <param name="hWnd"></param>
            <param name="Msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Dialogs.VisibilityResultPanel">
            <summary>
            Panel that displays the visibility results
            </summary>
            <summary>
            Panel that displays the visibility results
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.VisibilityResultPanel.#ctor(CSharpFramework.Docking.DockingContainer)">
            <summary>
            Constructor
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.VisibilityResultPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.VisibilityResultPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.VisibilityResultPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.PropertyGridDlg">
            <summary>
            Simple Dialog with a property grid.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.PropertyGridDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.PropertyGridDlg.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="title">dialog title</param>
            <param name="description">description text in the header panel</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.PropertyGridDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.PropertyGridDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.PropertyGridDlg.DataObject">
            <summary>
            Gets or sets the data object. The set function clones it.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.PropertyGridDlg.DataObjectNoClone">
            <summary>
            Sets the data object without cloning it
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.DescriptionEditDlg">
            <summary>
            Modal dialog for editing the scene description
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.DescriptionEditDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.DescriptionEditDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.DescriptionEditDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.DescriptionEditDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.DescriptionEditDlg.DescriptionText">
            <summary>
            Gets or sets the Description text. The get function trims the whitespaces and returns null if string is empty.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.DescriptionEditDlg.HeaderText">
            <summary>
            Allows to set a header text shown above the description
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.DescriptionTextEditor">
            <summary>
            UITypeEditor specifically for editing the description text
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.DescriptionTextEditor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.DescriptionTextEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.DescriptionTextEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Dialogs.DescriptionTextTypeConverter">
            <summary>
            Typeconverter that replaces a multiline string into "click here" in the property grid
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.DescriptionTextTypeConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.DescriptionTextTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.LayerListItem">
            <summary>
            The actual list view item for layer list views. Has a reference to a Layer
            </summary>
        </member>
        <member name="M:CSharpFramework.LayerListItem.#ctor(CSharpFramework.Layer)">
            <summary>
            Constructor that takes the layer the item refers to
            </summary>
            <param name="_layer">The source layer</param>
        </member>
        <member name="M:CSharpFramework.LayerListItem.UpdateLockStatus">
            <summary>
            Should be called when the locked status changed
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerListItem.layer">
            <summary>
            The layer this list item is associated with the list item
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.ImageMenuItem">
            <summary>
            Menu item class with support for displaying item
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ImageMenuItem.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">item name</param>
        </member>
        <member name="M:CSharpFramework.Controls.ImageMenuItem.#ctor(System.Drawing.Image,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="icon">icon image</param>
            <param name="name">item name</param>
        </member>
        <member name="M:CSharpFramework.Controls.ImageMenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.ImageMenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:CSharpFramework.Controls.ImageMenuItem.Image">
            <summary>
            Get or set the image icon
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.PluginLoaderDlg.InitializePluginList">
            <summary>
            Update all list views with current plugin information. Gets the information from the EditorManager instance
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.PluginLoaderDlg.UpdatePluginList">
            <summary>
            Update all list views with current plugin information. Gets the information from the EditorManager instance
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.PluginLoaderDlg.ReloadEnginePlugins">
            <summary>
            Try all in unloadedEnginePlugins stored Plugins, and remove the identifier from unloadedEnginePlugins
            if successfully loaded
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.PluginLoaderDlg.ReloadEditorPlugins">
            <summary>
            Try all in unloadedEditorPlugins stored Plugins, and remove the identifier from unloadedEditorPlugins
            if successfully loaded (currently there is no recognition if an editor plugin was loaded successfull
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.PluginLoaderDlg.FormCanBeClosed">
            <summary>
            Checks if there are no unloaded plugins left, otherwise inform the user
            </summary>
            <returns>Form can be closed, no unloaded plugins remaining</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.PluginLoaderDlg.button_Unload_Click(System.Object,System.EventArgs)">
            <summary>
            Unload all selected items either from EditorPlugin list or EnginePlugin list
            </summary>
            <param name="sender">not used</param>
            <param name="e">not used</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.PluginLoaderDlg.button_Reload_Click(System.Object,System.EventArgs)">
            <summary>
            Try to reload all unloaded plugins and inform the user if some of them couldn't be loaded
            </summary>
            <param name="sender">not used</param>
            <param name="e">not used</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.PluginLoaderDlg.PluginLoaderDlg_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Called when Form is tried to be closed - Try to reload all unloaded plugins and inform 
            the user if some of them couldn't be loaded.
            Do not perform Form close if there are unloaded plugins left.
            </summary>
            <param name="sender">not used</param>
            <param name="e">Sets Cancel property if form is not allowed to be closed</param>
        </member>
        <member name="F:CSharpFramework.Dialogs.PluginLoaderDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.PluginLoaderDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.PluginLoaderDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.RendererComponentsControl">
            <summary>
            Control class
            </summary>
            <summary>
            Control class
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.RendererComponentsControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.RendererComponentsControl.GetComponentList">
            <summary>
            Retrieve component list from UI
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Controls.RendererComponentsControl.OnDialogClosed">
            <summary>
            Internal function
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.RendererComponentsControl.UpdateComponentList(CSharpFramework.Scene.ShapeComponentCollection)">
            <summary>
            UI update
            </summary>
            <param name="components"></param>
        </member>
        <member name="F:CSharpFramework.Controls.RendererComponentsControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.RendererComponentsControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Controls.RendererComponentsControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.View.HotSpotCollection">
            <summary>
            Collection of hot spots
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotCollection.Add(CSharpFramework.View.HotSpotBase)">
            <summary>
            Collection function
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.View.HotSpotCollection.Remove(CSharpFramework.View.HotSpotBase)">
            <summary>
            Collection function
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotCollection.GetAt(System.Int32)">
            <summary>
            Collection function
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.View.HotSpotCollection.HandleAll(CSharpFramework.IEngineManager,System.Boolean)">
            <summary>
            Per frame handle function of the hotspos
            </summary>
            <param name="engine">engine manager reference</param>
            <param name="bShow">flag that determines whether the hotspots are globally shown (for instance not in play mode)</param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotCollection.RenderAll(CSharpFramework.VisionViewBase)">
            <summary>
            Render all hotspots in this collection
            </summary>
            <param name="view">destination view</param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotCollection.CheckMouseOver(System.Single,System.Single)">
            <summary>
            Returns a hotspot that is under the mouse
            </summary>
            <param name="fMouseX">mouse x to check</param>
            <param name="fMouseY">mouse y to check</param>
            <returns>Hotspot that is under the mouse, or null</returns>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapePath">
            <summary>
            Helper class to convert the path of a shape to string.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapePath.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapePath.#ctor(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Constructor that takes the shape
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapePath.#ctor(System.String)">
            <summary>
            Constructor that takes the path as string
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapePath.ToString">
            <summary>
            Returns the string representation of the path
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapePath.GetShape(CSharpFramework.IScene)">
            <summary>
            Gets the shape from the specified scene
            </summary>
            <param name="scene"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapePath._components">
            <summary>
            List of shape names (top to bottom)
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapePath._layerName">
            <summary>
            Name of the parent layer
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapePath.Shape">
            <summary>
            Gets the shape from the active scene
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.IVisibilityBuilder">
            <summary>
            This class is the interface for building the visibility for a scene. One instance of this interface is accessible via
            EditorManager.VisibilityBuilder
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IVisibilityBuilder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IVisibilityBuilder.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IVisibilityBuilder.Reset(CSharpFramework.IScene)">
            <summary>
            Resets the visibility
            </summary>
            <param name="scene"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IVisibilityBuilder.Build(CSharpFramework.IScene,CSharpFramework.Scene.ProgressStatus)">
            <summary>
            Rebuilds the visibility for the passed scene
            </summary>
            <param name="scene"></param>
            <param name="progress"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IVisibilityBuilder.ConnectPortals(System.Single,CSharpFramework.Scene.ProgressStatus)">
            <summary>
            Overridable to connect all portals. Implements default behaviour
            </summary>
            <param name="fEpsilon"></param>
            <param name="progress"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IVisibilityBuilder.TestConnected(CSharpFramework.Shapes.PortalShape,CSharpFramework.Shapes.PortalShape,System.Single)">
            <summary>
            Overridable to test for a single portal connection. Implements default behaviour using PortalShape.Connected
            </summary>
            <param name="portal1"></param>
            <param name="portal2"></param>
            <param name="fEpsilon"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IVisibilityBuilder.GetBestTargetZone(CSharpFramework.Shapes.PortalShape,System.Collections.ArrayList)">
            <summary>
            In case there is no counterpart for a portal, this function finds the best suited target zone
            </summary>
            <param name="portal"></param>
            <param name="allZones"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IVisibilityBuilder.ApplyToEngine">
            <summary>
            Overridable to apply the visibility result to the engine. This implementation does not do anything
            </summary>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Scene.IVisibilityBuilder.VisibilityZones">
            <summary>
            Collection that keeps a list of all zones in the scene. Append zones here in the events
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.IVisibilityBuilder.UnassignedPortals">
            <summary>
            Result list after build process
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.IVisibilityBuilder.PortalsOutsideZone">
            <summary>
            Result list after build process
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.IVisibilityBuilder.Status">
            <summary>
            Gets or sets the new status
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.IVisibilityBuilder.Dirty">
            <summary>
            Helper flag that determines whether the current status is out-of-data. Can be set to true
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.IVisibilityBuilder.UseInEngine">
            <summary>
            Indicates whether visibility resuls should be used in the engine or not
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.IVisibilityBuilder.OverallPortalCount">
            <summary>
            Countes al portals in the VisibilityZones collection
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.IVisibilityBuilder.OnStartBuildVisibility">
            <summary>
            This event is fired when the build process is started
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.IVisibilityBuilder.OnFinishedBuildVisibility">
            <summary>
            This event is fired when the build process has finished
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.IVisibilityBuilder.OnResetVisibility">
            <summary>
            This event is fired when the visibility is about to reset
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.IVisibilityBuilder.OnVisibilityStatusChanging">
            <summary>
            This event is fired before the status is changed
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.IVisibilityBuilder.OnVisibilityStatusChanged">
            <summary>
            This event is fired after the status has changed
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.IVisibilityBuilder.OnVisibilityUseInEngineChanged">
            <summary>
            This event is fired after the UseInEngine flag has changed
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.IVisibilityBuilder.VisibilityStatus_e">
            <summary>
            Enum that defines the current visibility status
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.IVisibilityBuilder.VisibilityStatus_e.NotComputed">
            <summary>
            Visibility is not computed yet
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.IVisibilityBuilder.VisibilityStatus_e.Outdated">
            <summary>
            Visibility needs to be updated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.IVisibilityBuilder.VisibilityStatus_e.Valid">
            <summary>
            Visibility is valid
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.PropertyFlags_e">
            <summary>
            Enumeration of available property flags
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.PropertyFlags_e.Readonly">
            <summary>
            Specifies that the property is readonly, and thus not editable
            for the user (grayed out in the property grid)
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.PropertyFlags_e.Hidden">
            <summary>
            Specifies that that the property is hidden, and thus not visible
            in the property grid
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.PropertyFlagsProviderInfo">
            <summary>
            Info object that is passed to the IPropertyFlagsProvider.GetPropertyFlags function. 
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.PropertyFlagsProviderInfo.Name">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.PropertyFlagsProviderInfo.PropertyDesc">
            <summary>
            Property description - might be null for dynamic properties
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.PropertyFlagsProviderInfo.DynamicProperty">
            <summary>
            If PropertyDesc is null then this might specify the dynamic property
            </summary>
        </member>
        <member name="T:CSharpFramework.PerformTracelineArgs">
            <summary>
            PerformTracelineArgs : event sent before a traceline is performed
            </summary>
        </member>
        <member name="M:CSharpFramework.PerformTracelineArgs.#ctor(CSharpFramework.Math.BoundingBox)">
            <summary>
            Constructor that sets the bounding box for relevant primitives
            </summary>
            <param name="_boundingBox"></param>
        </member>
        <member name="F:CSharpFramework.PerformTracelineArgs.boundingBox">
            <summary>
            bounding box for relevant primitives
            </summary>
        </member>
        <member name="T:CSharpFramework.RenderMode_e">
            <summary>
            Enum for setting render mode
            </summary>
        </member>
        <member name="F:CSharpFramework.RenderMode_e.Solid">
            <summary>
            Filled polygons
            </summary>
        </member>
        <member name="F:CSharpFramework.RenderMode_e.Wireframe">
            <summary>
            Wireframe mode
            </summary>
        </member>
        <member name="T:CSharpFramework.IEngineManager">
            <summary>
            Abstract engine manager class. Provides abstract functions that must be implemented by the actual engine manager
            such as loading a scene file etc.
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.InitEngine">
            <summary>
            Function to initialise the engine
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.DeInitEngine">
            <summary>
            Function to deinitialise the engine
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.IsInitialized">
            <summary>
            Function to determine the initialisation state of the engine
            </summary>
            <returns>true if engine is initialised</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.InitNewScene">
            <summary>
            Called when a new scene is initialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.DeInitScene">
            <summary>
            Called when a scene is de-initialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.ReloadLightingFiles(System.String,CSharpFramework.Scene.Zone)">
            <summary>
            Reload all lighting related scene files, e.g. light grid or lit file.
            Usually called after static lighting has been changed.
            </summary>
            <returns>true, if reloading was successful</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.EditOrAddRCSLightingFiles(System.String,CSharpFramework.Scene.Zone,System.String,System.Boolean)">
            <summary>
            Puts all relevant static lighting files in RCS to edit/add mode
            </summary>
            <param name="outputfileAbsolute">absolute filename to vLux output file</param>
            <param name="zone">target Zone (or null)</param>
            <param name="filename">absolute filename of the custom mesh.lit file</param>
            <param name="bAddMode">if bAddMode is true, files will be added. If it is false they will be put to edit mode</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.UpdateSurfaceShaderProperties(CSharpFramework.Scene.Material)">
            <summary>
            Update the material shader info
            </summary>
            <param name="destInfo"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.GetSurfaceProxy(CSharpFramework.Scene.Material)">
            <summary>
            Returns a proxy object for access to surface properties
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.GetNativeMaterialProperties(CSharpFramework.Scene.Material)">
            <summary>
            Fill the passed material with properties from its native counterpart. mat._nativeSrfPtr member must be set.
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.GetGeometryExtents(CSharpFramework.Math.BoundingBox)">
            <summary>
            Evaluates the geometry bounding box
            </summary>
            <param name="destBox"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.RenderScene(CSharpFramework.VisionViewBase)">
            <summary>
            Render the scene using the passed view
            </summary>
            <param name="view">The current view</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.DisableRendering">
            <summary>
            Increments the rendering lock to disable rendering. Used while loading
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.EnableRendering">
            <summary>
            Decrements the rendering lock to enable rendering. Used while loading
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.OnWindowSizeChanged">
            <summary>
            Called when size of the view changes to adjust engine view
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.SaveScreenShot(System.String)">
            <summary>
            Saves a screenshot file to disk
            </summary>
            <param name="filename">filename of the screenshot. Should handle null (grabxxxx)</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.TriggerBeforeRenderSceneEvent">
            <summary>
            Triggers the event (should be called in RenderScene implementation)
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.TriggerAfterRenderSceneEvent">
            <summary>
            Triggers the event (should be called in RenderScene implementation)
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.InitInput">
            <summary>
            Initialize the input handler of the active VisionApp
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.DeInitInput">
            <summary>
            Deinitialize the input handler of the active VisionApp
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.ProcessWndMessage(System.Windows.Forms.Message)">
            <summary>
            Ask the engine to process a window message.
            Used in the Play-The-Game mode to let the engine process all keyboard and
            mouse events.
            </summary>
            <param name="msg">Window message to process</param>
            <returns>true if the message was processed by the engine</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Plugins_GetEnginePluginExtension">
            <summary>
            Returns the extension used for engine plugins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Plugins_LoadAllEnginePlugins(System.String)">
            <summary>
            Load the engine plugins from absolute path
            </summary>
            <param name="sAbsDir">Absolute path to search for plugins</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Plugins_UnloadAllEnginePlugins">
            <summary>
            Unload all plugins
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Plugins_LoadEnginePlugin(System.String)">
            <summary>
            Try to load a plugin
            </summary>
            <param name="sAbsFileName">File name (absolute path) of the plugin to load</param>
            <returns>true if loading was successful</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Plugins_UnloadEnginePlugin(System.String)">
            <summary>
            Try to load a plugin
            </summary>
            <param name="sAbsFileName">File name (absolute path) of the plugin to unload</param>
            <returns>true if unloading was successful</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Plugins_GetEnginePluginList(System.Collections.Specialized.StringCollection)">
            <summary>
            Fills out an array of strings with currently loaded plugins
            </summary>
            <param name="filenames"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Plugins_GetEnginePluginPath(System.String)">
            <summary>
            Return the absolute path the plugin is loaded from
            </summary>
            <param name="filenames"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Plugins_IsEnginePluginStatic(System.String)">
            <summary>
            Check if plugin was loaded static or through manifest in editor
            </summary>
            <param name="filenames"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Game_FreeRemovedEntities">
            <summary>
            Purge all entities marked as "dead"
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.File_AddDataDirectory(System.String)">
            <summary>
            Add a new data directory
            </summary>
            <param name="sAbsDir">absolute path to add</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.File_RemoveDataDirectory(System.String)">
            <summary>
            Remove a specific data directory
            </summary>
            <param name="sAbsDir">Absolute directory to remove again</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.File_RemoveAllDataDirectories">
            <summary>
            Remove all data directories
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.File_GetDataDirectories(System.Collections.Specialized.StringCollection)">
            <summary>
            Fills a list with all active data directories
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.File_MakeAbsolute(System.String)">
            <summary>
            Gets the absolute path from a file name that is relative to the project. This function
            should take the order of data directories into account, i.e. return exactly the path
            that the engine would use.
            </summary>
            <param name="relFile"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.File_Exists(System.String)">
            <summary>
            Checks if the project relative file exists in any data directory
            </summary>
            <param name="relFile"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.File_ReadTextFile(System.String)">
            <summary>
            Reads a full text file and returns it as a string.
            </summary>
            <param name="relFile">relative file name</param>
            <returns>the full content of the text file (null if failed)</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Shaders_GetEffectNamesInLibrary(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            This function fills up the effect names that are available in the shader library passed as a string (project relative filename)
            </summary>
            <param name="libraryName"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Materials_GetMaterialsInLibrary(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            This function fills up the material names that are available in the material library passed as a string (project relative filename)
            </summary>
            <param name="libraryName"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.RefreshShaderEffectManager">
            <summary>
            Resets it (after project unloading)
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Shaders_GetParameterListForShaderEffect(System.String,System.String)">
            <summary>
            Finds and returns a DynamicPropertyCollection instance that represents the shader parameters in the passed shader effect
            If the collection type has not been created, it forwards this call to the abstract Shaders_BuildParameterListForShaderEffect
            function. The name of the dynamic collection type is a unique combination for library filename and effect name
            </summary>
            <param name="libraryName"></param>
            <param name="effectName"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Shaders_BuildParameterListForShaderEffect(CSharpFramework.DynamicProperties.DynamicPropertyManager,System.String,System.String,System.String)">
            <summary>
            This function actually creates the dynamic class with all properties from the shader effect
            </summary>
            <param name="shaderEffectManager"></param>
            <param name="collectionTypeName"></param>
            <param name="libraryName"></param>
            <param name="effectName"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Shaders_AssignMaterialEffect(CSharpFramework.Scene.Material,CSharpFramework.Scene.ShaderEffectConfig)">
            <summary>
            Assigns the passed effect config to the respective (world-)material
            </summary>
            <param name="material"></param>
            <param name="effect"></param>
            <returns>true, if assignment was successful</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Shaders_ReapplyLightingShader(CSharpFramework.Scene.Material)">
            <summary>
            Reapplies the default lighting shader to the material
            </summary>
            <param name="material"></param>
            <returns>true, if assignment was successful</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.TypeManager_GetClassNamesDerivedFrom(System.String,CSharpFramework.IEngineManager.NativeRTTIFlags)">
            <summary>
            Returns a string collection of registered class names that are derived from the specified base class (including base class itself)
            </summary>
            <param name="baseClass">class name of the base class</param>
            <param name="ignoreFlags">Filter flags which defines which classes should be included</param>
            <returns>a string collection of registered class. Can be null if not even baseClass is registered</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.TypeManager_GetClassNamesDerivedFrom(System.String)">
            <summary>
            Overloaded version that passes NativeRTTIFlags.Abstract as second parameter
            </summary>
            <param name="baseClass"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.TypeManager_PopulateClassManager(CSharpFramework.DynamicProperties.DynamicPropertyManager,System.String,System.Boolean)">
            <summary>
            Generic function to fill the passed property manager with native class info
            </summary>
            <param name="propertyManager"></param>
            <param name="baseClass"></param>
            <param name="bIgnoreBaseClass"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.TypeManager_GetClassPluginName(System.String)">
            <summary>
            Return the plugin name of the engine plugin that needs to be loaded for the native class.
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.TypeManager_GetClassPluginNames(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Return the plugin name of the engine plugin and all its base classes that needs to be loaded for the native class.
            </summary>
            <param name="className"></param>
            <param name="uniquePluginNames"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.TypeManager_AllowShapeReference(CSharpFramework.Scene.ISceneObject,CSharpFramework.DynamicProperties.DynamicProperty,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Return whether it is allowed to pass whether refShape can be attached to owner's object reference variable represented by property.
            This feature wraps around the native VTypedObjectReference class feature for vartables.
            </summary>
            <param name="owner"></param>
            <param name="property"></param>
            <param name="refShape"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Resources_PurgeUnusedResources">
            <summary>
            Purge all registered engine resource manager and return the overall number of resources that have been removed
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Resources_ReloadUpdatedResources">
            <summary>
            Check all resource managers for changed file time stamps and reload them. Return the number of reloaded resources
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.PerformKnownNativeLinking(CSharpFramework.Shapes.ShapeLink,CSharpFramework.Shapes.ShapeLink,System.Boolean)">
            <summary>
            Tries to establish (or break) a link between the underlying native classes.
            Returns true if the combination has been handled successfully.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="bStatus"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Zone_GetNativePointer(CSharpFramework.Scene.Zone)">
            <summary>
            Retrieve the native engine pointer from engine zone class
            </summary>
            <param name="zone"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Zone_ReleaseNativePointer(CSharpFramework.Scene.Zone)">
            <summary>
            Call Release on the native engine pointer
            </summary>
            <param name="zone"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Zone_UpdateNativeZone(CSharpFramework.Scene.Zone)">
            <summary>
            Set Zone properties on the native counterpart
            </summary>
            <param name="zone"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Zone_SetGlobalPivot(CSharpFramework.Math.Vector3D)">
            <summary>
            Called after repositioning
            </summary>
            <param name="newPivot"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.CreateStaticLightingMeshes(System.String,CSharpFramework.Scene.StaticLightInfo)">
            <summary>
            Triggers a callback to gather lighting information and saves the occluder/receiver information to a binary file.
            </summary>
            <param name="filename">absolute filename of the custom mesh file</param>
            <param name="info">info that provides relevant casters/receivers</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.ReloadStaticLightingMeshes(CSharpFramework.Scene.Zone,System.String)">
            <summary>
            Reloads the mesh.lit file and triggers engine callback
            </summary>
            <param name="zone">target Zone (or null)</param>
            <param name="filename">absolute filename of the custom mesh.lit file</param>
            <returns>success</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.InitStaticLightingMode(System.String)">
            <summary>
            Static lighting pre-initialisation before the actual geometry is loaded/created
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.ResetStaticLighting(CSharpFramework.Scene.Zone)">
            <summary>
            Resets static lighting -> fullbright
            </summary>
            <param name="zone"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.GetAllMaterialProvider(System.Collections.ArrayList)">
            <summary>
            Abstract function that enumerates unique model files loaded by the engine.
            </summary>
            <param name="modelList">array to which new model infos should be added. Might already have some models in there.</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.TriggerOnGatherCustomMaterialProvider(System.Collections.ArrayList)">
            <summary>
            Internal trigger function
            </summary>
            <param name="modelList"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.FindMaterialProvider(System.String)">
            <summary>
            Helper function to find a model by filename. Uses MaterialProviderList collection
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Scene_GetObjectKeyList(CSharpFramework.IEngineManager.ObjectKeyType_e,System.Collections.Specialized.StringCollection)">
            <summary>
            Function to enumerate all unique key strings used by scene objects (such as entities, ...)
            </summary>
            <param name="types">bitflags of key types to gather</param>
            <param name="uniqueKeys">destination collection</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.RefreshEntityClassManager">
            <summary>
            Update the class manager due to new loaded plugins
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.RefreshComponentClassManager">
            <summary>
            Invalidate all loaded component classes
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.SetLinearDepthFog(System.Boolean,System.Single,System.Single,System.UInt32)">
            <summary>
            Sets or diables linear depth fog for the scene
            </summary>
            <param name="bEnabled">enabled status of th fog</param>
            <param name="fStart">start distance for fading (world units)</param>
            <param name="fEnd">end distance for fading (world units)</param>
            <param name="iColor">24 bit color reference for fog color</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.SetDefaultLightColor(System.UInt32)">
            <summary>
            Sets the default light color for a scene
            </summary>
            <param name="iColor"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.SetDefaultClearColor(System.UInt32)">
            <summary>
            Sets the default background color
            </summary>
            <param name="iColor"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.ApplyViewSettings(CSharpFramework.View.ViewSettings)">
            <summary>
            Applies the passed settings structure
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.RenderLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.UInt32,System.Single)">
            <summary>
            Renders a single line
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="z1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z2"></param>
            <param name="iColorRef">32 bit color (use static VisionColors class)</param>
            <param name="fStrength">line thickness</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.RenderLine2D(System.Single,System.Single,System.Single,System.Single,System.UInt32,System.Single)">
            <summary>
            Renders a 2D line in screen space
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="iColorRef">32 bit color (use static VisionColors class)</param>
            <param name="fStrength">line thickness</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.WriteText3D(System.Single,System.Single,System.Single,System.String,System.UInt32)">
            <summary>
            Write text to 3D position
            </summary>
            <param name="x">pos x</param>
            <param name="y">pos y</param>
            <param name="z">pos z</param>
            <param name="text">string to output</param>
            <param name="iColorRef">32bit color value (use static VisionColors class)</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.WriteText2D(System.Single,System.Single,System.String,System.UInt32)">
            <summary>
            Write text to 2D on screen position
            </summary>
            <param name="screenX">screen x-coordinate</param>
            <param name="screenY">screen y-coordinate</param>
            <param name="text">string to outpu</param>
            <param name="iColorRef">32bit color value (use static VisionColors class)</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.RenderSolidTriangle(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,System.UInt32)">
            <summary>
            Renders a solid alphablended triangle
            </summary>
            <param name="v1">vertex 1</param>
            <param name="v2">vertex 2</param>
            <param name="v3">vertex 3</param>
            <param name="iColorRef">RGBA color</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.RenderSprite(CSharpFramework.Math.Vector3F,System.String,System.UInt32,System.Single,System.Single)">
            <summary>
            Renders a bitmap overlay at specified 3D position
            </summary>
            <param name="center">3D position (projected)</param>
            <param name="textureFile">texture filename</param>
            <param name="iColor">modulation color</param>
            <param name="fSizeX">size in pixels</param>
            <param name="fSizeY">size in pixels</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.SetEngineViewSafeMode(System.Single,System.Single,System.Boolean)">
            <summary>
            Sets or disables safe mode in the engine view
            </summary>
            <param name="fWidth">Relative width percentage [0.0 .. 1.0]</param>
            <param name="fHeight">Relative height percentage [0.0 .. 1.0]</param>
            <param name="bEnabled">state whether safe mode should be enabled or disabled</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.SetMobilePreview(System.Boolean)">
            <summary>
            
            </summary>
            <param name="bEnabled"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.CreateOverlay(System.String,System.UInt32)">
            <summary>
            Abstract function to create a 2D screen overlay
            </summary>
            <param name="filename">bitmap filename</param>
            <param name="iTranspColor">Vision Color that defines which color is handled as transparent (0 for none)</param>
            <returns>new IEngineOverlay instance</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.LoadTexture(System.String)">
            <summary>
            Loads a texture via he engine an returns a proxy object
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.FreeTexture(CSharpFramework.Scene.IEngineTextureProxy)">
            <summary>
            Frees the returned texture object on the engine side
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.ProfilingPrevious">
            <summary>
            Show the previous profiling page
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.ProfilingNext">
            <summary>
            Show the next profiling page
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.ExecuteAction(System.String)">
            <summary>
            Trigger an action in the engine
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.SetResourcePreview(System.IntPtr,System.String,System.Boolean)">
            <summary>
            Show the preview of a native resource
            </summary>
            <param name="nativeRes"></param>
            <param name="resManager"></param>
            <param name="bValidate"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.BeginThumbnailGeneration">
            <summary>
            Begins automated thumbnail generation
            </summary>
            <param name="nativeRes"></param>
            <param name="resManager"></param>
            <param name="bValidate"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.DoThumbnailGeneration(System.IntPtr,System.String,System.Boolean)">
            <summary>
            Do automated thumbnail generation of a native resource (stored directly to file without user interaction) 
            </summary>
            <param name="nativeRes"></param>
            <param name="resManager"></param>
            <param name="bValidate"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.EndThumbnailGeneration">
            <summary>
            Ends automated thumbnail generation
            </summary>
            <param name="nativeRes"></param>
            <param name="resManager"></param>
            <param name="bValidate"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.DeleteThumbnail(System.IntPtr,System.String,System.Boolean)">
            <summary>
            Deletes a saved thumbnail if existent
            </summary>
            <param name="nativeRes"></param>
            <param name="resManager"></param>
            <param name="bValidate"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.GetThumbnailFilename(System.IntPtr,System.String@,System.String,System.Boolean)">
            <summary>
            Get thumbnail filename of a native resource
            </summary>
            <param name="nativeRes"></param>
            <param name="resManager"></param>
            <param name="bValidate"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.SetProjectPath(System.String)">
            <summary>
            Sets the current project path in the engine manager
            </summary>
            <param name="Path"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.SetSceneName(System.String)">
            <summary>
            Sets the current scene name in the engine manager
            </summary>
            <param name="Path"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.SetSDKPath(System.String)">
            <summary>
            Sets the current SDK path in the engine manager (relative to the position from which vForge was started)
            </summary>
            <param name="Path"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.GetRayAtScreenPos(CSharpFramework.Math.Vector3F@,CSharpFramework.Math.Vector3F@,System.Int32,System.Int32,System.Single)">
            <summary>
            Converts a 2D screen position to a 3D ray direction
            </summary>
            <param name="startRay">vector that receives ray start (camera position)</param>
            <param name="endRay">vector that receives ray end</param>
            <param name="iScreenX">screen position in pixel</param>
            <param name="iScreenY">screen position in pixel</param>
            <param name="fRayLen">Length of the ray</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Project2D(System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Projects a 3D position on screen
            </summary>
            <param name="x">3D position (x)</param>
            <param name="y">3D position (y)</param>
            <param name="z">3D position (z)</param>
            <param name="fScreenX">reference that will receive the projected x-position (in pixels)</param>
            <param name="fScreenY">reference that will receive the projected y-position (in pixels)</param>
            <returns>true, if 3D position is on the front side</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.Project2D(System.Single,System.Single,System.Single)">
            <summary>
            This version of Project2D returns a 2D vector. Might return Vector2f.Zero.
            </summary>
            <param name="x">3D position (x)</param>
            <param name="y">3D position (y)</param>
            <param name="z">3D position (z)</param>
            <returns>projected 2D position</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.PickMaterial(System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the material that is located at the specified position in the engine view
            </summary>
            <param name="screenX"></param>
            <param name="screenY"></param>
            <param name="bConsiderWorld"></param>
            <param name="bConsiderModels"></param>
            <param name="bPickMeshMaterial">if true, pick the mesh's material rather than the visible material</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.GetDropToFloorHeight(CSharpFramework.Shapes.Shape3D,CSharpFramework.Shapes.Shape3D.DropToFloorMode,CSharpFramework.Math.Vector3F,CSharpFramework.ShapeCollection)">
            <summary>
            Physics helper function to drop a shape on floor
            </summary>
            <param name="shape">Shape to drop</param>
            <param name="mode">Drop-to-floor mode (box vs. pivot)</param>
            <param name="axis">Direction to drop</param>
            <param name="colliderShapes">optional collection of shpes to be considered. Can be NULL</param>
            <returns>the height the shape can be moved. Since moving downwards, value should be negative</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.GetTraceHit(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F@)">
            <summary>
            Performs a traceline check
            </summary>
            <param name="startRay">start position of the ray</param>
            <param name="endRay">end position of the ray</param>
            <param name="hitPoint">destination touchpoint</param>
            <returns>hit result: true if touchpoint is valid</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.GetTraceHitWithNormal(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F@,CSharpFramework.Math.Vector3F@)">
            <summary>
            Performs a Traceline check and extracts the Normal at trace hit position
            </summary>
            <param name="startRay">start position of the ray</param>
            <param name="endRay">end position of the ray</param>
            <param name="hitPoint">destination touch point</param>
            <param name="hitNormal">normal vector at touch point</param>
            <returns>hit result: true if touch point is valid</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.GetTraceHitWithAngles(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F@,CSharpFramework.Math.Vector3F@)">
            <summary>
            Performs a Traceline check and extracts the Euler Angles at trace hit position
            </summary>
            <param name="startRay">start position of the ray</param>
            <param name="endRay">end position of the ray</param>
            <param name="hitPoint">destination touch point</param>
            <param name="hitAngles">Euler Angles at touch point</param>
            <returns>hit result: true if touch point is valid</returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.AddRelevantCollisionMesh(System.IntPtr)">
            <summary>
            plugins can add relevant custom collision meshes via this function after receiving information via the OnPerformTraceline event
            </summary>
            <param name="nativeMesh"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.TriggerTracelineEvent(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Helper function to trigger the OnPerformTraceline event
            </summary>
            <param name="startRay"></param>
            <param name="endRay"></param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.HandleGizmos(System.Int32,System.Int32,System.Int32,System.Int32,CSharpFramework.GizmoBase@,System.Boolean)">
            <summary>
            Handle the gizmo (tick function)
            </summary>
            <param name="iMouseX">Current mouse position</param>
            <param name="iMouseY">Current mouse position</param>
            <param name="iOldX">Mouse position in last frame</param>
            <param name="iOldY">Mouse position in last frame</param>
            <param name="gizmo">Reference that will receive the current gizmo instance</param>
            <param name="bHighlightOnly">if true, only hightlight gizmop and don't move/rotate it</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEngineManager.LogPrint(System.String)">
            <summary>
            Prints a message to the vResViewer log
            </summary>
            <param name="str">string to print</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.LogPrintWarning(System.String)">
            <summary>
            Prints a warning message to the vResViewer log
            </summary>
            <param name="str">string to print</param>
        </member>
        <member name="M:CSharpFramework.IEngineManager.ShowErrorReportDialog">
            <summary>
            Open the report dialog that the engine collected since the last time
            </summary>
        </member>
        <member name="M:CSharpFramework.IEngineManager.ResetErrorReports">
            <summary>
            Clear all entries so that the dialog does not open
            </summary>
        </member>
        <member name="P:CSharpFramework.IEngineManager.IsRenderingAllowed">
            <summary>
            /Returns true if rendering is enabled and we are currently not rendering
            </summary>
        </member>
        <member name="P:CSharpFramework.IEngineManager.UseSoftwareRenderer">
            <summary>
            Specifies whether vForge is configured to use the DX software reference
            rasterizer instead of the DX hardware renderer. Can be configured via
            command line.
            </summary>
        </member>
        <member name="E:CSharpFramework.IEngineManager.OnBeforeRenderScene">
            <summary>
            event that is triggered directly before the scene is rendered
            </summary>
        </member>
        <member name="E:CSharpFramework.IEngineManager.OnAfterRenderScene">
            <summary>
            event that is triggered directly after the scene has been rendered
            </summary>
        </member>
        <member name="P:CSharpFramework.IEngineManager.ShaderEffectManager">
            <summary>
            Get the shader effect class manager
            </summary>
        </member>
        <member name="E:CSharpFramework.IEngineManager.OnGatherCustomMaterialProvider">
            <summary>
            This callback is triggered whenever the global list of material providers needs to be re-built. An array is passed to
            this callback which contains the providers added so far. Each element in this list is of type IMaterialProvider.
            To see if a specific provider has been added already, the FindMaterialProvider function can be used inside this callback.
            </summary>
        </member>
        <member name="P:CSharpFramework.IEngineManager.MaterialProviderList">
            <summary>
            Accesses the list of all material providers (e.g. models or static meshes). 
            Each element in the list is of class IMaterialProvider.
            To invalidate the list, assign null.
            </summary>
        </member>
        <member name="P:CSharpFramework.IEngineManager.EntityClassManager">
            <summary>
            Get the entity class manager
            </summary>
        </member>
        <member name="P:CSharpFramework.IEngineManager.ComponentClassManager">
            <summary>
            Return the component class manager
            </summary>
        </member>
        <member name="P:CSharpFramework.IEngineManager.RenderHookList">
            <summary>
            Collection of shapes for which the OnRenderHook function is called on the engine instance. The ShapeBase.WantsNativeRenderHookCallback
            property adds/removes shapes from this collection.
            </summary>
        </member>
        <member name="P:CSharpFramework.IEngineManager.RenderMode">
            <summary>
            Get or set the render mode (solid/wireframe)
            </summary>
        </member>
        <member name="P:CSharpFramework.IEngineManager.DebugRenderFlags">
            <summary>
            Get or set the debug render flags
            </summary>
        </member>
        <member name="P:CSharpFramework.IEngineManager.LogWindow">
            <summary>
            Retuern the log window control
            </summary>
        </member>
        <member name="P:CSharpFramework.IEngineManager.EditorMode">
            <summary>
            Get or set the animation mode - controlled by the EditorManager
            </summary>
        </member>
        <member name="P:CSharpFramework.IEngineManager.AnimationSpeed">
            <summary>
            Get or set the animation speed - controlled by the EditorManager
            </summary>
        </member>
        <member name="E:CSharpFramework.IEngineManager.OnPerformTraceline">
            <summary>
            event that is triggered directly before a traceline is performed. Plugins can listen here to add relevant
            collision meshes via AddRelevantCollisionMesh
            </summary>
        </member>
        <member name="T:CSharpFramework.IEngineManager.ObjectKeyType_e">
            <summary>
            Bitflags passed to the Scene_GetObjectKeyList function
            </summary>
        </member>
        <member name="F:CSharpFramework.IEngineManager.ObjectKeyType_e.None">
            <summary>
            Unused
            </summary>
        </member>
        <member name="F:CSharpFramework.IEngineManager.ObjectKeyType_e.Entity">
            <summary>
            entity keys
            </summary>
        </member>
        <member name="F:CSharpFramework.IEngineManager.ObjectKeyType_e.LightSource">
            <summary>
            Light source keys
            </summary>
        </member>
        <member name="F:CSharpFramework.IEngineManager.ObjectKeyType_e.Path">
            <summary>
            Path keys
            </summary>
        </member>
        <member name="F:CSharpFramework.IEngineManager.ObjectKeyType_e.Cubemap">
            <summary>
            Cubemap texture keys
            </summary>
        </member>
        <member name="F:CSharpFramework.IEngineManager.ObjectKeyType_e.All">
            <summary>
            bit combination of all
            </summary>
        </member>
        <member name="T:CSharpFramework.IEngineManager.RenderSceneEventHandler">
            <summary>
            Delegate
            </summary>
        </member>
        <member name="T:CSharpFramework.IEngineManager.NativeRTTIFlags">
            <summary>
            Enum that classifies native engine classes that support RTTI
            </summary>
        </member>
        <member name="F:CSharpFramework.IEngineManager.NativeRTTIFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:CSharpFramework.IEngineManager.NativeRTTIFlags.Hidden">
            <summary>
            The class is hidden
            </summary>
        </member>
        <member name="F:CSharpFramework.IEngineManager.NativeRTTIFlags.Abstract">
            <summary>
            The class is a pure virtual base class
            </summary>
        </member>
        <member name="T:CSharpFramework.IEngineManager.GatherCustomMaterialProviderEventHandler">
            <summary>
            Delegate
            </summary>
        </member>
        <member name="T:CSharpFramework.IEngineManager.PerformTracelineEventHandler">
            <summary>
            Delegate
            </summary>
        </member>
        <member name="T:CSharpFramework.ShapeTraceMode_e">
            <summary>
            Enum that defines the a mode passed to shape tracing functions. Thus shapes can handle drop to floor
            actions different from picking
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeTraceMode_e.ShapePicking">
            <summary>
            The traceline is used for mouse picking in the view
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeTraceMode_e.DropToFloor">
            <summary>
            The traceline is used as part of the drop-to-floor action
            </summary>
        </member>
        <member name="T:CSharpFramework.ShapeTraceResult">
            <summary>
            Helper class for storing a trace line result
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeTraceResult.bHit">
            <summary>
            Hit result
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeTraceResult.fHitDistance">
            <summary>
            Hit distance
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeTraceResult.hitShape">
            <summary>
            the shape that has been hit
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeTraceResult.SetShapeHit(CSharpFramework.Shapes.ShapeBase,System.Single)">
            <summary>
            Sets a new hit regardless whether it is further away than current trace hit
            </summary>
            <param name="shape"></param>
            <param name="fDistance"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTraceResult.SetShapeHit_IfCloser(CSharpFramework.Shapes.ShapeBase,System.Single)">
            <summary>
            Sets a new trace hit but only if it is closer than the current hit
            </summary>
            <param name="shape"></param>
            <param name="fDistance"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.ISurface">
            <summary>
            Abstract engine surface class
            </summary>
        </member>
        <member name="M:CSharpFramework.ISurface.SetMaterialOverride(System.String,System.String)">
            <summary>
            Set to which other material this material should be redirected.
            </summary>
            <param name="sLibraryFileName"></param>
            <param name="sMaterialName"></param>
        </member>
        <member name="M:CSharpFramework.ISurface.SetName(System.String)">
            <summary>
            Set the name of this surface.
            </summary>
            <param name="sName"></param>
        </member>
        <member name="M:CSharpFramework.ISurface.SetUserDataString(System.String)">
            <summary>
            Set the user data string
            </summary>
            <param name="userData"></param>
        </member>
        <member name="M:CSharpFramework.ISurface.SetTransparencyType(CSharpFramework.TransparencyType)">
            <summary>
            Sets the new transparency type
            </summary>
            <param name="eType"></param>
        </member>
        <member name="M:CSharpFramework.ISurface.SetDoubleSided(System.Boolean)">
            <summary>
            Sets the double sidedness flag
            </summary>
            <param name="bDoubleSided"></param>
        </member>
        <member name="M:CSharpFramework.ISurface.SetLightingMethod(ManagedBase.LightingMethod_e)">
            <summary>
            Sets the specular multiplier
            </summary>
        </member>
        <member name="M:CSharpFramework.ISurface.SetSpecularMul(System.Single)">
            <summary>
            Sets the specular multiplier
            </summary>
        </member>
        <member name="M:CSharpFramework.ISurface.SetSpecularExp(System.Single)">
            <summary>
            Sets the specular exponent
            </summary>
        </member>
        <member name="M:CSharpFramework.ISurface.SetParallaxBias(System.Single)">
            <summary>
            Sets the parallax bias
            </summary>
        </member>
        <member name="M:CSharpFramework.ISurface.SetAlphaTestThreshold(System.Single)">
            <summary>
            Sets the custom alpha test threshold
            </summary>
            <param name="fVal"></param>
        </member>
        <member name="M:CSharpFramework.ISurface.SetDepthProperties(System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Sets depthbuffer related properties
            </summary>
            <param name="bZWrite"></param>
            <param name="fDepthBias"></param>
            <param name="fBiasClamp"></param>
            <param name="fSlopeScale"></param>
        </member>
        <member name="M:CSharpFramework.ISurface.SetParallaxScale(System.Single)">
            <summary>
            Sets the parallax scale
            </summary>
        </member>
        <member name="M:CSharpFramework.ISurface.SetAmbientColor(System.Drawing.Color)">
            <summary>
            Sets the new ambient color (for vLux)
            </summary>
            <param name="ambient"></param>
        </member>
        <member name="M:CSharpFramework.ISurface.SetBaseTexture(System.String)">
            <summary>
            Sets the base texture
            </summary>
        </member>
        <member name="M:CSharpFramework.ISurface.SetNormalMapTexture(System.String)">
            <summary>
            Sets the normalmap texture
            </summary>
        </member>
        <member name="M:CSharpFramework.ISurface.SetSpecularMapTexture(System.String)">
            <summary>
            Sets the specular map texture
            </summary>
        </member>
        <member name="M:CSharpFramework.ISurface.SetAuxiliaryTextures(System.Collections.Specialized.StringCollection)">
            <summary>
            Sets the list of auxiliary textures
            </summary>
            <param name="filenames"></param>
        </member>
        <member name="M:CSharpFramework.ISurface.SetLightmapProperties(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Sets lightmap specific properties
            </summary>
            <param name="iPageID"></param>
            <param name="iPageSizeX"></param>
            <param name="iPageSizeY"></param>
            <param name="fGranularity"></param>
        </member>
        <member name="M:CSharpFramework.ISurface.SetShadowProperties(System.Boolean)">
            <summary>
            Sets shadow related properties
            </summary>
            <param name="bCastStaticShadows"></param>
        </member>
        <member name="M:CSharpFramework.ISurface.SetSortingKey(System.Int32)">
            <summary>
            Sets the sorting key of the material
            </summary>
            <param name="iValue"></param>
        </member>
        <member name="M:CSharpFramework.ISurface.SetDeferredID(System.Byte)">
            <summary>
            Set the deferred material ID
            </summary>
            <param name="iID"></param>
        </member>
        <member name="M:CSharpFramework.ISurface.SetShaderMode(CSharpFramework.ISurface.SHADERMODE)">
            <summary>
            Sets the shader assignment source
            </summary>
        </member>
        <member name="M:CSharpFramework.ISurface.GetShaderMode">
            <summary>
            Gets the shader assignment source
            </summary>
        </member>
        <member name="M:CSharpFramework.ISurface.GetNativeSurfacePointer">
            <summary>
            Get the pointer to native object, VisSurface_cl in our case
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ISurface.GetUsedAsOverride">
            <summary>
            Returns how often surfaces reference this surface as a material override.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.ISurface.SHADERMODE">
            <summary>
            Where the shader for the surface comes from
            </summary>
        </member>
        <member name="F:CSharpFramework.ISurface.SHADERMODE.AUTO">
            <summary>
            Automatically applied lighting shader
            </summary>
        </member>
        <member name="F:CSharpFramework.ISurface.SHADERMODE.MANUAL">
            <summary>
            Manually applied shader
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.PropertyGridEditorAttribute">
            <summary>
            Attribute for PropertyGridEditor editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.PropertyGridEditorAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="dlgTitle">Title of the property grid dialog</param>
            <param name="dlgDescription">Additional description text in the description panel</param>
            <param name="bCloneData">if false, the dialog operates on the original data, otherwise a new object will be returned whrn OK is pressed</param>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.PropertyGridEditor">
            <summary>
            UITypeEditor editor class that opens a modal property grid dialog (class PropertyGridDlg)
            </summary>
        </member>
        <member name="T:CSharpFramework.EntityClassConverter">
            <summary>
            Class that provides the dynamic dropdown list for the entity classes
            </summary>
        </member>
        <member name="M:CSharpFramework.EntityClassConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: We provide standard values
            </summary>
            <param name="context">The descriptor context</param>
            <returns>In our case : true</returns>
        </member>
        <member name="M:CSharpFramework.EntityClassConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: Returns the standard values that the dropdown should have
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Collection of standard values</returns>
        </member>
        <member name="M:CSharpFramework.EntityClassConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: 
            We also allow non-standard values (i.e. when an entity class is missing/unknown)
            </summary>
            <param name="context">The descriptor context</param>
            <returns>In our case : false</returns>
        </member>
        <member name="T:CSharpFramework.NativeBaseClassAttribute">
            <summary>
            Atrribute that works together with the NativeClassConverter. It provides NativeClassConverterwith the base class name
            </summary>
        </member>
        <member name="P:CSharpFramework.NativeBaseClassAttribute.ClassNames">
            <summary>
            Extracts all relevant classes from the engine's RTTI information
            </summary>
        </member>
        <member name="T:CSharpFramework.NativeClassConverter">
            <summary>
            Class that provides the dynamic dropdown list for all registered engine classes derived from a specific base class
            </summary>
        </member>
        <member name="M:CSharpFramework.NativeClassConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: We provide standard values
            </summary>
            <param name="context">The descriptor context</param>
            <returns>In our case : true</returns>
        </member>
        <member name="M:CSharpFramework.NativeClassConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: Returns the standard values that the dropdown should have
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Collection of standard values</returns>
        </member>
        <member name="M:CSharpFramework.NativeClassConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: 
            We also allow non-standard values (i.e. when a native class is missing/unknown)
            </summary>
            <param name="context">The descriptor context</param>
            <returns>In our case : false</returns>
        </member>
        <member name="T:CSharpFramework.Math.Vector3F">
            <summary>
            Vector class for a 3D vector with single precision float components
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.#ctor(CSharpFramework.Math.Vector3F)">
            <summary>
            Constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.Normalize">
            <summary>
            Normalize the vector. Does not throw exception if length is zero
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.GetLength">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.GetLengthSqr">
            <summary>
            Returns the length square of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.CrossProduct(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Computes the cross product between 2 vectors
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.GetCrossProduct(CSharpFramework.Math.Vector3F)">
            <summary>
            Returns the cross product between this and the other vector
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.op_Equality(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Checks for equality
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.op_Inequality(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Checks for equality
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.op_UnaryNegation(CSharpFramework.Math.Vector3F)">
            <summary>
            Negates the vector
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.op_Addition(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Returns the sum of two vectors
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.op_Subtraction(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Subtracts v2 from v1
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.DotProduct(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Static version of the dor product
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.op_Multiply(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Dot product
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.op_Multiply(CSharpFramework.Math.Vector3F,System.Single)">
            <summary>
            Multiplies by a scalar.
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.op_Multiply(System.Single,CSharpFramework.Math.Vector3F)">
            <summary>
            Multiplies by a scalar.
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.op_Division(CSharpFramework.Math.Vector3F,System.Single)">
            <summary>
            Devides by a scalar
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.GetHashCode">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.ToString">
            <summary>
            Converts this vector to readable string of type (x, y)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.Parse(System.String)">
            <summary>
            Tries to parse the string. The string should be compatible to the ToString result.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.Equals(System.Object)">
            <summary>
            Indicates whether this vector equals another. Other type must be a vector, too
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.System#ICloneable#Clone">
            <summary>
            Clones the vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.Clone">
            <summary>
            Clones the vector (return type is vector)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called while de-serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector3F.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:CSharpFramework.Math.Vector3F.Zero">
            <summary>
            Predefined vector (0,0,0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector3F.XAxis">
            <summary>
            Predefined vector (1,0,0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector3F.YAxis">
            <summary>
            Predefined vector (0,1,0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector3F.ZAxis">
            <summary>
            Predefined vector (0,0,1)
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector3F.X">
            <summary>
            Access the x-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector3F.Y">
            <summary>
            Access the y-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector3F.Z">
            <summary>
            Access the z-coordinate
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Vector3FObjectConverter">
            <summary>
            Object converter for vector class
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector3FObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3FObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3FObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3FObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3FObjectConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function - do not support standard values
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Math.PlaneF">
            <summary>
            Structure that defines a plane by 4 values a,b,c and d, where all points on the plane satisfy a * pos.X + b * pos.Y + c * pos.Z + _d == 0.
            The a,b,c vector defines the normal vector of the plane. This vector is always kept normalized.
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor that takes all 4 plane parameters
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.#ctor(CSharpFramework.Math.PlaneF)">
            <summary>
            constructor that copies the data from another plane
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.#ctor(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Constructor that builds a plane from a normal vector and a position on the plane.
            </summary>
            <param name="normal">Normal vector, not necessarily normalized</param>
            <param name="point"></param>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.#ctor(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Constructor that builds a plane from 3 points on the plane
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.Set(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Builds a plane from a normal vector and a position on the plane.
            </summary>
            <param name="normal"></param>
            <param name="point"></param>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.Set(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Builds a plane from 3 points on the plane
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.GetDistance(CSharpFramework.Math.Vector3F)">
            <summary>
            Returns the distance of a point to the plane. The distance is smaller than zero for points behind the plane
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.ProjectOnPlane(CSharpFramework.Math.Vector3F)">
            <summary>
            Returns a new position that is projected onto the plane
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.IsOnPlane(CSharpFramework.Math.Vector3F,System.Single)">
            <summary>
            Indicates whether the passed position is on the plane (using a threshold for comparison)
            </summary>
            <param name="pos"></param>
            <param name="fEpsilon"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.System#ICloneable#Clone">
            <summary>
            Creates an exact copy of this object.
            </summary>
            <returns>The clones object</returns>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.Clone">
            <summary>
            Creates an exact copy of this object.
            </summary>
            <returns>The clones object</returns>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            called when de-serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.PlaneEqual(CSharpFramework.Math.PlaneF,CSharpFramework.Math.PlaneF,System.Single,System.Single)">
            <summary>
            Compares two planes using a threshold
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="fDistEpsilon"></param>
            <param name="fNormalEpsilon"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.PlaneF.PlaneEqualFlipped(CSharpFramework.Math.PlaneF,CSharpFramework.Math.PlaneF,System.Single,System.Single)">
            <summary>
            Compares two planes and returns true if they identical but pointing into opposite direction
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="fDistEpsilon"></param>
            <param name="fNormalEpsilon"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Math.PlaneF.None">
            <summary>
            Represents a (0,0,0,0) plane which is not valid
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.PlaneF.A">
            <summary>
            Returns the A component. For setting, use the Normal property.
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.PlaneF.B">
            <summary>
            Returns the B component. For setting, use the Normal property.
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.PlaneF.C">
            <summary>
            Returns the C component. For setting, use the Normal property.
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.PlaneF.D">
            <summary>
            Gets or sets the D property
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.PlaneF.Normal">
            <summary>
            Gets or sets the normal vector. Setting normalizes the vector
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.PlaneF.Valid">
            <summary>
            Indicates whether this plane represents a valid plane
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.PlaneF.PointOnPlane">
            <summary>
            Returns a position on the plane
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Matrix3F">
            <summary>
            Matrix class for 3x3 rotation matrices with single precision float components
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.#ctor(CSharpFramework.Math.Matrix3F)">
            <summary>
            Constructor
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.#ctor(System.Single[])">
            <summary>
            Constructor
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.Set(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the matrix as 9 elements
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.SetIdentity">
            <summary>
            Set matrix to identity
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.GetDeterminant">
            <summary>
            Returns the determinant of the matrix (Sarrus' rule)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.Transpose">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.Transpose(CSharpFramework.Math.Matrix3F)">
            <summary>
            Static version of Transpose
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.ExtractScaling">
            <summary>
            Extracts the non-uniform scaling from the matrix as the length of the base vectors that span the coordinate system
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.op_Equality(CSharpFramework.Math.Matrix3F,CSharpFramework.Math.Matrix3F)">
            <summary>
            Check equality
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.op_Inequality(CSharpFramework.Math.Matrix3F,CSharpFramework.Math.Matrix3F)">
            <summary>
            Check equality
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.op_Multiply(CSharpFramework.Math.Matrix3F,CSharpFramework.Math.Matrix3F)">
            <summary>
            Multiply two matrices
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.op_Multiply(CSharpFramework.Math.Matrix3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Transform vector by matrix
            </summary>
            <param name="matrix"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.Transform(CSharpFramework.Math.Matrix3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Static function version of matrix*vector
            </summary>
            <param name="matrix"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.FromEuler(System.Single,System.Single,System.Single)">
            <summary>
            Gets the matrix from Euler angles. All angles are specified in degrees
            </summary>
            <param name="fYaw">Euler yaw angle</param>
            <param name="fPitch">Euler pitch angle</param>
            <param name="fRoll">Euler roll angle</param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.ToEuler">
            <summary>
            Converts this matrix into Euler angles. This function uses engine compliant conversions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.Parse(System.String)">
            <summary>
            Tries to parse the string. The string should be compatible to the ToString result.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.System#ICloneable#Clone">
            <summary>
            Clone matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.Clone">
            <summary>
            Clones the matrix (return type is matrix)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when de-serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3F.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:CSharpFramework.Math.Matrix3F.Identity">
            <summary>
            Identity matrix
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Matrix3F.COMPONENT_COUNT">
            <summary>
            Number of components for this matrix type
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3F.M11">
            <summary>
            Matrix element at 1-based index [1,1].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3F.M12">
            <summary>
            Matrix element at 1-based index [1,2].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3F.M13">
            <summary>
            Matrix element at 1-based index [1,3].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3F.M21">
            <summary>
            Matrix element at 1-based index [2,1].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3F.M22">
            <summary>
            Matrix element at 1-based index [2,2].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3F.M23">
            <summary>
            Matrix element at 1-based index [2,3].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3F.M31">
            <summary>
            Matrix element at 1-based index [3,1].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3F.M32">
            <summary>
            Matrix element at 1-based index [3,2].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3F.M33">
            <summary>
            Matrix element at 1-based index [3,3].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3F.Item(System.Int32)">
            <summary>
            Access matrix as an array of 9 elements
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3F.Item(System.Int32,System.Int32)">
            <summary>
            Access matrix as 2D array of type [row, column]
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Matrix3FObjectConverter">
            <summary>
            Object converter for matrix class
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3FObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3FObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3FObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3FObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3FObjectConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function - do not support standard values
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Dialogs.TestSelectionDlg">
            <summary>
            Dialog for selecting tests from a passed TestSuite.
            Modifies the TestSuite accordingly.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.TestSelectionDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.TestSelectionDlg.#ctor(NUnit.Core.TestSuite)">
            <summary>
            Constructor that takes a collections of tests to display
            </summary>
            <param name="allTests"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.TestSelectionDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.TestSelectionDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.CreateFileDlg">
            <summary>
            CreateFileDlg : Generic dialog for creating a file.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateFileDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateFileDlg.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a File Dialog with predefined parameters.
            </summary>
            <param name="caption">The caption of the dialog</param>
            <param name="description">A short descriptive text, which will be shown inside the dialog</param>
            <param name="fileName">The absolute or relative filename of the desired destination or null</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateFileDlg.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Create a File Dialog with predefined parameters.
            </summary>
            <param name="caption">The caption of the dialog</param>
            <param name="description">A short descriptive text, which will be shown inside the dialog</param>
            <param name="fileName">The absolute or relative filename of the desired destination or null</param>
            <param name="filterExtensions">An array of filter extensions or null to extract it from the specified filename</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateFileDlg.OpenStandardCreateFileDialog(System.Windows.Forms.IWin32Window,System.String,System.String@,System.String,System.String[])">
            <summary>
            Static helper method to re-direct file open requests to the standard file browser dialog
            </summary>
            <param name="owner"></param>
            <param name="initialDir"></param>
            <param name="filename"></param>
            <param name="caption"></param>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateFileDlg.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            ShowDialog function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateFileDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateFileDlg.OnOK(System.Object,System.EventArgs)">
            <summary>
            OK button pressed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateFileDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.CreateFileDlg.Filter">
            <summary>
            File filters to use, e.g. {".jpg",".bmp"} in LOWERCASE!
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.CreateFileDlg.Ext">
            <summary>
            extension to append to the file (e.g. ".txt")
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.CreateFileDlg.FileName">
            <summary>
            Output file name
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.CreateFileDlg.AllowOverwrite">
            <summary>
            Allow to overwrite an existing file
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.CreateFileDlg.AllowFolderCreation">
            <summary>
            Status of the "Add new folder" button
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.CreateFileDlg.SupportCustomDirectories">
            <summary>
            Determines whether custom directories also appear in the tree
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.CreateFileDlg.WarningOnOverwrite">
            <summary>
            Warning shown on overwriting an existing file
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.CreateFileDlg.AskWhenOverwriting">
            <summary>
            When set to true user is warned when he tries to overwrite a file.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.CreateFileDlg.SelectFolder">
            <summary>
            Determines whether output name is folder
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateFileDlg.newFolder_Click(System.Object,System.EventArgs)">
            <summary>
            Create a new folder
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateFileDlg.folderTreeView1_AfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Grey out OK and "New Folder" buttons if a folder isn't selected
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.CreateFileDlg.UpdateButtons">
            <summary>
            Update all button states, e.g. grayed out OK button
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.CreateFileDlg.Caption">
            <summary>
            Text displayed in dialog title and caption bar
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.CreateFileDlg.Description">
            <summary>
            Test displayed as caption bar description
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.CreateFileDlg.InitialDirectory">
            <summary>
            Directory to start with
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.CreateFileDlg.SelectedStartSubDirectory">
            <summary>
            Directory to start with
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.BitmaskEditDlg">
            <summary>
            Modal dialog to edit a bitmask.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.BitmaskEditDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.BitmaskEditDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.BitmaskEditDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.BitmaskEditDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.BitmaskEditDlg.BitCount">
            <summary>
            Get or set the number of bits (max 32)
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.BitmaskEditDlg.BitMask">
            <summary>
            Get or set the bitmask
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.BitmaskEditDlg.Caption">
            <summary>
            Forwards the string to the caption bar
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.BitmaskEditDlg.Description">
            <summary>
            Forwards the string to the caption bar
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.EditPrefabParameterDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.EditPrefabParameterDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.EditPrefabParameterDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Clipboard.ClipboardData">
            <summary>
            Represents a single clipboard data object. This object is serializable so it can be converted into a text string.
            By default it serializes the name and the underlying data object. It is only serialized if CanSerialize returns true (default).
            If serialization is not supported, then the data object does not go into the global windows clipboard and thus does not survive after closing vForge.
            </summary>
        </member>
        <member name="M:CSharpFramework.Clipboard.ClipboardData.#ctor(System.Object,System.String)">
            <summary>
            Constructor of a clipboard data object. Rather than creating this base type via new operator, the global function EditorClipboard.CreateDataObject should be used.
            </summary>
            <param name="obj">Object to put into clipboard (will not be cloned!)</param>
            <param name="name">User definable name to show up in the menu</param>
        </member>
        <member name="M:CSharpFramework.Clipboard.ClipboardData.OnAddedToClipboard(CSharpFramework.Clipboard.EditorClipboard)">
            <summary>
            Overridable that is called when this data object is added to the clipboard.
            This base implementation is empty.
            </summary>
            <param name="clipboard"></param>
        </member>
        <member name="M:CSharpFramework.Clipboard.ClipboardData.OnRemovedFromClipboard(CSharpFramework.Clipboard.EditorClipboard)">
            <summary>
            Overridable that is called when this data object is removed from the clipboard
            This base implementation is empty.
            </summary>
            <param name="clipboard"></param>
        </member>
        <member name="M:CSharpFramework.Clipboard.ClipboardData.TryPaste(System.Object)">
            <summary>
            This function can be used for user definable paste behavior. Return true if custom code has already performed the pasting
            </summary>
            <param name="opHint"></param>
            <returns>true if this object should not be further processed</returns>
        </member>
        <member name="P:CSharpFramework.Clipboard.ClipboardData.Name">
            <summary>
            Get the name of the data in the clipboard (used definable "nice" name)
            </summary>
        </member>
        <member name="P:CSharpFramework.Clipboard.ClipboardData.Object">
            <summary>
            Get the object that is in the clipboard
            </summary>
        </member>
        <member name="P:CSharpFramework.Clipboard.ClipboardData.CanSerialize">
            <summary>
            Overridable that determines whether this type of clipboard object can be serialized to a data stream.
            If false, then the object will only be stored locally in vForge and is not available across instances.
            </summary>
        </member>
        <member name="T:CSharpFramework.Clipboard.EditorClipboard">
            <summary>
            Represents the editor clipboard. The EditorManager has one static instance of this class.
            </summary>
        </member>
        <member name="M:CSharpFramework.Clipboard.EditorClipboard.HasData">
            <summary>
            checks whether clipboard currently has valid data
            </summary>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Clipboard.EditorClipboard.START_TAG">
            <summary>
            Name tag to identify potential text clipboard items for vForge. Avoids de-serialization attempt for every other string
            Only used if CLIPBOARD_TEXT_SERIALIZATION is set
            </summary>
        </member>
        <member name="M:CSharpFramework.Clipboard.EditorClipboard.ConvertToString(System.Byte[])">
            <summary>
            Converts the data stream into a string
            Only used if CLIPBOARD_TEXT_SERIALIZATION is set
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Clipboard.EditorClipboard.ConvertFromString(System.String)">
            <summary>
            Converts a string back into data array. Returns null if the string is empty or does not start with the specific data tag
            Only used if CLIPBOARD_TEXT_SERIALIZATION is set
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Clipboard.EditorClipboard.CLIPBOARD_TEXT_SERIALIZATION">
            <summary>
            Global flag whether the clipboard content should be serialized to a text stream and go into the text clipboard. Not recommended
            </summary>
        </member>
        <member name="M:CSharpFramework.Clipboard.EditorClipboard.CheckClipboardContent">
            <summary>
            Called from outside if the text clipboard content has changed (see window WM_DRAWCLIPBOARD message)
            </summary>
        </member>
        <member name="M:CSharpFramework.Clipboard.EditorClipboard.CreateDataObject(System.Object,System.String)">
            <summary>
            This function should be used to request a new data object. It calls the OnClipboardDataChanged callback or provides base type ClipboardData
            </summary>
            <param name="obj">Object to copy as passed to the ClipboardData constructor</param>
            <param name="name">nice name of the object as passed to the ClipboardData constructor</param>
            <returns>A new instance of ClipboardData or derived classes</returns>
        </member>
        <member name="P:CSharpFramework.Clipboard.EditorClipboard.DataName">
            <summary>
            Gets the "nice" name of the data in the clipboard
            </summary>
        </member>
        <member name="P:CSharpFramework.Clipboard.EditorClipboard.DataObject">
            <summary>
            Gets the object that is currently in the clipboard
            </summary>
        </member>
        <member name="P:CSharpFramework.Clipboard.EditorClipboard.Data">
            <summary>
            Get and set the data object in the clipboard
            </summary>
        </member>
        <member name="E:CSharpFramework.Clipboard.EditorClipboard.OnClipboardDataChanged">
            <summary>
            This event is triggered after a new clipboard data object has been assigned. The sender is a reference to the Clipboard instance
            </summary>
        </member>
        <member name="E:CSharpFramework.Clipboard.EditorClipboard.GetClipboardData">
            <summary>
            This global event gets triggered whenever vForge requests a data object for the clipboard. By listening to this callback, a custom data object can be provided.
            The custom data object (derived from ClipboardData) can not only store custom data along with the object to copy, but also implements its own TryPaste function.
            </summary>
        </member>
        <member name="T:CSharpFramework.Clipboard.EditorClipboard.GetClipboardDataEventHandler">
            <summary>
            Event prototype for the static GetClipboardData callback
            </summary>
            <param name="objectToCopy">The object that should be wrapped into the data object is passed here</param>
            <param name="name">The name (as to be passed to base constructor of ClipboardData)</param>
            <param name="data">Reference that takes a new instance of a data object. Can be left to null to use the default data obejct</param>
        </member>
        <member name="T:CSharpFramework.Actions.RotateShapeAction">
            <summary>
            Action to rotate a single shape
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.RotateShapeAction.#ctor(CSharpFramework.Shapes.Shape3D,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Constructor that takes the shape to rotate and new resp. old Euler rotation
            </summary>
            <param name="_shape">Shape to rotate</param>
            <param name="_oldOri">old orientation</param>
            <param name="_newOri">new orientation</param>
        </member>
        <member name="M:CSharpFramework.Actions.RotateShapeAction.Undo">
            <summary>
            Sets old orientation
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.RotateShapeAction.Do">
            <summary>
            Sets new orientation
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RotateShapeAction.ShortName">
            <summary>
            Short name of the action, to show in the menu
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RotateShapeAction.LongName">
            <summary>
            Long name of the action, to show in the history
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RotateShapeAction.Valid">
            <summary>
            Overridden valid function (checks layer editable flag)
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RotateShapeAction.IconIndex">
            <summary>
            Get the icon for this action
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RotateShapeAction.IconImage">
            <summary>
            Static function to return the image used to display this type of action in the history
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.RotateShapesAction">
            <summary>
            Group action to rotate a collection of shapes individually
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.RotateShapesAction.#ctor(CSharpFramework.ShapeCollection,CSharpFramework.Math.Vector3F[],CSharpFramework.Math.Vector3F[],CSharpFramework.Math.Vector3F[],CSharpFramework.Math.Vector3F[])">
            <summary>
            Constructor that takes a collection of shapes to rotate and the according arrays of old and new orientations
            </summary>
            <param name="_shapes">Collection of shapes to rotate</param>
            <param name="_oldOris">Array of old orientations</param>
            <param name="_newOris">Optional array of new orientations (if null it uses the current shape orientation)</param>
        </member>
        <member name="P:CSharpFramework.Actions.RotateShapesAction.IconIndex">
            <summary>
            Return the icon index for this action
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.AddShapeComponentAction">
            <summary>
            Action for adding a component to a shape. This action also creates
            the native component instance in case it doesn't exist yet.
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AddShapeComponentAction.AttachmentFailureReason">
            <summary>
            Returns the error message of the component, describing why it can't be added
            to the given shape. 
            
            Note: Must be queried after "Valid" has been queried.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Actions.RemoveShapeComponentAction">
            <summary>
            Action for removing a component from a shape.
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RemoveShapeComponentAction.Shape">
            <summary>
            Gets the shape the component has or will be removed from
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RemoveShapeComponentAction.Component">
            <summary>
            Gets the component that has or will be removed from the shape
            </summary>
        </member>
        <member name="T:CSharpFramework.Visitors.DeregisterAllLinksShapeVisitor">
            <summary>
            This shape visitor deregisters all links from the shape.
            The removed shape keeps all references in the link collections, but deregisters 
            at all other shapes it is linked to or linked by.
            
            Use the ReregisterAllLinksShapeVisitor visitor to re-establish the
            links.
            </summary>
        </member>
        <member name="F:CSharpFramework.Visitors.DeregisterAllLinksShapeVisitor.INSTANCE">
            <summary>
            One global instance of this class
            </summary>
        </member>
        <member name="T:CSharpFramework.Visitors.ReregisterAllLinksShapeVisitor">
            <summary>
            This shape visitor re-establishes the links (without changing own collections) which have 
            previously been unregistered with the DeregisterAllLinksShapeVisitor visitor.
            </summary>
        </member>
        <member name="F:CSharpFramework.Visitors.ReregisterAllLinksShapeVisitor.INSTANCE">
            <summary>
            One global instance of this class
            </summary>
        </member>
        <member name="T:CSharpFramework.View.HotSpotRotation">
            <summary>
            Hotspot class for rotations around an axis
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotRotation.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.UInt32,CSharpFramework.View.HotSpotBase.PickType,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="owner"></param>
            <param name="bitmapfile"></param>
            <param name="iColorRef"></param>
            <param name="picktype"></param>
            <param name="fRadius"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotRotation.RenderHotSpot(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotRotation.EvaluatePosition">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotRotation.OnDragBegin(CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotRotation.OnDrag(CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="P:CSharpFramework.View.HotSpotRotation.Origin">
            <summary>
            Helper
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotRotation.Distance">
            <summary>
            Allows to set the distance at which the hotspot is displayed
            </summary>
        </member>
        <member name="T:CSharpFramework.View.HotSpot3D">
            <summary>
            This derived version allows to drag in all 6 directions
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpot3D.#ctor(CSharpFramework.Shapes.Shape3D,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="owner"></param>
            <param name="fSize"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpot3D.RenderHotSpot(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overriden function to render the axis system
            </summary>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpot3D.EvaluatePosition">
            <summary>
            Overriden function to update 3D position
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpot3D.IsMouseOver(System.Single,System.Single)">
            <summary>
            Overriden function to test for mouse hit 
            </summary>
            <param name="fMouseX"></param>
            <param name="fMouseY"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.View.HotSpot3D.OnDragBegin(CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpot3D.OnDrag(CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpot3D.OnDragEnd(CSharpFramework.VisionViewBase)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
        </member>
        <member name="P:CSharpFramework.View.HotSpot3D.CurrentPosition">
            <summary>
            Gets or sets the relative 3D position
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpot3D.StartPosition">
            <summary>
            Gets or sets the relative 3D position
            </summary>
        </member>
        <member name="T:CSharpFramework.View.HotSpot3D.SignedAxis_e">
            <summary>
            enum that defines the 6 possible directions
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpot3D.SignedAxis_e.NONE">
            <summary>
            No axis
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpot3D.SignedAxis_e.NEG_X">
            <summary>
            neg. x-axis
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpot3D.SignedAxis_e.POS_X">
            <summary>
            pos. x-axis
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpot3D.SignedAxis_e.NEG_Y">
            <summary>
            neg. y-axis
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpot3D.SignedAxis_e.POS_Y">
            <summary>
            pos. y-axis
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpot3D.SignedAxis_e.NEG_Z">
            <summary>
            neg. z-axis
            </summary>
        </member>
        <member name="F:CSharpFramework.View.HotSpot3D.SignedAxis_e.POS_Z">
            <summary>
            pos. z-axis
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.SetPropertyActionTest">
            <summary>
            Summary description for SetPropertyActionTest.
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.SetPropertyActionTest.SetUp">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.SetPropertyActionTest.TearDown">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.SetPropertyActionTest.TestSimpleProperty">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.SetPropertyActionTest.TestArrayProperty">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.SetPropertyActionTest.TestDependencies">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.SetPropertyActionTest.TestGroupAction">
            <summary>
            Test function
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.DynamicPropertiesTest">
            <summary>
            Summary description for DynamicPropertiesTest.
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.SetUp">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TearDown">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TestVariousPropertyTypes">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TestTypeConverter">
            <summary>
            Tests whether the custom type descriptor has proper support for undo/redo and custom attributes.
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TestNestedProperties">
            <summary>
            Tests whether nested properties (e.g. the components of a vector property) provide the type converter
            and property descriptors required for undo/redo
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TestEnum">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TestSerialization">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TestClone">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TestTypeNotFound">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TestTypeAlreadyExists">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TestInstanceMigration_NewProperty">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TestInstanceMigration_OldPropertyMissing">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TestInstanceMigration_PropertyTypeChanged">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TestInstanceMigration_CompleteTypeMissing">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TestEnumProperty">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.TestEnumPropertyModification">
            <summary>
            This tests modifies the list of available enumerations after an enumeration property has been
            serialized, and checks whether the enumeration property can then still be deserialized and migrated
            correctly.
            Based on Helpdesk request #15501.
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.CreateTypeConverterFromDescriptor(System.Object)">
            <summary>
            Search for a type converter via the TypeDescriptor interface and return a new
            instance of it
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.CreateTypeConverterForDynamicPropertyType(CSharpFramework.DynamicProperties.DynamicPropertyType)">
            <summary>
            Search for a type converter attribute in the passed property type and return a new
            instance of it
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Tests.DynamicPropertiesTest.TestCollection">
            <summary>
            Test property used by automated tests
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.DynamicPropertiesTest.CustomEnum">
            <summary>
            Internal enum
            </summary>
        </member>
        <member name="F:CSharpFramework.Tests.DynamicPropertiesTest.CustomEnum.RED">
            <summary>
            Test value
            </summary>
        </member>
        <member name="F:CSharpFramework.Tests.DynamicPropertiesTest.CustomEnum.GREEN">
            <summary>
            Test value
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.DynamicPropertiesTest.CustomPropertyClass">
            <summary>
            test class
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicPropertiesTest.CustomPropertyClass.#ctor(CSharpFramework.Tests.DynamicPropertiesTest.CustomPropertyClass.TYPE,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="initType"></param>
            <param name="initValue"></param>
        </member>
        <member name="F:CSharpFramework.Tests.DynamicPropertiesTest.CustomPropertyClass.iValue">
            <summary>
            Test value
            </summary>
        </member>
        <member name="F:CSharpFramework.Tests.DynamicPropertiesTest.CustomPropertyClass.type">
            <summary>
            Test type
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.DynamicPropertiesTest.CustomPropertyClass.TYPE">
            <summary>
            internal enum
            </summary>
        </member>
        <member name="F:CSharpFramework.Tests.DynamicPropertiesTest.CustomPropertyClass.TYPE.TYPE_A">
            <summary>
            Test value
            </summary>
        </member>
        <member name="F:CSharpFramework.Tests.DynamicPropertiesTest.CustomPropertyClass.TYPE.TYPE_B">
            <summary>
            Test value
            </summary>
        </member>
        <member name="T:CSharpFramework.ShortCuts.LayoutShortcut">
            <summary>
            Implements ShortCutAction that is bound to a layout instance
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.LayoutShortcut.#ctor(CSharpFramework.Layout.Layout,System.Windows.Forms.Keys)">
            <summary>
            Constructor
            </summary>
            <param name="layout"></param>
            <param name="defaultKey"></param>
        </member>
        <member name="F:CSharpFramework.ShortCuts.LayoutShortcut.LAYOUT_CATEGORY">
            <summary>
            The category sting also returned by Category
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.LayoutShortcut.Do">
            <summary>
            Overridden Do function, actives the layout
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.LayoutShortcut.OnShortCutChanged(System.Windows.Forms.Keys)">
            <summary>
            Update the menu item
            </summary>
            <param name="oldVal"></param>
        </member>
        <member name="P:CSharpFramework.ShortCuts.LayoutShortcut.ActionName">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.LayoutShortcut.Category">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.LayoutShortcut.Enabled">
            <summary>
            Overridden function. Returns always true since the layouts can always be switched
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.IShapeFilter">
            <summary>
            Interface for (custom) shape filters to appear in the search dialog. Custom classes can be derived and implement the 
            Passes function.
            Shape filter instances are part of a ShapeFilterSetup instance which is shown in the search dialog as a list of filters.
            A filter setup in turn can be set via static function ShapeSearchPanel.FilterSetup.
            Custom classes that implement IShapeFilter must also implement serialization so that the filter setup can be saved to file.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.IShapeFilter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.IShapeFilter.GetImageIndex(CSharpFramework.View.GUI.DynamicImageList)">
            <summary>
            Optional function to return an image index for displaying in the list view
            </summary>
            <param name="imageList"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.IShapeFilter.Passes(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Key function of this interface. Indicates whether the passed shape passes the filter test or not
            </summary>
            <param name="shape">The shape to test</param>
            <returns>true if the shape passes the test and appears in the result list</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.IShapeFilter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.IShapeFilter.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.IShapeFilter.OnDeserialization(System.Object)">
            <summary>
            Called upon de-serialization
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.IShapeFilter.Clone">
            <summary>
            Overridable Clone function
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Shapes.IShapeFilter.Owner">
            <summary>
            Internal property that holds the owner filter config
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.IShapeFilter.Active">
            <summary>
            The active flag of this filter. Only active filters are considered in the dialog (represented by the checkmark in the list)
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.IShapeFilter.DisplayName">
            <summary>
            Returns the name of this instance
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.IShapeFilter.Description">
            <summary>
            Overridable property to return a description string for this filter type
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeFilterSetup">
            <summary>
            This class represents a filter setup which consists of a list of IShapeFilter instances. A shape passes the
            filter setup if it passes all filters in the list.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeFilterSetup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeFilterSetup.Passes(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Evaluates whether the passed shape passes the test, i.e. if it passes all filters in the list
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeFilterSetup.Filter(CSharpFramework.ShapeCollection)">
            <summary>
            Returns a filtered version of the input collection. Uses the Passes function
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeFilterSetup.Add(CSharpFramework.Shapes.IShapeFilter)">
            <summary>
            Overridden function to add a filter to this setup
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeFilterSetup.Clone">
            <summary>
            Clones the setup - performs a deep-clone of all filters as well
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeFilterSetup.DefaultSetup">
            <summary>
            Static property that return the default setup.
            A custom default setup can be assigned here (or null to reset the default setup).
            The search dialog uses this setup when the 'reset' button is pressed
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.FilterShapesVisitor">
            <summary>
            Visitor class used by the search panel to find all shapes in the scene that match a filter setup
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.FilterShapesVisitor.#ctor(CSharpFramework.Shapes.ShapeFilterSetup)">
            <summary>
            Constructor that takes the filter setup to test
            </summary>
            <param name="setup"></param>
        </member>
        <member name="F:CSharpFramework.Shapes.FilterShapesVisitor.ResultShapes">
            <summary>
            Result collection that holds the matching shapes
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeClassNameConverter">
            <summary>
            Helper string converter to show shape classes
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeFilterByShapeClass">
            <summary>
            Filter class that implements IShapeFilter. It filters shape by shape class.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeFilterByShapeClass.#ctor(System.String)">
            <summary>
            Constructor that takes the name of this filter to appear in the list
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeFilterByLayer">
            <summary>
            Filter class that implements IShapeFilter. It filters according to layer
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeFilterByComponent">
            <summary>
            Filter class that implements IShapeFilter. It singles out shapes which have a certain component.
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapePropertiesNameConverter">
            <summary>
            Helper string converter to show the properties of a shape
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeFilterByProperty">
            <summary>
            Filter class that implements IShapeFilter. It filters according to a single property/value pair
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer">
            <summary>
            DEPRECATED class that holds renderer settings used in 7.6.X version
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.#ctor(CSharpFramework.Scene.ISceneObject)">
            <summary>
            Deprecated
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.Finalize">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.Owner">
            <summary>
            Scene object that owns this config. Typically the main layer
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.Update(System.Boolean)">
            <summary>
            Update the renderer in the view
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.Update">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.EditorManager_SceneEvent(System.Object,CSharpFramework.SceneEventArgs)">
            <summary>
            React to scene events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.RendererType">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.RendererProperties">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.Renderer.OnRendererTypeChanging">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.Renderer.OnRendererTypeChanged">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.Modifiable">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.Modified">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.RendererType_e">
            <summary>
            renderer types
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.RendererType_e.ForwardRenderer">
            <summary>
            Forward Renderer
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.RendererType_e.DeferredRenderer">
            <summary>
            Deferred Renderer
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.RendererPropertiesBase">
            <summary>
            RendererPropertiesBase : Base class of specific renderer properties. Allows to set the properties of the parent,
            thus it needs the owner parent in the constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.RendererPropertiesBase.#ctor(CSharpFramework.Scene.Renderer)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.RendererPropertiesBase.getType">
            <summary>
            Deprecated
            </summary>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.RendererPropertiesBase.Owner">
            <summary>
            Owner shape
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.RendererPropertiesBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deprecated
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.RendererPropertiesBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deprecated
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.RendererPropertiesBase.Modifiable">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.RendererPropertiesBase.Modified">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.DeferredRendererProperties">
            <summary>
            specific deferred renderer properties
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.CAT_GENERAL">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.CATORDER_GENERAL">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.CAT_TIMOOFDAY">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.CATORDER_TIMEOFDAY">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.CAT_SSAO">
            <summary>
            Category string
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.CATORDER_SSAO">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.LAST_CATEGORY_ORDER_ID">
            <summary>
            last used category ID
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.#ctor(CSharpFramework.Scene.Renderer)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.LoadingVersion">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.LOADING_VERSION_0">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.LOADING_VERSION_1">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.LOADING_VERSION_CURRENT">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.getType">
            <summary>
            Deprecated
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.HDR">
            <summary>
            If true, the Accumulation Buffer for deferred rendering will be created as a HDR render target (the exact
            type depends on the platform and hardware used)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.StaticLighting">
            <summary>
            If true, the Deferred Rendering System will use existing lightmap/lightgrid information in the
            initial rendering pass. This also means that static lights will not be considered in the deferred lighting
            pass any more; instead, only dynamic lights will be considered there.
            If false, the scene illumination will be fully handled with deferred lighting.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDay">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAO">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.DepthOfField">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.AntiAliasing">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.RimLight">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.Glow">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapper">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.NativeClassName">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.#ctor(CSharpFramework.Scene.Renderer)">
            <summary>
            Deprecated
            </summary>
            <param name="_parent"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.SetParent(CSharpFramework.Scene.Renderer)">
            <summary>
            Deprecated
            </summary>
            <param name="_parent"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.Sunlight">
            <summary>
              True to enable (directional) sun light. If false, time of day will not be used.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.SunCoronaTexture">
            <summary>
              Corona texture to use for the sun.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.SunlightIntensity">
            <summary>
              Intensity of the sun light source.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.SunlightShadows">
            <summary>
              Sun shadows. True to enable shadows cast by the sun, otherwise false.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.ShadowTextureRange">
            <summary>
              Range around the camera (in units) within which objects will cast shadows. The larger this value, the lower the effective shadow resolution will be.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.ShadowTextureSize">
            <summary>
              Size of the shadow texture. Larger textures will result in a higher effective shadow resolution, but require more memory and performance.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.ShadowSampleRadius">
            <summary>
              Shadow sample radius. Larger values result in a blurrier shadow.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.UseInterleavedUpdate">
            <summary>
              True to use interleaved update for cascaded shadows. Interleaved updates render only one shadow map cascade per tick. This is faster, but can produce artifacts with rapidly moving objects.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.ShadowQuality">
            <summary>
              Shadow Quality to use. Valid values are PCF4, PCF8, and PCF16 (percentage-closer filtering with 4, 8, and 16 samples), or PCSS16 (percentage-closer soft shadows with 16 samples).
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.ShadowOffset">
            <summary>
              Shadow offset for the distance to the light source.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.AmbientColor">
            <summary>
              Color curve for ambient light over daytime.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.SunColor">
            <summary>
              Color curve for sunlight over daytime (if sunlight is enabled)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.FogColor">
            <summary>
              Color Curve for fog over daytime
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.FogStart">
            <summary>
              Curve for fog start distance over daytime
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.FogEnd">
            <summary>
              Curve for fog end distance over daytime
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.FogRange">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.Backlight">
            <summary>
              True to enable a backlight. The backlight will have the inverted sun color, and won't cast shadows.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.DawnSkyFade">
            <summary>
              Curve for fading between day sky and dawn sky texture.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.DuskSkyFade">
            <summary>
              Curve for fading between day sky and dusk sky texture.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.NightSkyFade">
            <summary>
              Curve for fading between day sky and night sky textures
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.CurrentTime">
            <summary>
              The current (starting) time of day.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.Modifiable">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.Modified">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.ShadowQuality_e">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.ShadowQuality_e.PCF4">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.ShadowQuality_e.PCF8">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.ShadowQuality_e.PCF16">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.TimeOfDayProperties.ShadowQuality_e.PCSS16">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.#ctor(CSharpFramework.Scene.Renderer)">
            <summary>
            Deprecated
            </summary>
            <param name="_parent"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.SetParent(CSharpFramework.Scene.Renderer)">
            <summary>
            Deprecated
            </summary>
            <param name="_parent"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Enable">
            <summary>
              Enables/disables screen-space ambient occlusion.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Samples">
            <summary>
              Number of SSAO samples. Higher values produce higher quality, but require more performance.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Filter">
            <summary>
              Filtering mode. Gaussian is fastest; Adaptive typically gives a good visual quality at decent performance.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Range">
            <summary>
              Range of the SSAO effect. Larger SSAO ranges take further away pixels into account, but often produce granier results and are generally slower. 
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.RangeFactor">
            <summary>
              Range factor for SSAO. Tweak this value to reduce haloing artifacts.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Offset">
            <summary>
              Offset for SSAO. Tweak this value to reduce self-shadowing artifacts.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.BlurPasses">
            <summary>
              Number of blur passes for blurring the ambient occlusion result.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.HalfResolution">
            <summary>
              True to render the SSAO effect at reduced resolution. This is highly recommended for higher performance.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Modifiable">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Modified">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Samples_e">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Samples_e._8_">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Samples_e._16_">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Samples_e._32_">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Samples_e._64_">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Filter_e">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Filter_e.Gaussian">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Filter_e.Bilateral5Samples">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Filter_e.Bilateral9Samples">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.SSAOProperties.Filter_e.Adaptive">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.DeferredRendererProperties.DepthofFieldProperties">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.DepthofFieldProperties.#ctor(CSharpFramework.Scene.Renderer)">
            <summary>
            Deprecated
            </summary>
            <param name="_parent"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.DepthofFieldProperties.SetParent(CSharpFramework.Scene.Renderer)">
            <summary>
            Deprecated
            </summary>
            <param name="_parent"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.DepthofFieldProperties.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.DepthofFieldProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.DepthofFieldProperties.Enable">
            <summary>
              Enable/disable depth of field effect.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.DepthofFieldProperties.FocusPoint">
            <summary>
              Focus Point of the depth of field effect (distance from the camera in units).
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.DepthofFieldProperties.FocusDepth">
            <summary>
              Focus Range of the depth of field effect (in units). Determines the distance from the focus point within which objects are still in focus.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.DepthofFieldProperties.BlurRadius">
            <summary>
              Maximum radius of the blur kernel. Larger values have a higher maximum blurriness, but can result in visual artifacts.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.DepthofFieldProperties.QuarterSize">
            <summary>
              True to render the depth of field effect at reduced resolution. This is strongly recommended for performance reasons.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.DepthofFieldProperties.Modifiable">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.DepthofFieldProperties.Modified">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.DeferredRendererProperties.AntiAliasingProperties">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.AntiAliasingProperties.#ctor(CSharpFramework.Scene.Renderer)">
            <summary>
            Deprecated
            </summary>
            <param name="_parent"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.AntiAliasingProperties.SetParent(CSharpFramework.Scene.Renderer)">
            <summary>
            Deprecated
            </summary>
            <param name="_parent"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.AntiAliasingProperties.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.AntiAliasingProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.AntiAliasingProperties.Enable">
            <summary>
              Enable/disable post-process anti-aliasing.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.AntiAliasingProperties.NormalThreshold">
            <summary>
              Normal value threshold for edge detection.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.AntiAliasingProperties.DepthThreshold">
            <summary>
              Depth value threshold for edge detection.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.AntiAliasingProperties.NormalWeight">
            <summary>
              Weight of the normal difference for edge detection.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.AntiAliasingProperties.DepthWeight">
            <summary>
              Weight of the depth difference for edge detection.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.AntiAliasingProperties.Strength">
            <summary>
              General strength of the anti-aliasing effect. Higher values will produce blurrier results.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.AntiAliasingProperties.Modifiable">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.AntiAliasingProperties.Modified">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.DeferredRendererProperties.RimLightProperties">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.RimLightProperties.#ctor(CSharpFramework.Scene.Renderer)">
            <summary>
            Deprecated
            </summary>
            <param name="_parent"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.RimLightProperties.SetParent(CSharpFramework.Scene.Renderer)">
            <summary>
            Deprecated
            </summary>
            <param name="_parent"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.RimLightProperties.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.RimLightProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.RimLightProperties.Enable">
            <summary>
              Enable/disable rim light effect. Rim Lighting can be used to pronounce object silhouettes.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.RimLightProperties.RimLightColor">
            <summary>
              Color of the rim light effect.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.RimLightProperties.RimLightExponent">
            <summary>
              Exponent of the rim light effect. The higher this value, the less general brightening of the scene will occur.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.RimLightProperties.RimLightScale">
            <summary>
              Scaling of the rim light effect. The higher this value, the brighter the rim light will be.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.RimLightProperties.Modifiable">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.RimLightProperties.Modified">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.#ctor(CSharpFramework.Scene.Renderer)">
            <summary>
            Deprecated
            </summary>
            <param name="_parent"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.SetParent(CSharpFramework.Scene.Renderer)">
            <summary>
            Deprecated
            </summary>
            <param name="_parent"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.Enable">
            <summary>
              Enable/disable the glow effect.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.Downscale">
            <summary>
              Which downscaling mode to use for the glow effect. 4X is generally faster than 2X, but 2X looks better.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.Bias">
            <summary>
              Bias value for the glow. Positive values produce a stronger glow effect.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.Exponent">
            <summary>
              Exponent value for the glow. Higher values produce a sharper cutoff between brighter and dimmer objects.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.Scale">
            <summary>
              Scale value for the glow. Higher values (> 1.0f) cause brighter objects to exhibit more glow.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.BlurPasses">
            <summary>
              Number of blur passes for the glow effect.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.BlurOffset">
            <summary>
              Blur offset. This should typically be 1.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.Modifiable">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.Modified">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.Downscale_e">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.Downscale_e._2x_">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.GlowProperties.Downscale_e._4x_">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.#ctor(CSharpFramework.Scene.Renderer)">
            <summary>
            Deprecated
            </summary>
            <param name="_parent"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.SetParent(CSharpFramework.Scene.Renderer)">
            <summary>
            Deprecated
            </summary>
            <param name="_parent"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.ToneMapperMode">
            <summary>
              The tone mapping mode. None means no tone mapping, scale simply adjusts color according to the sturation, contrast, and brightness settings; ScaleMap maps the resoluting values back to the 0..1 range.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.Saturation">
            <summary>
              Saturation value. Values above 1.0 increase the saturation, values below 1.0 decrease it.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.Contrast">
            <summary>
              Contrast value. Values above 1.0 increase the contrast, values below 1.0 decrease it.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.Brightness">
            <summary>
              Brightness value. Values above 1.0 increase the brightness, values below 1.0 decrease it.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.MotionBlurFeedback">
            <summary>
              Strength of the motion blur feedback.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.Modifiable">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.Modified">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.ToneMapperMode_e">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.ToneMapperMode_e.None">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.ToneMapperMode_e.Scale">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.DeferredRendererProperties.ToneMapperProperties.ToneMapperMode_e.ScaleMap">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.ForwardRendererProperties">
            <summary>
            specific forward renderer properties
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.ForwardRendererProperties.#ctor(CSharpFramework.Scene.Renderer)">
            <summary>
            Constructor
            </summary>
            <param name="_owner"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.ForwardRendererProperties.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.ForwardRendererProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.ForwardRendererProperties.getType">
            <summary>
            Deprecated
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Scene.Renderer.CancelRendererTypeChangedEventArgs">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Renderer.CancelRendererTypeChangedEventArgs.#ctor(CSharpFramework.Scene.Renderer.RendererType_e)">
            <summary>
            Deprecated
            </summary>
            <param name="newType"></param>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.CancelRendererTypeChangedEventArgs.wantedType">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Renderer.CancelRendererTypeChangedEventArgs.ReasonForCancel">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.TimeOfDay">
            <summary>
            Represents time of day settings
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.TimeOfDay.#ctor(CSharpFramework.Scene.ISceneObject)">
            <summary>
            Constructor
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:CSharpFramework.Scene.TimeOfDay.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.TimeOfDay.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.TimeOfDay.Clone">
            <summary>
            Clone time of day object
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.TimeOfDay.SceneSky">
            <summary>
            Reference to the sky
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.TimeOfDay.AmbientColor">
            <summary>
              Color curve for ambient light over daytime.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.TimeOfDay.SunColor">
            <summary>
              Color curve for sunlight over daytime (if sunlight is enabled)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.TimeOfDay.FogColor">
            <summary>
              Color Curve for fog over daytime
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.TimeOfDay.FogStart">
            <summary>
              Curve for fog start distance over daytime
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.TimeOfDay.FogEnd">
            <summary>
              Curve for fog end distance over daytime
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.TimeOfDay.FogStartDistance">
            <summary>
            Defines the fog start distance. In the fog distance curve editor this corresponds to the bottom.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.TimeOfDay.FogRange">
            <summary>
            Defines the fog range used for the fog curves over time. The values in the curves are relative to this range.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.TimeOfDay.ControlSky">
            <summary>
             If enabled, the time of day system will control the sky layer intensities using the sky weight curves
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.TimeOfDay.DawnSkyFade">
            <summary>
              Curve for fading between day sky and dawn sky texture.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.TimeOfDay.DuskSkyFade">
            <summary>
              Curve for fading between day sky and dusk sky texture.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.TimeOfDay.NightSkyFade">
            <summary>
              Curve for fading between day sky and night sky textures
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.TimeOfDay.Owner">
            <summary>
            Implements ISceneObject
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.TimeOfDay.Modifiable">
            <summary>
            Implements ISceneObject
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.TimeOfDay.Modified">
            <summary>
            Implements ISceneObject
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.TimeOfDay.OnTimeOfDayEnabledChanged">
            <summary>
            Global event that is triggered when the enabled state of the time of day setup changed. The time of day instance is passed as sender
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.TimeOfDay.ShadowQuality_e">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.TimeOfDay.ShadowQuality_e.PCF4">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.TimeOfDay.ShadowQuality_e.PCF8">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.TimeOfDay.ShadowQuality_e.PCF16">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.TimeOfDay.ShadowQuality_e.PCSS16">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.TimeOfDay.DaytimeParameters">
            <summary>
            Internal structure to store a time of day snapshot
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.TimeOfDay.DaytimeParameters.SunDirection">
            <summary>
            Sun duirection
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.TimeOfDay.DaytimeParameters.SunColor">
            <summary>
            Sun color
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.TimeOfDay.DaytimeParameters.AmbientColor">
            <summary>
            Ambient color
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.TimeOfDay.DaytimeParameters.FogColor">
            <summary>
            Fog color
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.TimeOfDay.DaytimeParameters.FogStart">
            <summary>
            Fog start distance
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.TimeOfDay.DaytimeParameters.FogEnd">
            <summary>
            Fog end distance
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.IRendererNodeManager">
            <summary>
            Abstract interface that manages the renderer node in the engine. One instance can be accessed via EditorManager.RendererNodeManager.
            The engine implementation can be found in class VisionRendererNodeManager
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.OnActivate">
            <summary>
            Overridable that gets called when the manager is globally set
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.OnDeactivate">
            <summary>
            Overridable that gets called when the manager is globally removed
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.FillRendererNodeClassManager(CSharpFramework.DynamicProperties.DynamicPropertyManager)">
            <summary>
            Fills the passed manager with class types that are derived from the engine's renderer node base class (IVRendererNode)
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.UpdateRendererNode(CSharpFramework.DynamicProperties.DynamicPropertyCollection,CSharpFramework.Scene.ShapeComponentCollection)">
            <summary>
            Called to update the renderer node in the engine. The node type is taken from the owner type of rendererProperties
            </summary>
            <param name="rendererProperties"></param>
            <param name="postProcessors"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.UpdateRendererNodeProperty(CSharpFramework.DynamicProperties.DynamicProperty)">
            <summary>
            CAlled to update a single property within the renderer node properties
            </summary>
            <param name="dynProperty"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.CanAttachPostprocessor(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            Indicator function to determine whether the passed postprocessor can be attached to the current render node
            </summary>
            <param name="postprocessor"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.WantsDefaultPostprocessor(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            Indicator function to determine whether the passed postprocessor should be activated for a fresh version of the current renderer node
            </summary>
            <param name="postprocessor"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.EnsurePostprocessorAvailable(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            Called to ensure postprocesssor is allocated
            </summary>
            <param name="postprocessor"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.RemovePostprocessors">
            <summary>
            Removes all registered post processors
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.SetEnablePostprocessor(CSharpFramework.Scene.ShapeComponent,System.Boolean)">
            <summary>
            Called to enable or disable a postprocesssor
            </summary>
            <param name="postprocessor"></param>
            <param name="bActive"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.GetPostprocessorEnabled(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            Indicator function to determine whether the passed postprocessor is active
            </summary>
            <param name="postprocessor"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.SupportsTimeOfDay">
            <summary>
            Indicator function to determine whether the current render node supports any kind of type of day
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.UpdateTimeOfDay(CSharpFramework.Scene.TimeOfDay)">
            <summary>
            Called to update the time-of-day settings
            </summary>
            <param name="timeofday"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.SetCurrentTime(System.Single)">
            <summary>
            Called to set a new time of day (0..1)
            </summary>
            <param name="fTime"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.GetTimeOfDaySnapshot(System.Single,CSharpFramework.Scene.TimeOfDay.DaytimeParameters)">
            <summary>
            Retrieve all time of day parameters at given time
            </summary>
            <param name="fTime"></param>
            <param name="dest"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.ExportTimeOfDay(System.String)">
            <summary>
            Export the current time-of-day setup to an engine-readable format
            </summary>
            <param name="absFilemname"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IRendererNodeManager.ExportRendererNode(System.String)">
            <summary>
            Export current renderer node to an engine readable format
            </summary>
            <param name="absFilemname"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Scene.IRendererNodeManager.RENDERERNODE_BASECLASS">
            <summary>
            Engine base class for renderer nodes
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.IRendererNodeManager.ATTACHABLE_COMPONENT_BASECLASS">
            <summary>
            Engine base class for postprocessors
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.IRendererNodeManager.RENDERERNODECLASS_NONE">
            <summary>
            display name when no node is selected
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.IRendererNodeManager.RENDERERNODECLASS_FORWARD">
            <summary>
            Engine class name for the default forward renderer
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.IRendererNodeManager.RENDERERNODECLASS_DEFERRED">
            <summary>
            Engine class name for the default deferred renderer
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.IRendererNodeManager.NodeClassTypeManager">
            <summary>
            Access the manager that holds all renderer node classes
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.IRendererNodeManager.DefaultRendererNodeClass">
            <summary>
            The default renderer node class (none)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.IRendererNodeManager.ComponentTypes">
            <summary>
            Returns a list of all supported postprocessor component types
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.RendererNodeClassNameConverter">
            <summary>
            String converter for renderer node class names
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.RendererNodeClassNameConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.RendererNodeClassNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.RendererNodeClassNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Scene.RendererSetup">
            <summary>
            Class that holds all properties of a renderer node: Class name, properties and postprocessing components
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.RendererSetup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.RendererSetup._Owner">
            <summary>
            Owner layer
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.RendererSetup._rendererNodeClass">
            <summary>
            native class name string
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.RendererSetup._rendererComponents">
            <summary>
            Postprocessors
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.RendererSetup._rendererProperties">
            <summary>
            Renderer properties
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.RendererSetup.ToString">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.RendererSetup.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.RendererSetup.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.RendererSetup.OnDeserialization(System.Object)">
            <summary>
            Serialization
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:CSharpFramework.Scene.RendererSetup.Clone">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.LayerCollection">
            <summary>
            A collection of Layers. The scene has a list of Layers
            </summary>
        </member>
        <member name="M:CSharpFramework.LayerCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.LayerCollection.EnumSortingOrder">
            <summary>
            Assigns identity sorting key to all zones
            </summary>
        </member>
        <member name="M:CSharpFramework.LayerCollection.FindLayerByID(System.UInt32,CSharpFramework.Layer)">
            <summary>
            Find a layer in the list with given LayerID
            </summary>
            <param name="iID"></param>
            <param name="ignoreLayer"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.LayerCollection.CheckLayerUniqueIDs">
            <summary>
            Indicates whether layer IDs in this list are unique
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.LayerCollection.Sort">
            <summary>
            Sort the layer collection using the SortingOrder value
            </summary>
        </member>
        <member name="M:CSharpFramework.LayerCollection.GetOverallShapeCount(System.Boolean,System.Boolean)">
            <summary>
            Counts all shapes in this collection
            </summary>
            <param name="bLoadedLayersOnly">If set to true, it ignores all layers that are not loaded</param>
            <param name="bIgnoreRootShape">If true, the (invisible) root shape does not contribute to number</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.LayerCollection.GetOverallShapeCount">
            <summary>
            Calls GetOverallShapeCount(false, false)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.LayerCollection.DeepClone">
            <summary>
            Returns a collection with all layers cloned
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.LayerCollection.MoveTo(CSharpFramework.Layer,System.Int32)">
            <summary>
            Move the layer to the specified position
            </summary>
            <param name="item">layer to move</param>
            <param name="newIndex">new index of the layer within the collection</param>
        </member>
        <member name="M:CSharpFramework.LayerCollection.GetLayerByName(System.String)">
            <summary>
            Find a layer by specified name
            </summary>
            <param name="name">name of the layer</param>
            <returns>layer instance (or null)</returns>
        </member>
        <member name="M:CSharpFramework.LayerCollection.GetLayerByName(System.String,CSharpFramework.Layer)">
            <summary>
            Find a layer by specified name
            </summary>
            <param name="name">name of the layer</param>
            <param name="ignore">this layer is not tested</param>
            <returns>layer instance (or null)</returns>
        </member>
        <member name="M:CSharpFramework.LayerCollection.GetLayerByFilename(System.String,CSharpFramework.Layer)">
            <summary>
            Find a layer by specified unique filename
            </summary>
            <param name="name">name of the layer</param>
            <param name="ignore">this layer is not tested (can be null)</param>
            <returns>layer instance (or null)</returns>
        </member>
        <member name="M:CSharpFramework.LayerCollection.GetLayerByFilename(System.String)">
            <summary>
            Calls GetLayerByFilename(name,null)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.LayerCollection.GetUniqueLayerName(System.String,CSharpFramework.Layer)">
            <summary>
            Returns a new layer name that is unique in this collection
            </summary>
            <param name="startName">original layer name</param>
            <param name="ignore">layer to ignore while checking uniqueness</param>
            <returns>a new name, e.g. 'Layer12' for original name 'Layer'</returns>
        </member>
        <member name="M:CSharpFramework.LayerCollection.CreateUniqueLayerFileName(System.String,System.String)">
            <summary>
            Creates a new layer filename by physically checking he passed directory for existing files.
            Simply wraps around FileHelper.CreateUniqueFilename.
            </summary>
            <param name="directory">the apsolute directory to search for a existing .layer files</param>
            <param name="startName">Starting character string of the filename. Numbers will be appended</param>
            <returns>The filename (without path but with .layer extension)</returns>
        </member>
        <member name="T:CSharpFramework.Scene.IMaterialFactory">
            <summary>
            Interface that can create materials of custom type. A global instance of the factory can be accessed (or set) via EditorManager.MaterialFactory.
            All material providers go through the CreateMaterial function of the global manager.
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IMaterialFactory.CreateMaterial(CSharpFramework.Scene.IMaterialProvider)">
            <summary>
            The one and only function of this interface. Return a new class instance derived from Material
            </summary>
            <param name="provider">The provider that creates new material instances</param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Scene.DefaultMaterialFactory">
            <summary>
            Implements the default, i.e. returns standard Material instances
            </summary>
        </member>
        <member name="T:CSharpFramework.PluginManager">
            <summary>
            Manager for loading editor plugins
            </summary>
        </member>
        <member name="M:CSharpFramework.PluginManager.LoadPlugins(System.String,CSharpFramework.EditorPluginCollection)">
            <summary>
            Load and initialize all the .EditorPlugin.dll files in a directory and add them to the list
            </summary>
            <param name="dir">absolute directory to search for files</param>
            <param name="pluginList">list to add the plugins to</param>
        </member>
        <member name="M:CSharpFramework.PluginManager.UnloadPlugins(CSharpFramework.EditorPluginCollection)">
            <summary>
            Deinitialize all the plugins on the list
            </summary>
            <param name="pluginList">list of plugins that should be unloaded</param>
        </member>
        <member name="M:CSharpFramework.PluginManager.UnloadPlugin(System.String)">
            <summary>
            Deinitialize the requested plugins if added to the list
            </summary>
            <param name="aPluginName">Name of plugin to be unloaded</param>
        </member>
        <member name="T:CSharpFramework.IEditorPluginModule">
            <summary>
            Interface that an editor plugin module has to provide
            </summary>
        </member>
        <member name="M:CSharpFramework.IEditorPluginModule.InitPluginModule">
            <summary>
            Called when initialising the plugin. Can be used to register shape creator plugins for instance
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:CSharpFramework.IEditorPluginModule.DeInitPluginModule">
            <summary>
            Called when deinitialising the plugin. Clean up everything in here, also deregister everything that has been
            registered in the InitPluginModule function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.IEditorPluginModule.HasName(System.String)">
            <summary>
            Tests whether this plugin has the passed name. Removes the path from name, in case absolute paths are passed as a name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.IEditorPluginModule._version">
            <summary>
            Version of the plugin. Must be set by constructor
            </summary>
        </member>
        <member name="F:CSharpFramework.IEditorPluginModule._name">
            <summary>
            Name of the plugin. Must be set by constructor
            </summary>
        </member>
        <member name="P:CSharpFramework.IEditorPluginModule.PluginPath">
            <summary>
            The absolute file path where the plugin has been loaded from. This path will be set before
            InitPluginModule is called
            </summary>
        </member>
        <member name="P:CSharpFramework.IEditorPluginModule.Version">
            <summary>
            The version number of the plugin. This is stored in the scene file and used when loading the shapes again.
            Increase it every time you change your editor serialization code.
            </summary>
        </member>
        <member name="P:CSharpFramework.IEditorPluginModule.Name">
            <summary>
            The name of the plugin. This is used to store the plugin version number when saving the scene
            </summary>
        </member>
        <member name="P:CSharpFramework.IEditorPluginModule.IsStandardPlugin">
            <summary>
            Overridable that determines whether this is a standard plugin that is always loaded and initialized
            </summary>
        </member>
        <member name="P:CSharpFramework.IEditorPluginModule.Initialized">
            <summary>
            Determines whether this plugin is initialized. The setter tries to initialize/de-initialize it
            </summary>
        </member>
        <member name="T:CSharpFramework.EditorPluginCollection">
            <summary>
            List of editor plugin modules
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorPluginCollection.GetPlugin(System.String)">
            <summary>
            Retrieves a plugin by name
            </summary>
            <param name="name">Name of the plugin</param>
            <returns>Plugin if found or null</returns>
        </member>
        <member name="T:CSharpFramework.Math.Vector4F">
            <summary>
            Vector class for a 3D vector with single precision float components
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.#ctor(CSharpFramework.Math.Vector4F)">
            <summary>
            Constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.Normalize">
            <summary>
            Normalize the vector. Does not throw exception if length is zero
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.GetLength">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.GetLengthSqr">
            <summary>
            Returns the length square of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.op_Equality(CSharpFramework.Math.Vector4F,CSharpFramework.Math.Vector4F)">
            <summary>
            Checks for equality
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.op_Inequality(CSharpFramework.Math.Vector4F,CSharpFramework.Math.Vector4F)">
            <summary>
            Checks for equality
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.op_UnaryNegation(CSharpFramework.Math.Vector4F)">
            <summary>
            Negates the vector
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.op_Addition(CSharpFramework.Math.Vector4F,CSharpFramework.Math.Vector4F)">
            <summary>
            Returns the sum of two vectors
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.op_Subtraction(CSharpFramework.Math.Vector4F,CSharpFramework.Math.Vector4F)">
            <summary>
            Subtracts v2 from v1
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.DotProduct(CSharpFramework.Math.Vector4F,CSharpFramework.Math.Vector4F)">
            <summary>
            Static version of the dor product
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.op_Multiply(CSharpFramework.Math.Vector4F,CSharpFramework.Math.Vector4F)">
            <summary>
            Dot product
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.op_Multiply(CSharpFramework.Math.Vector4F,System.Single)">
            <summary>
            Multiplies by a scalar.
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.op_Multiply(System.Single,CSharpFramework.Math.Vector4F)">
            <summary>
            Multiplies by a scalar.
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.op_Division(CSharpFramework.Math.Vector4F,System.Single)">
            <summary>
            Devides by a scalar
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.GetHashCode">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.ToString">
            <summary>
            Converts this vector to readable string of type (x, y)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.Parse(System.String)">
            <summary>
            Tries to parse the string. The string should be compatible to the ToString result.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.Equals(System.Object)">
            <summary>
            Indicates whether this vector equals another. Other type must be a vector, too
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.System#ICloneable#Clone">
            <summary>
            Clones the vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.Clone">
            <summary>
            Clones the vector (return type is vector)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called while de-serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector4F.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:CSharpFramework.Math.Vector4F.Zero">
            <summary>
            Predefined vector (0,0,0,1)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector4F.XAxis">
            <summary>
            Predefined vector (1,0,0,0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector4F.YAxis">
            <summary>
            Predefined vector (0,1,0,0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector4F.ZAxis">
            <summary>
            Predefined vector (0,0,1,0)
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector4F.X">
            <summary>
            Access the x-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector4F.Y">
            <summary>
            Access the y-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector4F.Z">
            <summary>
            Access the z-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector4F.W">
            <summary>
            Access the w-coordinate
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Vector4FObjectConverter">
            <summary>
            Object converter for vector class
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector4FObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4FObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4FObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4FObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4FObjectConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function - do not support standard values
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Math.Vector2D">
            <summary>
            Vector class for a 2D vector with double precision components
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.#ctor(CSharpFramework.Math.Vector2D)">
            <summary>
            Constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.Normalize">
            <summary>
            Normalize the vector. Does not throw exception if length is zero
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.GetLength">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.GetLengthSqr">
            <summary>
            Returns the length square of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.GetOrthogonal">
            <summary>
            Returns the length square of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.op_Equality(CSharpFramework.Math.Vector2D,CSharpFramework.Math.Vector2D)">
            <summary>
            Checks for equality
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.op_Inequality(CSharpFramework.Math.Vector2D,CSharpFramework.Math.Vector2D)">
            <summary>
            Checks for equality
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.op_UnaryNegation(CSharpFramework.Math.Vector2D)">
            <summary>
            Negates the vector
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.op_Addition(CSharpFramework.Math.Vector2D,CSharpFramework.Math.Vector2D)">
            <summary>
            Returns the sum of two vectors
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.op_Subtraction(CSharpFramework.Math.Vector2D,CSharpFramework.Math.Vector2D)">
            <summary>
            Subtracts v2 from v1
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.DotProduct(CSharpFramework.Math.Vector2D,CSharpFramework.Math.Vector2D)">
            <summary>
            Static version of the dor product
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.op_Multiply(CSharpFramework.Math.Vector2D,CSharpFramework.Math.Vector2D)">
            <summary>
            Dot product
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.op_Multiply(CSharpFramework.Math.Vector2D,System.Double)">
            <summary>
            Multiplies by a scalar.
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.op_Multiply(System.Double,CSharpFramework.Math.Vector2D)">
            <summary>
            Multiplies by a scalar.
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.op_Division(CSharpFramework.Math.Vector2D,System.Double)">
            <summary>
            Devides by a scalar
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.GetHashCode">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.ToString">
            <summary>
            Converts this vector to readable string of type (x, y)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.Parse(System.String)">
            <summary>
            Tries to parse the string. The string should be compatible to the ToString result.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.Equals(System.Object)">
            <summary>
            Indicates whether this vector equals another. Other type must be a vector, too
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.System#ICloneable#Clone">
            <summary>
            Clones the vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.Clone">
            <summary>
            Clones the vector (return type is vector)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called while de-serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:CSharpFramework.Math.Vector2D.Zero">
            <summary>
            Predefined vector (0,0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector2D.XAxis">
            <summary>
            Predefined vector (1,0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector2D.YAxis">
            <summary>
            Predefined vector (0,1)
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector2D.X">
            <summary>
            Access the x-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector2D.Y">
            <summary>
            Access the y-coordinate
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Vector2DObjectConverter">
            <summary>
            Object converter for vector class
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector2DObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2DObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2DObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2DObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector2DObjectConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function - do not support standard values
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Math.Rectangle2D">
            <summary>
            Class that represents a 2D rectangle (2 times 2 float values). Useful for screen rectangles.
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Rectangle2D.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Rectangle2D.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor that initializes the rectangle
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:CSharpFramework.Math.Rectangle2D.Reset">
            <summary>
            Resets the rectangle so that min>max
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Rectangle2D.Validate">
            <summary>
            Validates the coordinates so that max>min
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Rectangle2D.GetSizeX">
            <summary>
            Get rectangle size in x-direction
            </summary>
            <returns>Size in units</returns>
        </member>
        <member name="M:CSharpFramework.Math.Rectangle2D.GetSizeY">
            <summary>
            Get rectangle size in y-direction
            </summary>
            <returns>Size in units</returns>
        </member>
        <member name="M:CSharpFramework.Math.Rectangle2D.GetCenterX">
            <summary>
            Get rectangle center x
            </summary>
            <returns>center in units</returns>
        </member>
        <member name="M:CSharpFramework.Math.Rectangle2D.GetCenterY">
            <summary>
            Get rectangle center y
            </summary>
            <returns>center in units</returns>
        </member>
        <member name="M:CSharpFramework.Math.Rectangle2D.Intersects(CSharpFramework.Math.Rectangle2D)">
            <summary>
            Tests for intersection with another rectangle
            </summary>
            <param name="other">The other rectangle to test</param>
            <returns>true, if rectangles intersect</returns>
        </member>
        <member name="M:CSharpFramework.Math.Rectangle2D.IsInside(System.Single,System.Single)">
            <summary>
            Checks if a 2D point is inside the rectangle
            </summary>
            <param name="x">x position of the point to test</param>
            <param name="y">y position of the point to test</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Rectangle2D.Add(System.Single,System.Single)">
            <summary>
            Adds a point to the rectangle
            </summary>
            <param name="x">x position of the point to add</param>
            <param name="y">y position of the point to add</param>
        </member>
        <member name="M:CSharpFramework.Math.Rectangle2D.Add(CSharpFramework.Math.Rectangle2D)">
            <summary>
            Adds another rectangle to this rectangle
            </summary>
            <param name="other">The other rectangle to add</param>
        </member>
        <member name="F:CSharpFramework.Math.Rectangle2D.X1">
            <summary>
            min and max 
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Rectangle2D.Y1">
            <summary>
            min and max 
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Rectangle2D.X2">
            <summary>
            min and max 
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Rectangle2D.Y2">
            <summary>
            min and max 
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Rectangle2D.Clone">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Math.Rectangle2D.Valid">
            <summary>
            Indicates whether minimum smaller than maximum
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Matrix4F">
            <summary>
            Matrix class for 4x4 rotation matrices with single precision float components
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m14"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m24"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
            <param name="m34"></param>
            <param name="m41"></param>
            <param name="m42"></param>
            <param name="m43"></param>
            <param name="m44"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.#ctor(CSharpFramework.Math.Matrix4F)">
            <summary>
            Constructor
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.#ctor(CSharpFramework.Math.Matrix3F,CSharpFramework.Math.Vector4F)">
            <summary>
            Constructor
            </summary>
            <param name="rotation"></param>
            <param name="translation"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.#ctor(System.Single[])">
            <summary>
            Constructor
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.Set(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the matrix from 16 source elements
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m14"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m24"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
            <param name="m34"></param>
            <param name="m41"></param>
            <param name="m42"></param>
            <param name="m43"></param>
            <param name="m44"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.SetIdentity">
            <summary>
            Set matrix to identity
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.Transpose">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.Transpose(CSharpFramework.Math.Matrix4F)">
            <summary>
            Static version of Transpose
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.op_Equality(CSharpFramework.Math.Matrix4F,CSharpFramework.Math.Matrix4F)">
            <summary>
            Check equality
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.op_Inequality(CSharpFramework.Math.Matrix4F,CSharpFramework.Math.Matrix4F)">
            <summary>
            Check equality
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.op_Multiply(CSharpFramework.Math.Matrix4F,CSharpFramework.Math.Matrix4F)">
            <summary>
            Multiply two matrices
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.op_Multiply(CSharpFramework.Math.Matrix4F,CSharpFramework.Math.Vector4F)">
            <summary>
            Transform vector by matrix
            </summary>
            <param name="matrix"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.op_Multiply(CSharpFramework.Math.Matrix4F,CSharpFramework.Math.Vector3F)">
            <summary>
            Transform vector by matrix. Uses W=1 so that translation is applied
            </summary>
            <param name="matrix"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.Transform(CSharpFramework.Math.Matrix4F,CSharpFramework.Math.Vector4F)">
            <summary>
            Static function version of matrix*vector
            </summary>
            <param name="matrix"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.Parse(System.String)">
            <summary>
            Tries to parse the string. The string should be compatible to the ToString result.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.System#ICloneable#Clone">
            <summary>
            Clone matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.Clone">
            <summary>
            Clones the matrix (return type is matrix)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when de-serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4F.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:CSharpFramework.Math.Matrix4F.Identity">
            <summary>
            Identity matrix
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Matrix4F.COMPONENT_COUNT">
            <summary>
            Number of components for this matrix type
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M11">
            <summary>
            Matrix element at 1-based index [1,1].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M12">
            <summary>
            Matrix element at 1-based index [1,2].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M13">
            <summary>
            Matrix element at 1-based index [1,3].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M14">
            <summary>
            Matrix element at 1-based index [1,4].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M21">
            <summary>
            Matrix element at 1-based index [2,1].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M22">
            <summary>
            Matrix element at 1-based index [2,2].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M23">
            <summary>
            Matrix element at 1-based index [2,3].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M24">
            <summary>
            Matrix element at 1-based index [2,4].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M31">
            <summary>
            Matrix element at 1-based index [3,1].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M32">
            <summary>
            Matrix element at 1-based index [3,2].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M33">
            <summary>
            Matrix element at 1-based index [3,3].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M34">
            <summary>
            Matrix element at 1-based index [3,4].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M41">
            <summary>
            Matrix element at 1-based index [4,1].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M42">
            <summary>
            Matrix element at 1-based index [4,2].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M43">
            <summary>
            Matrix element at 1-based index [4,3].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.M44">
            <summary>
            Matrix element at 1-based index [4,4].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.TranslationVector">
            <summary>
            Gets or sets the translation vector
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.TranslationVector4">
            <summary>
            Gets or sets the translation vector
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.Scaling">
            <summary>
            Gets or sets the diagonal of the matrix
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.RotationMatrix3">
            <summary>
            Gets or sets the diagonal of the matrix
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.Item(System.Int32)">
            <summary>
            Access matrix as an array of 9 elements
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4F.Item(System.Int32,System.Int32)">
            <summary>
            Access matrix as 2D array of type [row, column]
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Matrix4FObjectConverter">
            <summary>
            Object converter for matrix class
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4FObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4FObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4FObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4FObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4FObjectConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function - do not support standard values
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Layout.LayoutManager">
            <summary>
            The layout manager class keeps track of the available and the currently
            active layout.
            </summary>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the layout manager (also: directory name)</param>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager.Initialize">
            <summary>
            Initializes the layout manager by gathering the available layouts
            and setting the active one
            </summary>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager.GatherAvailableLayouts">
            <summary>
            Iterates the layout files and generates the list of available layouts
            </summary>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager.Save">
            <summary>
            Saves the active layout
            </summary>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager.FindLayout(System.String)">
            <summary>
            Gets a layout by name
            </summary>
            <param name="layoutName"></param>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager.RebuildLayoutMenuContent">
            <summary>
            Rebuilds the layout menu sub items
            </summary>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager.UpdateMenuItemShortcut(CSharpFramework.Layout.Layout,System.Windows.Forms.Keys)">
            <summary>
            Update the shortcut of of a layout menu subitem
            </summary>
            <param name="layout"></param>
            <param name="newShortCut"></param>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager.LayoutMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Click event handler for the layout menu subitems.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager._menuItemRestoreDefault_Click(System.Object,System.EventArgs)">
            <summary>
            Click event handlers for the RestoreDefault menu item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager._menuItemCreateNewLayout_Click(System.Object,System.EventArgs)">
            <summary>
            Click event handlers for the CreateNewLayout menu item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager.LayoutMenuContainer_Popup(System.Object,System.EventArgs)">
            <summary>
            Popup event handler for the layout menu.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager.OnActiveLayoutChanged(CSharpFramework.Layout.LayoutManager.ActiveLayoutChangedArgs)">
            <summary>
            Triggers the ActiveLayoutChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager.OnAvailableLayoutsChanged(System.EventArgs)">
            <summary>
            Triggers the AvailableLayoutsChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:CSharpFramework.Layout.LayoutManager._containerForm">
            <summary>
            Associated docking container
            </summary>
        </member>
        <member name="F:CSharpFramework.Layout.LayoutManager._availableLayouts">
            <summary>
            Array of available layouts
            </summary>
        </member>
        <member name="F:CSharpFramework.Layout.LayoutManager._activeLayout">
            <summary>
            Currently active layout
            </summary>
        </member>
        <member name="F:CSharpFramework.Layout.LayoutManager._autoSave">
            <summary>
            AutoSave state
            </summary>
        </member>
        <member name="F:CSharpFramework.Layout.LayoutManager._name">
            <summary>
            Name of the layout manager
            </summary>
        </member>
        <member name="F:CSharpFramework.Layout.LayoutManager._menu">
            <summary>
            "Layouts" menu item
            </summary>
        </member>
        <member name="F:CSharpFramework.Layout.LayoutManager._menuItemRestoreDefault">
            <summary>
            "Restore default layout" menu item
            </summary>
        </member>
        <member name="F:CSharpFramework.Layout.LayoutManager._menuItemOpenContainingFolder">
            <summary>
            Menu item for "Open Containing Folder"
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.LayoutManager.DockingArea">
            <summary>
            Gets or sets the associated docking container.
            Any layout changes are applied to this container.
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.LayoutManager.DefaultConfigPath">
            <summary>
            Gets the path to the directory with the (non-writeable) default layouts
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.LayoutManager.UserConfigPath">
            <summary>
            Gets the path to the customized layouts of the users
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.LayoutManager.AvailableLayouts">
            <summary>
            Gets the available layouts
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.LayoutManager.ActiveLayout">
            <summary>
            Gets or sets the active layout.
            Saves the old layout at first if AutoSave is set to true.
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.LayoutManager.Name">
            <summary>
            Name of the layout manager
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.LayoutManager.AutoSave">
            <summary>
            Gets or sets the AutoSave status.
            AutoSave indicates whether layout changes should automatically be saved
            when switching layouts.
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.LayoutManager.Menu">
            <summary>
            Gets the "Layouts" menu item.
            This menu items provides all layouts as subitems.
            </summary>
        </member>
        <member name="E:CSharpFramework.Layout.LayoutManager.ActiveLayoutChanged">
            <summary>
            Event that gets triggered when the active layout changed
            </summary>
        </member>
        <member name="E:CSharpFramework.Layout.LayoutManager.AvailableLayoutsChanged">
            <summary>
            Event that gets triggered when the available layouts change
            </summary>
        </member>
        <member name="T:CSharpFramework.Layout.LayoutManager.SubMenuItem">
            <summary>
            Inner class for layout menu subitems
            </summary>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager.SubMenuItem.#ctor(System.String,CSharpFramework.Layout.Layout)">
            <summary>
            Constructor
            </summary>
            <param name="label"></param>
            <param name="associatedLayout"></param>
        </member>
        <member name="F:CSharpFramework.Layout.LayoutManager.SubMenuItem._associatedLayout">
            <summary>
            Associated layout instance
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.LayoutManager.SubMenuItem.AssociatedLayout">
            <summary>
            Gets the associated layout instance
            </summary>
        </member>
        <member name="T:CSharpFramework.Layout.LayoutManager.ActiveLayoutChangedArgs">
            <summary>
            Class for event notification if active layout changed
            </summary>
        </member>
        <member name="M:CSharpFramework.Layout.LayoutManager.ActiveLayoutChangedArgs.#ctor(CSharpFramework.Layout.Layout)">
            <summary>
            Constructor
            </summary>
            <param name="newLayout"></param>
        </member>
        <member name="F:CSharpFramework.Layout.LayoutManager.ActiveLayoutChangedArgs._newLayout">
            <summary>
            New layout
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.LayoutManager.ActiveLayoutChangedArgs.NewLayout">
            <summary>
            Gets the new layout
            </summary>
        </member>
        <member name="T:CSharpFramework.Layout.LayoutManager.ActiveLayoutChangedEventHandler">
            <summary>
            Delegate for the ActiveLayoutChanged event
            </summary>
        </member>
        <member name="T:CSharpFramework.Layout.LayoutManager.AvailableLayoutsChangedEventHandler">
            <summary>
            Delegate for the AvailableLayoutsChanged event
            </summary>
        </member>
        <member name="T:CSharpFramework.Helper.FileHelper">
            <summary>
            Helper class that provides useful static file helper functions
            </summary>
        </member>
        <member name="M:CSharpFramework.Helper.FileHelper.CopyFiles(System.IO.DirectoryInfo,System.String,System.IO.DirectoryInfo,System.Boolean,System.Boolean,System.IO.FileAttributes,System.Boolean)">
            <summary>
            Copies files from source to dest
            </summary>
            <param name="sourceDir">source directory info</param>
            <param name="sourceFilter">source file filter, e.g. "*.*"</param>
            <param name="destDir">destination directory</param>
            <param name="bIncludeSubDirs">if true, it recursively copies all files in subdirectories</param>
            <param name="bOverwrite">if true, it overwrites existing files in destination</param>
            <param name="excludeAttribs">bimask that allows to exclude files from being copied, e.g. FileAttributes.Hidden</param>
            <param name="bOnlyModified">if true and the file already exists in destination, the file will only be copied if it was modified</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.FileHelper.RenameFile(System.String,System.String,System.Boolean)">
            <summary>
            Renames a file
            </summary>
            <param name="oldFile"></param>
            <param name="newFile"></param>
            <param name="bForceOverwrite"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.FileHelper.ResolveFilename(System.String)">
            <summary>
            Removes the ".." inside a full path name. For instance returns "c:\a\q.txt" for "c:\a\b\c\..\..\q.txt"
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.FileHelper.GetPathDepth(System.String)">
            <summary>
            Return the number of directory separators in the path
            </summary>
            <param name="absFilename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.FileHelper.IsAbsolute(System.String)">
            <summary>
            This is a replacement for Path.IsPathRooted which handles files properly that start with '\'
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.FileHelper.MakePathRelative(System.String,System.String)">
            <summary>
            Returns a filename that describes destpath relatively to startpath. The returned string can start with ..\..
            </summary>
            <param name="startpath"></param>
            <param name="destpath"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.FileHelper.MakePathRelative(System.String,System.String,System.Char)">
            <summary>
            Returns a filename that describes destpath relatively to startpath. The returned string can start with ..\..
            </summary>
            <param name="startpath"></param>
            <param name="destpath"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.FileHelper.MigratePathToNewProject(System.String,System.String,System.String)">
            <summary>
            Helper function for misc OnSceneRelocation functions
            </summary>
            <param name="relPath"></param>
            <param name="oldProjPath"></param>
            <param name="newProjPath"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.FileHelper.CreateUniqueFilename(System.String,System.String,System.String)">
            <summary>
            Creates a unique filename inside the passed directory.
            The returned name starts with startName plus some numbers and as the passed file extension.
            The returned filename is not absolute, i.e. it does not have the directory prepended.
            This function physically checks for existin files in the passed directory
            </summary>
            <param name="directory">Absolute file directory to search</param>
            <param name="startName">The first characters of the target filename</param>
            <param name="fileExt">The file extension to be appended</param>
            <returns>A filename that does not yet exist inside the directory</returns>
        </member>
        <member name="T:CSharpFramework.ShapeTreeView">
            <summary>
            Tree view class that displays a tree of shapes
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.FindShapeInTree(CSharpFramework.Shapes.ShapeBase,CSharpFramework.ShapeTreeNode)">
            <summary>
            Finds the according tree node that owns the shape
            </summary>
            <param name="shape">Shape to find</param>
            <param name="parentNode">Parent node to start searching</param>
            <returns>The according tree node</returns>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.CreateTreeNode(CSharpFramework.Shapes.ShapeBase,CSharpFramework.ShapeTreeNode,System.Boolean)">
            <summary>
            Create a tree node around a shape
            </summary>
            <param name="shape">Shape to add to the tree</param>
            <param name="parentNode">parent tree node to attach the shape</param>
            <param name="bAssignShapeParents">Not used</param>
            <returns>New tree node</returns>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.UpdateNodeIcon(CSharpFramework.ShapeTreeNode)">
            <summary>
            Updates the icon of an existing tree node
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.GetChildNodes(System.Windows.Forms.TreeNode)">
            <summary>
            Helper function for getting all child and sub-child nodes from a node
            </summary>
            <param name="parentNode">Parent node</param>
            <returns>Array of all child and sub-child nodes</returns>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.AddShape(CSharpFramework.Shapes.ShapeBase,System.Boolean,System.Boolean)">
            <summary>
            Adds a shape to the tree
            </summary>
            <param name="shape">The shape to add</param>
            <param name="bEditLabel">if true, start editing the node after adding</param>
            <param name="bSetActive">if true, set the node to currently active node</param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.RemoveShape(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Removes a shape from the tree again
            </summary>
            <param name="shape">Shape to remove</param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.RenameShape(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Starts renaming the tree item
            </summary>
            <param name="shape">Shape that should be renamed</param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.ClearTree">
            <summary>
            Clears the tree view
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.SafeBeginUpdate">
            <summary>
            wraps around BeginUpdate to prevent cases with more calls of BeginUpdate than EndUpdate
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.SafeEndUpdate">
            <summary>
            wraps around EndUpdate to prevent cases with more calls of BeginUpdate than EndUpdate
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.BuildTree(CSharpFramework.ShapeCollection)">
            <summary>
            Recursively builds the tree from a collection of root elements
            </summary>
            <param name="root">Root collection of shapes</param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Overridden function to preprocess command keys
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Event triggered when user clicks on tree view.
            Use this event to allow the user to select items with the right mouse button.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnBeforeSelect(System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            Click on tree item: show shape in property grid
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Click on tree item: show shape in property grid
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnClick(System.EventArgs)">
            <summary>
            Useful event to get the clicking on an item without selecting a new one
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnAfterExpand(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            When expanding the tree node, set hint flag on shape
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            When collapsing the tree node, remove hint flag on shape
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnDoubleClick(System.EventArgs)">
            <summary>
            Double click: Might change
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)">
            <summary>
            Starts drag and drop
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:CSharpFramework.ShapeTreeView._forceScrollToNodePosition">
            <summary>
            helper variable that has to be set to true before changing the SelectedNode property 
            in order to make the treeview scroll to the right position again.
            This is only needed if the TreeView is focused. For further information take a look at OnBeforeSelect in this class.
            Make sure to set it to false again after you changed the SelectedNode property
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            After item has been dropped
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Starts dragging
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnAfterLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)">
            <summary>
            After renaming the item, change name of shape
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)">
            <summary>
            Check if node can be renamed, i.e. if layer is editable
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnSceneChanged(System.Object,CSharpFramework.SceneChangedArgs)">
            <summary>
            Listen to scene changes: Rebuild the tree
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnLayerChanged(System.Object,CSharpFramework.LayerChangedArgs)">
            <summary>
            Listen to changed layer: Rebuild the tree
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnShapeChanged(System.Object,CSharpFramework.Shapes.ShapeChangedArgs)">
            <summary>
            Listen to shape changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.Actions_ActionEvent(System.Object,CSharpFramework.ActionEventArgs)">
            <summary>
             Listen to action events (lock the tree view)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnCut">
            <summary>
            Perform cut operation on tree (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnCopy">
            <summary>
            Perform copy operation on tree (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnDelete">
            <summary>
            Perform delete operation on tree (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.OnPaste">
            <summary>
            Perform paste operation on tree (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeTreeView.HasSelection">
            <summary>
            Checks whether tree has anything to cut/copy (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeTreeView.bSelectionInProgress">
            <summary>
            Indicates whether the tree control is modifying the scene selection.
            Used to ignore incoming selection events.
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeTreeView.SelectedShape">
            <summary>
            Get the currently selected shape
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeTreeView.SelectedShapes">
            <summary>
            Get the currently selected shapes
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeTreeView.ChildShapes">
            <summary>
            Get all child shapes of the currently selected nodes
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeTreeView.ChildShapesRecursively">
            <summary>
            Get all child shapes of the currently selected shapes and also 
            their sub-child nodes, etc. (recursively)
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeTreeView.LockCounter">
            <summary>
            Allows to prevent the tree from being redrawn while the Lock counter is >0
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeTreeView.UIUpdateLock">
            <summary>
            the shape trees are not updated while this counter is >0.
            This item is obsolete and will be replaced by EditorManager.GUI.UIUpdateLock
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeTreeView.ReadOnly">
            <summary>
            Sets the readonly flag that determines whether shapes can be selected or not
            </summary>
        </member>
        <member name="P:CSharpFramework.ShapeTreeView.Clipboard">
            <summary>
            Returns relevant clipboard instance (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.PluginFailureDlg">
            <summary>
            visual studio generated UI-class!
            </summary>
            <summary>
            Dialog to display plugin loading errors
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.PluginFailureDlg.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.PluginFailureDlg.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Controls.PluginFailureDlg.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.PluginFailureDlg._errorList">
            <summary>
            list with all errors
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.PluginFailureDlg.#ctor">
            <summary>
            creates a new instance of this dialog and initializes components
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.PluginFailureDlg.DisplayErrors(System.Collections.Generic.List{CSharpFramework.Controls.ErrorInfo})">
            <summary>
            sets the current list object and fills the (UI control) 
            list with the date therein
            </summary>
            <param name="errorList">the new list to be used</param>
        </member>
        <member name="M:CSharpFramework.Controls.PluginFailureDlg.pluginErrorBox_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            event handler for the (UI control) list. Only single selection is handled,
            therefore only the last selected entry is used.
            </summary>
            <param name="sender">the sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="P:CSharpFramework.Controls.PluginFailureDlg.ShowDialogOnStartup">
            <summary>
            gets the status of the "show on every startup" checkbox
            </summary>
            <returns>true if the checkbox is checked</returns>
        </member>
        <member name="T:CSharpFramework.Controls.ErrorInfo">
            <summary>
            Struct containing some error/exception info;
            used to wrap some details, when plugin loading fails
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.ErrorInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            creates a new error info
            </summary>
            <param name="filename">the filename of the failed plugin</param>
            <param name="shortInfo">the short info of the error/exception</param>
            <param name="details">details on error/exception</param>
        </member>
        <member name="M:CSharpFramework.Controls.ErrorInfo.ToString">
            <summary>
            Used for retrieving the display name in the list view
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Controls.ErrorInfo.#ctor(System.String,System.Exception)">
            <summary>
            creates a new error info
            </summary>
            <param name="filename">the filename of the failed plugin</param>
            <param name="ex">the exception that occurred</param>
        </member>
        <member name="F:CSharpFramework.Dialogs.UnitScaleDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.UnitScaleDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.UnitScaleDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.UnitScaleDialog.RoundEdges">
            <summary>
            Gets or sets value whether the control should have round edges
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.AddShapeAction">
            <summary>
            Action that adds a new shape to a layer
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.AddShapeAction.CreateAddShapeAction(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeBase,CSharpFramework.Layer,System.Boolean)">
            <summary>
            Instead of using the constructor of AddShapeAction, please use this function to create a new instance. Since this will use the factory where the user can inject his own AddShapeAction factory
            </summary>
            <param name="shape">The shape to add</param>
            <param name="parent">The parent shape where the shape should be attached to</param>
            <param name="layer">The layer where the shape should be added</param>
            <param name="bCreateUniqueName">if true, the current shape name will be modified so that it is unique in the scene, e.g. light1</param>
            <returns>A new instance of AddShapeAction</returns>
        </member>
        <member name="M:CSharpFramework.Actions.AddShapeAction.CreateAddShapeAction(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeBase,CSharpFramework.Layer,System.Boolean,System.Boolean)">
            <summary>
            Instead of using the constructor of AddShapeAction, please use this function to create a new instance. Since this will use the factory where the user can inject his own AddShapeAction factory
            </summary>
            <param name="shape">The shape to add</param>
            <param name="parent">The parent shape where the shape should be attached to</param>
            <param name="layer">The layer where the shape should be added</param>
            <param name="bCreateUniqueName">if true, the current shape name will be modified so that it is unique in the scene, e.g. light1</param>
            <param name="bEnforceListUnique">if true, the current shape will be made unique with respect to the shape collection contained in
                  the clipboard space.</param>
            <returns>A new instance of AddShapeAction</returns>
        </member>
        <member name="M:CSharpFramework.Actions.AddShapeAction.#ctor(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeBase,CSharpFramework.Layer,System.Boolean)">
            <summary>
            Action constructor that takes the shape and other relevant properties
            </summary>
            <param name="shape">The shape to add</param>
            <param name="parent">The parent shape where the shape should be attached to</param>
            <param name="layer">The layer where the shape should be added</param>
            <param name="bCreateUniqueName">if true, the current shape name will be modified so that it is unique in the scene, e.g. light1</param>
        </member>
        <member name="M:CSharpFramework.Actions.AddShapeAction.#ctor(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeBase,CSharpFramework.Layer,System.Boolean,System.Boolean)">
            <summary>
            Action constructor that takes the shape and other relevant properties
            </summary>
            <param name="shape">The shape to add</param>
            <param name="parent">The parent shape where the shape should be attached to</param>
            <param name="layer">The layer where the shape should be added</param>
            <param name="bCreateUniqueName">if true, the current shape name will be modified so that it is unique in the scene, e.g. light1</param>
            <param name="bEnforceListUnique">if true, the current shape will be made unique with respect to the shape collection contained in
                  the clipboard space.</param>
        </member>
        <member name="M:CSharpFramework.Actions.AddShapeAction.BaseInit(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeBase,CSharpFramework.Layer,System.Boolean,System.Boolean)">
            <summary>
            Private base initialisation method that provides shared functionality for the two constructors
            </summary>
            <param name="shape">The shape to add</param>
            <param name="parent">The parent shape where the shape should be attached to</param>
            <param name="layer">The layer where the shape should be added</param>
            <param name="bCreateUniqueName">if true, the current shape name will be modified so that it is unique in the scene, e.g. light1</param>
            <param name="bEnforceListUnique">if true, the current shape will be made unique with respect to the shape collection contained in
                  the clipboard space.</param>
        </member>
        <member name="M:CSharpFramework.Actions.AddShapeAction.Undo">
            <summary>
            Overridden Undo function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.AddShapeAction.Do">
            <summary>
            Overridden Do function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AddShapeAction.ShortName">
            <summary>
            Overridden Short name function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AddShapeAction.LongName">
            <summary>
            Overridden long name function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AddShapeAction.Valid">
            <summary>
            Checks wether the target layer can be edited
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AddShapeAction.AffectedShape">
            <summary>
            Gets the shape which is going to be or has already been added by this action
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AddShapeAction.Parent">
            <summary>
            Gets the parent shape to which the shape in this action should be attached to
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AddShapeAction.IconIndex">
            <summary>
            Get the icon index: This version tries to get the icon filename of the shape's icon in the Shape Tree View
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.AddShapeAction.IconImage">
            <summary>
            Static function to return the image used to display this type of action in the history
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.RemoveShapeClearsUndoHistory">
            <summary>
            This attribute can be added to a shape class to clear the UNDO history. Before the history is cleared, a message box pop up.
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.RemoveShapeAction">
            <summary>
            Action that removes a shape
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.RemoveShapeAction.CreateRemoveShapeAction(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Instead of using the constructor of RemoveShapeAction, please use this function to create a new instance. Since this will use the factory where the user can inject his own RemoveShapeAction factory
            </summary>
            <param name="shape">The shape to be removed</param>
            <returns>A new instance of RemoveShapeAction</returns>
        </member>
        <member name="M:CSharpFramework.Actions.RemoveShapeAction.CreateRemoveShapeAction(CSharpFramework.Shapes.ShapeBase,System.Boolean)">
            <summary>
            Instead of using the constructor of RemoveShapeAction, please use this function to create a new instance. Since this will use the factory where the user can inject his own RemoveShapeAction factory
            </summary>
            <param name="shape">The shape to be removed</param>
            <param name="bIgnoreNonRemoveableFlag">Whether to ignore the non removable flag.</param>
            <returns>A new instance of RemoveShapeAction</returns>
        </member>
        <member name="M:CSharpFramework.Actions.RemoveShapeAction.#ctor(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Constructor that removes a shape from scene
            </summary>
            <param name="shape">The shape to be removed</param>
        </member>
        <member name="M:CSharpFramework.Actions.RemoveShapeAction.#ctor(CSharpFramework.Shapes.ShapeBase,System.Boolean)">
            <summary>
            Constructor that removes a shape from scene where it is possible to bypass the non removable flag.
            </summary>
            <param name="shape">The shape to be removed</param>
            <param name="bIgnoreNonRemoveableFlag">Whether to ignore the non removable flag.</param>
        </member>
        <member name="M:CSharpFramework.Actions.RemoveShapeAction.Do">
            <summary>
            Overridden Do function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.RemoveShapeAction.Undo">
            <summary>
            Overridden Undo function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RemoveShapeAction.Valid">
            <summary>
            Check whether the shape can be removed
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RemoveShapeAction.ShortName">
            <summary>
            Overridden short name function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RemoveShapeAction.LongName">
            <summary>
            Overridden long name function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RemoveShapeAction.AffectedShape">
            <summary>
            Gets the shape which is going to be or has already been removed by this action
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RemoveShapeAction.IconIndex">
            <summary>
            Get the icon index for this action
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.ReplaceShapeAction">
            <summary>
            Action that replaces a shape by another. It preserves the full graph including the old children
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.ReplaceShapeAction.#ctor(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Constructor
            </summary>
            <param name="oldshape">Shape to be removed</param>
            <param name="newshape">New shape</param>
        </member>
        <member name="M:CSharpFramework.Actions.ReplaceShapeAction.Do">
            <summary>
            Overridden Do function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.ReplaceShapeAction.Undo">
            <summary>
            Overridden Undo function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.ReplaceShapeAction.Valid">
            <summary>
            Check whether the shape can be removed
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.ReplaceShapeAction.ShortName">
            <summary>
            Overridden short name function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.ReplaceShapeAction.LongName">
            <summary>
            Overridden long name function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.ReplaceShapeAction.IconIndex">
            <summary>
            Get the icon index for this action
            </summary>
        </member>
        <member name="T:CSharpFramework.View.GUI">
            <summary>
            The GUI class provides static image lists for shape images etc. for toolbars, menus resp. shape tree views.
            Additionally it provides a the property UIUpdateLock to lock GUI updates.
            </summary>
        </member>
        <member name="M:CSharpFramework.View.GUI.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="P:CSharpFramework.View.GUI.ShapeTreeImages">
            <summary>
            Image list for icons used in the shape tree. These images must have a size of 16x16. Use this dynamic
            image list to add bitmaps for custom shapes. See Shape.GetIconIndex function
            </summary>
        </member>
        <member name="P:CSharpFramework.View.GUI.ActionImages">
            <summary>
            Image list for icons used in the action view. These images must have a size of 16x16.
            See IAction.IconIndex
            </summary>
        </member>
        <member name="P:CSharpFramework.View.GUI.MainMenu">
            <summary>
            Gets the main menu of the application. Allows for registering own menu items from inside plugins
            </summary>
        </member>
        <member name="P:CSharpFramework.View.GUI.MainToolBar">
            <summary>
            Access the main toolbar of vForge. Allows for registering own tool bar buttons from inside plugins
            </summary>
        </member>
        <member name="P:CSharpFramework.View.GUI.EnginePanelToolBar">
            <summary>
            Access to the toolbar at the top of the engine panel. Allows for hiding this toolbar when necessary.
            </summary>
        </member>
        <member name="P:CSharpFramework.View.GUI.UIUpdateLock">
            <summary>
            the gui is not updated while this counter is >0
            </summary>
        </member>
        <member name="P:CSharpFramework.View.GUI.RecordableControls">
            <summary>
            Add controls (buttons, menu items) to this collection at application startup if their event should be recordable.
            Use a unique string as a key
            </summary>
        </member>
        <member name="T:CSharpFramework.View.GUI.DynamicImageList">
            <summary>
            A dynamic image list allows to add image filenames at runtime. It checks whether a bitmap of specified filename 
            already exists in the list and adds only new ones.
            </summary>
        </member>
        <member name="M:CSharpFramework.View.GUI.DynamicImageList.#ctor(System.Int32)">
            <summary>
            Constructor that takes the image size as a parameter. The size cannot be changed at runtime.
            </summary>
            <param name="iSize">Size of thre image, e.g. 24 for 24x24 images</param>
        </member>
        <member name="M:CSharpFramework.View.GUI.DynamicImageList.AddBitmap(System.String,System.Drawing.Color)">
            <summary>
            Adds a bitmap by filename. Checks whether image already exists.
            </summary>
            <param name="filename">filename of the image bitmap</param>
            <param name="transparentColor">Color that is used for transparency in the image</param>
            <returns>image index</returns>
        </member>
        <member name="M:CSharpFramework.View.GUI.DynamicImageList.AddBitmap(System.Drawing.Bitmap,System.String,System.Drawing.Color)">
            <summary>
            Adds a bitmap instance to the image list. Tries to find it first using the internalName string
            </summary>
            <param name="bitmap">the bitmap to be added</param>
            <param name="internalName">an internal name associated with the bitmap in this list</param>
            <param name="transparentColor">Color that is used for transparency in the image</param>
            <returns>image index</returns>
        </member>
        <member name="M:CSharpFramework.View.GUI.DynamicImageList.Exists(System.String)">
            <summary>
            Tests whether the specified image is already in the list of filenames
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.View.GUI.DynamicImageList.Clear">
            <summary>
            Removes all images from the list
            </summary>
        </member>
        <member name="P:CSharpFramework.View.GUI.DynamicImageList.Size">
            <summary>
            Get the image size. Cannot be changed
            </summary>
        </member>
        <member name="P:CSharpFramework.View.GUI.DynamicImageList.ImageList">
            <summary>
            Get the image list
            </summary>
        </member>
        <member name="P:CSharpFramework.View.GUI.DynamicImageList.FileNames">
            <summary>
            Get the list of file names that are loaded. Same order as images in the ImageList
            </summary>
        </member>
        <member name="T:CSharpFramework.ShortCuts.EditorPluginShortCut">
            <summary>
            Implements ShortCutAction that is bound to a shape creator plugin. For later use.
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.EditorPluginShortCut.#ctor(CSharpFramework.IEditorPlugin,System.Windows.Forms.Keys)">
            <summary>
            Constructor. Takes the creator plugin that it attaches to
            </summary>
            <param name="plugin"></param>
            <param name="defaultKey"></param>
        </member>
        <member name="M:CSharpFramework.ShortCuts.EditorPluginShortCut.Do">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.EditorPluginShortCut.ActionName">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.EditorPluginShortCut.Category">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.EditorPluginShortCut.Enabled">
            <summary>
            Overridden function (Scene must be active)
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.OrthographicViewBoxShape">
            <summary>
            This shape represents a bounding box that defines the clip planes for orthographic views.
            The scene has one invisible instance of this.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.#ctor(System.String)">
            <summary>
            Shape Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.PerformRelevantOperation(System.String,System.Int32,System.Int32)">
            <summary>
            Overridden function
            </summary>
            <param name="name"></param>
            <param name="iShapeIndex"></param>
            <param name="iShapeCount"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.OnAddedToScene">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.OnRemoveFromScene">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.OnTransformationChanged">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.GetLocalBoundingBox(CSharpFramework.Math.BoundingBox@)">
            <summary>
            Overridden function
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.Clone">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.OnSelected">
            <summary>
            Called when the shape is selected
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.OnUnSelected">
            <summary>
            Called when the shape is unselected
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when user starts dragging a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Called while the user drags a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when the user releases the mouse button on a hotspot
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.OrthographicViewBoxShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="P:CSharpFramework.Shapes.OrthographicViewBoxShape.AbsBoundingBox">
            <summary>
            Returns the absolute bounding box
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.OrthographicViewBoxShape.BoundingBoxMin">
            <summary>
            Local bounding box minimum
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.OrthographicViewBoxShape.BoundingBoxMax">
            <summary>
            Local bounding box maximum
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.OrthographicViewBoxShape.LocalBoxX1">
            <summary>
            x1
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.OrthographicViewBoxShape.LocalBoxY1">
            <summary>
            y1
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.OrthographicViewBoxShape.LocalBoxZ1">
            <summary>
            z1
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.OrthographicViewBoxShape.LocalBoxX2">
            <summary>
            x2
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.OrthographicViewBoxShape.LocalBoxY2">
            <summary>
            y2
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.OrthographicViewBoxShape.LocalBoxZ2">
            <summary>
            z2
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.OrthographicViewBoxShape.RelevantOperations">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.OrthographicViewBoxShape.ParentingMode">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.OrthographicViewBoxShape.Traceable">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.OrthographicViewBoxShape.CanCopyPaste">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ZoneCollection">
            <summary>
            Zone collection class
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ZoneCollection.EnumSortingOrder">
            <summary>
            Assigns identity sorting key to all zones
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ZoneCollection.Sort">
            <summary>
            Sorts the zones according to their sorting key
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ZoneCollection.MoveTo(CSharpFramework.Scene.Zone,System.Int32)">
            <summary>
            Move the Zone to the specified position
            </summary>
            <param name="item">Zone to move</param>
            <param name="newIndex">new index of the Zone within the collection</param>
        </member>
        <member name="M:CSharpFramework.Scene.ZoneCollection.GetZoneByName(System.String)">
            <summary>
            Find a Zone by specified name
            </summary>
            <param name="name">name of the Zone</param>
            <returns>Zone instance (or null)</returns>
        </member>
        <member name="M:CSharpFramework.Scene.ZoneCollection.GetZoneByName(System.String,CSharpFramework.Scene.Zone)">
            <summary>
            Find a Zone by specified name
            </summary>
            <param name="name">name of the Zone</param>
            <param name="ignore">this Zone is not tested</param>
            <returns>Zone instance (or null)</returns>
        </member>
        <member name="M:CSharpFramework.Scene.ZoneCollection.GetZoneByFilename(System.String,CSharpFramework.Scene.Zone)">
            <summary>
            Find a Zone by specified filename
            </summary>
            <param name="name">filename of the Zone</param>
            <param name="ignore">this Zone is not tested</param>
            <returns>Zone instance (or null)</returns>
        </member>
        <member name="M:CSharpFramework.Scene.ZoneCollection.MatchupLayerNames(CSharpFramework.LayerCollection)">
            <summary>
            Calls MatchupLayerNames for all zones in this collection
            </summary>
            <param name="allLayers"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ZoneCollection.DeepClone">
            <summary>
            Returns a collection with all zones cloned
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ZoneCollection.ShallowClone">
            <summary>
            Returns a new collection with all zones references
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Scene.IShapeComponentManager">
            <summary>
            Interface for component manager
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicPropertyManager">
            <summary>
            Manages a set of dynamic property collection types and offers functions for creating and migrating
            property collection instances. 
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicPropertyManager._collectionTypes">
            <summary>
            Registered collection types
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyManager.AddCollectionType(CSharpFramework.DynamicProperties.DynamicPropertyCollectionType)">
            <summary>
            Add a collection type to the manager.
            Throws an exception if the type already exists.
            </summary>
            <param name="collectionType">collection type to add</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyManager.CreateNewType(System.String,CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.DynamicPropertyCollectionFlags_e)">
            <summary>
            Override this function to create custom type classes. This function does not add it to the collection
            </summary>
            <param name="uniqueName"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyManager.Exists(System.String)">
            <summary>
            Indicates whether the passed type already exists in this manager
            </summary>
            <param name="collectionTypeName">name of the collection type</param>
            <returns>boolean whether type exists</returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyManager.GetCollectionType(System.String)">
            <summary>
            Gets the collection type with the specified name
            </summary>
            <param name="uniqueName">name of the collection type</param>
            <returns>collection type instance or null if type was not found</returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyManager.CreateCollection(CSharpFramework.Scene.ISceneObject,System.String)">
            <summary>
            Creates a new DynamicPropertyCollection of the given type
            </summary>
            <param name="forObject">traget object will be passed to constructor</param>
            <param name="collectionTypeName">type of the collection</param>
            <returns>new DynamicPropertyCollection instance</returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyManager.CreateMigratedCollection(CSharpFramework.DynamicProperties.DynamicPropertyCollection)">
            <summary>
            Migrates the passed DynamicPropertyCollection to this manager.
            
            Creates a new DynamicPropertyCollection instance and copies the values from the passed collection.
            If the type of the passed collection is not registered in this class then the passed collection
            is returned (with the "Missing" state set).
            
            Use this function to migrate your property collections to the latest types (e.g. for migrating
            your shader effect to the latest shader library)
            </summary>
            <param name="oldPropertyCollection"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyManager.CollectionTypes">
            <summary>
            Gets an array of all collection types within this manager
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyManager.CollectionNames">
            <summary>
            Gets an array with the names of all collection types names within this manager
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicPropertyManager.TypeAlreadyExistsException">
            <summary>
            Exception triggered if a type is tried to be added that already exists
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyManager.TypeAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="typeName"></param>
        </member>
        <member name="F:CSharpFramework.Scene.IShapeComponentManager.COMPONENT_NAME_PROPERTY">
            <summary>
            Internal string property
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeComponentManager.CreateNewType(System.String,CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.DynamicPropertyCollectionFlags_e)">
            <summary>
            Implement base interface
            </summary>
            <param name="uniqueName"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeComponentManager.Activate(System.Boolean)">
            <summary>
            Activate this manager
            </summary>
            <param name="bStatus"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeComponentManager.DisposeComponentType(CSharpFramework.Scene.ShapeComponentType)">
            <summary>
            Overridable to dispose native dependencies
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeComponentManager.CreateNativeComponent(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            Called when the component requests a native instance
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeComponentManager.ReleaseUnusedComponent(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            Releases the native object component instance in the passed managed component
            if the reference count of the native object is zero.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeComponentManager.SetNativeComponentProperty(CSharpFramework.Scene.ShapeComponent,CSharpFramework.DynamicProperties.DynamicProperty)">
            <summary>
            Set a property on the native instance
            </summary>
            <param name="component"></param>
            <param name="prop"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeComponentManager.SetNativeComponentID(CSharpFramework.Scene.ShapeComponent,System.String)">
            <summary>
            Set component ID by string
            </summary>
            <param name="component"></param>
            <param name="ID"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeComponentManager.GetComponentPropertyFlags(CSharpFramework.Scene.ShapeComponent,CSharpFramework.DynamicProperties.DynamicProperty)">
            <summary>
            Request property grid flags from native component
            </summary>
            <param name="component"></param>
            <param name="dynamicProperty"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeComponentManager.GetComponentStandardValues(CSharpFramework.Scene.ShapeComponent,System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Get standard valued for the passes key
            </summary>
            <param name="component"></param>
            <param name="key"></param>
            <param name="list"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeComponentManager.GetComponentDisplayName(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            Return the (custom) display name for the passed component
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeComponentManager.SendValueChangingMessage(CSharpFramework.Scene.ShapeComponent,System.String,System.String)">
            <summary>
            propagate changing messge to native instance
            </summary>
            <param name="component"></param>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:CSharpFramework.Scene.IShapeComponentManager.GetComponentTypesDerivedFrom(System.String)">
            <summary>
            Helper function that builds a list of component types that are derived from a specific base class
            </summary>
            <param name="nativeBaseClass"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Scene.IShapeComponentManager.ComponentFactory">
            <summary>
            Static function that allows for installing a factory that create instances of (custom) component instances. This factory is used for
            every component that is used for shapes.
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ShapeComponentFactory">
            <summary>
            Component factory class. Derived classes can be used to create custom component instances. A global factory can be installed
            in the IShapeComponentManager.ComponentFactory field
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentFactory.CreateComponent(CSharpFramework.Scene.ISceneObject,CSharpFramework.Scene.ShapeComponentType)">
            <summary>
            Create a new component instance. Override this to return custom instances. Custom instances must be derived from ShapeComponent 
            </summary>
            <param name="owner">The component's owner, e.g. the shape that it is going to be attached to</param>
            <param name="collectionType">The component type</param>
            <returns>A new instance of a component</returns>
        </member>
        <member name="T:CSharpFramework.Scene.ShapeComponentType">
            <summary>
            Represents a native component class
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentType.#ctor(System.String,CSharpFramework.DynamicProperties.DynamicPropertyCollectionType.DynamicPropertyCollectionFlags_e)">
            <summary>
            Constructor
            </summary>
            <param name="uniqueName"></param>
            <param name="flags"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentType.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentType.CreateInstance(CSharpFramework.Scene.ISceneObject)">
            <summary>
            Create an instance of this type
            </summary>
            <param name="forObject"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentType.CreateMigratedCollection(CSharpFramework.DynamicProperties.DynamicPropertyCollection)">
            <summary>
            Migrate collection of properties
            </summary>
            <param name="oldPropertyCollection"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Scene.ShapeComponentType.PluginInfo">
            <summary>
            Source plugin 
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ShapeComponentType.SortingKey">
            <summary>
            For sorting components
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ShapeComponentType.ProbeComponent">
            <summary>
            Holds an instance of the native component so various things can be tested (e.g. CanAttachToObject)
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentType.CompareTo(System.Object)">
            <summary>
            Implements IComparable
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Scene.ShapeComponent">
            <summary>
            Represents a component instance
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.#ctor(CSharpFramework.Scene.ISceneObject,CSharpFramework.Scene.ShapeComponentType)">
            <summary>
            Constructor
            </summary>
            <param name="owner"></param>
            <param name="collectionType"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.GetNativeOwnerPtr">
            <summary>
            Returns a pointer to the native object that holds this component (e.g. an instance of VisBaseEntity_cl)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.IsNativeObject(System.IntPtr)">
            <summary>
            Tests whether the passed pointer matches the native object pointer
            </summary>
            <param name="checkPtr"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.OnSceneEvent(CSharpFramework.SceneEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.Equals(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.GetHashCode">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.OnSelected">
            <summary>
            This overridable gets called when the component is selected by the UI
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.OnUnSelected">
            <summary>
            This overridable gets called when the component is unselected by the UI
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.OnOwnerSelected">
            <summary>
            This overridable gets called when the owner (shape) is selected in the editor
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.OnOwnerUnSelected">
            <summary>
            This overridable gets called when the owner (shape) is un-selected in the editor
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.OnRemoved">
            <summary>
            This overridable gets called when the component removed from a shape
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.OnAdded">
            <summary>
            This overridable gets called when the component is added to a shape. 
            It gets called when the user adds a component to the scene or when vForge assigns components to shapes that get deserialized while loading the scene
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.TriggerUIUpdateBegin(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            Helper function to trigger OnUIUpdateBegin
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.TriggerUIUpdateFinished(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            Helper function to trigger OnUIUpdateFinished
            </summary>
            <param name="sender"></param>
        </member>
        <member name="F:CSharpFramework.Scene.ShapeComponent.NativePtr">
            <summary>
            This native pointer can be used by managed C++ code to associate this instance with a native counterpart, e.g. a component.
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.CloneCollection">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.GetPropertyFlags(CSharpFramework.Scene.PropertyFlagsProviderInfo)">
            <summary>
            Overridden function
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.GetPluginInformation">
            <summary>
            Access plugin information. Default gets it from parent type
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.GetStandardValues(System.String)">
            <summary>
            Overridden function
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponent.OnPropertyValueChanging(System.Object,System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="Instance"></param>
            <param name="propertyDesc"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:CSharpFramework.Scene.ShapeComponent.Owner">
            <summary>
            Overridden property
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.ShapeComponent.OnUIUpdateBegin">
            <summary>
            This event gets triggered right before new components are added/removed through UI or UNDO stack
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.ShapeComponent.OnUIUpdateFinished">
            <summary>
            This event gets triggered right after new components are added/removed through UI or UNDO stack
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShapeComponent.Tagged">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShapeComponent.CreatedByNative">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShapeComponent.Selected">
            <summary>
            Indicates whether this component is currently selected in the UI. Apart from UI, this does not have any other meaning
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShapeComponent.Removable">
            <summary>
            Change this property to create components that cannot be manually removed via actions
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShapeComponent.Visible">
            <summary>
            Specifies whether the component is visible in a shape's list of components (component panel).
            This property does not have any effect on the engine runtime.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShapeComponent.Editable">
            <summary>
            Specifies whether the component properties are editable in the component properties panel.
            This property does not have any effect on the engine runtime.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShapeComponent.Serializable">
            <summary>
            Change this property to exclude a component from serialization
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShapeComponent.Active">
            <summary>
            Internal property to mark components active (or not)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShapeComponent.IDString">
            <summary>
            Accessor for the component name. The name is part of the component collection
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShapeComponent.PrefabIdentifier">
            <summary>
            try to use the component ID to avoid non-unique component identifiers (i.e. there can be more than one script component)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShapeComponent.DisplayName">
            <summary>
            Request display name from instance or type
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ShapeComponentCollection">
            <summary>
            Component collection class
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentCollection.DeepClone">
            <summary>
            Performs a deep clone on this collection (every single component is cloned)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentCollection.DeepClone(System.Boolean)">
            <summary>
            Performs a deep clone on this collection (every single component is cloned)
            </summary>
            <param name="bCopyNativePtr">If true, the NativePtr member will be cloned as well, otherwise it is set to null</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentCollection.DeepClone(CSharpFramework.Scene.ShapeComponentCollection)">
            <summary>
            Static helper function that deep clones the passed instance (which can be null)
            </summary>
            <param name="coll"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentCollection.GetComponentByType(CSharpFramework.Scene.ShapeComponentType)">
            <summary>
            Returns the first component with the specified type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentCollection.GetComponentByNativePointer(System.IntPtr)">
            <summary>
            Returns the component with the specified native pointer
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentCollection.GetComponentByName(System.String)">
            <summary>
            Returns the component with the specified name
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentCollection.ContainsReference(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            Unlike the Contains function this function does not use the Equals function for deep comparison
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentCollection.FindReference(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            Returns the index (or -1) of the occurrence of the passed component
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentCollection.RemoveReference(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            Returns the passed reference from the list
            </summary>
            <param name="component"></param>
            <returns>true, if the reference was contained in the list</returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentCollection.get_Item(System.Int32)">
            <summary>
            For managed C++ compatibility
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentCollection.GetActiveComponents">
            <summary>
            Returns a new collection that contains only the Active components
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentCollection.MigrateProperties(CSharpFramework.Scene.ISceneObject,CSharpFramework.Scene.IShapeComponentManager)">
            <summary>
            Calls CreateMigratedCollection for each element in this collection
            </summary>
            <param name="owner"></param>
            <param name="manager"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ShapeComponentCollection.RemoveWithTaggedStatus(System.Boolean)">
            <summary>
            Remove all components from this list that have the passed status in the Tagged property
            </summary>
            <param name="bStatus"></param>
        </member>
        <member name="P:CSharpFramework.Scene.ShapeComponentCollection.Item(CSharpFramework.Scene.ShapeComponentType)">
            <summary>
            Returns the first component with the specified type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Scene.ShapeComponentCollection.Tagged">
            <summary>
            Set the tagged flag for all components
            </summary>
        </member>
        <member name="T:CSharpFramework.LayerChangedArgs">
            <summary>
            Event class for changes in a layer
            </summary>
        </member>
        <member name="M:CSharpFramework.LayerChangedArgs.#ctor(CSharpFramework.Layer,CSharpFramework.LayerCollection,CSharpFramework.LayerChangedArgs.Action)">
            <summary>
            Constructor
            </summary>
            <param name="_layer"></param>
            <param name="_owner"></param>
            <param name="_action"></param>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.layer">
            <summary>
            The layer that changed
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.layerCollection">
            <summary>
            The collection it belongs to
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.action">
            <summary>
            The current status
            </summary>
        </member>
        <member name="T:CSharpFramework.LayerChangedArgs.Action">
            <summary>
            changed status
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.Action.Added">
            <summary>
            Layer has been added
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.Action.Removed">
            <summary>
            Layer has been removed
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.Action.Selected">
            <summary>
            Layer has been selected
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.Action.Clicked">
            <summary>
            Layer has been clicked on (in list view)
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.Action.NameChanged">
            <summary>
            Name of the layer changed
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.Action.PropertyChanged">
            <summary>
            A layer property changed
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.Action.RebuildList">
            <summary>
            The whole layer list has to be rebuilt
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.Action.VisibleChanged">
            <summary>
            The visible status of the layer changed
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.Action.LockStatusChanged">
            <summary>
            The lock status of a layer (or the whole list) has changed
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.Action.ModifiedChanged">
            <summary>
            The 'Dirty' flag of the layer changed
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.Action.ContentChanged">
            <summary>
            Indicates that the content of a layer (that is owned by a different user) has been changed.
            This may also mean that a new layer has been added by another user in the network.
            Saving a layer that you own the lock for will not cause this event.
            </summary>
        </member>
        <member name="F:CSharpFramework.LayerChangedArgs.Action.ZoneChanged">
            <summary>
            The parent zone of the layer has changed
            </summary>
        </member>
        <member name="T:CSharpFramework.Layer">
            <summary>
            Scene layer base class. A layer contains a hierarchy of shapes
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.CAT_LAYER">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.CAT_HAVOKAI">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.CATORDER_LAYER">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.CATORDER_HAVOKAI">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:CSharpFramework.Layer.#ctor(System.String)">
            <summary>
            Constructor that takes the layer name
            </summary>
            <param name="name">layer name</param>
        </member>
        <member name="M:CSharpFramework.Layer.Clone">
            <summary>
            Clones a layer
            </summary>
            <returns>new layer instance</returns>
        </member>
        <member name="M:CSharpFramework.Layer.SetLayerNameInternal(System.String)">
            <summary>
            Sets the layer name without checking filelock etc. Should not be used.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CSharpFramework.Layer.SetLayerFileNameInternal(System.String)">
            <summary>
            Sets the internal file name of the layer. Should not be used.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CSharpFramework.Layer.GetCurrentShapeIDWatermark">
            <summary>
            Internal function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Layer.CreateNewShapeID">
            <summary>
            Generates a new shape ID
            </summary>
            <returns>32-bit shape part of the 64bit unique ID</returns>
        </member>
        <member name="M:CSharpFramework.Layer.SetShapeIDWatermark(System.UInt32)">
            <summary>
            Internal function - should not be used
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:CSharpFramework.Layer.OnLayerIDChanged">
            <summary>
            Must be called when the layer ID changes
            </summary>
        </member>
        <member name="M:CSharpFramework.Layer.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method 
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="M:CSharpFramework.Layer.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method.
            Therefore, you should call GC.SupressFinalize to
            take this object off the finalization queue 
            and prevent finalization code for this object
            from executing a second time.
            </summary>
        </member>
        <member name="M:CSharpFramework.Layer.AddShape(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Adds a shape to this layer. (However this does not do much to the layer, because the shape is added to its parent)
            </summary>
            <param name="shape">Shape to add</param>
            <param name="parent">parent shape to add this shape</param>
        </member>
        <member name="M:CSharpFramework.Layer.RemoveShape(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Removes the shape from the layer
            </summary>
            <param name="shape">Shape to remove</param>
        </member>
        <member name="M:CSharpFramework.Layer.OnRemoveAllEngineInstances">
            <summary>
            Overridable that is called when all engine instances should be removed
            </summary>
        </member>
        <member name="M:CSharpFramework.Layer.OnCreateAllEngineInstances(CSharpFramework.Visitors.CreateEngineInstanceVisitor)">
            <summary>
            Overridable that is called when all engine instances should be created
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:CSharpFramework.Layer.OnReassignAllLinks">
            <summary>
            Overridable that is called when all shape links should be re-established
            </summary>
        </member>
        <member name="M:CSharpFramework.Layer.GetMaxShapeNameIndex(System.String,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Creates a unique name index for shapes in this layer
            </summary>
            <param name="shapeName">Source name</param>
            <param name="ignoreShape">Shape to ignore while checking</param>
            <returns>integer that represents the new index, e.g. 16 if layer contains a shape named "light16"</returns>
        </member>
        <member name="M:CSharpFramework.Layer.CanAttachToZone(CSharpFramework.Scene.Zone)">
            <summary>
            Overridable that determines whether a layer can be put into a zone
            </summary>
            <param name="zone"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Layer.OnActiveShapeChanged(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Invokes an OnActiveShapeChanged event
            </summary>
            <param name="oldActive"></param>
            <param name="newActive"></param>
        </member>
        <member name="M:CSharpFramework.Layer.AnyShapeHasHintFlag(CSharpFramework.Shapes.ShapeBase.HintFlags_e)">
            <summary>
            Checks whether any shape in this layer has the passed hint bit(s) set
            </summary>
            <param name="hint"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Layer.LAYER_FILE_VERSION_0">
            <summary>
            Old 6.1 file (layers still in scene file)
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.LAYER_FILE_VERSION_1">
            <summary>
            First version of layer files in sub-directory
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.LAYER_CURRENT_FILE_VERSION">
            <summary>
            Always set to current version
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.LayerFileVersion">
            <summary>
            Member that defines the current loading version of a layer (file)
            </summary>
        </member>
        <member name="M:CSharpFramework.Layer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Layer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Layer.SetOLDDescription(System.String)">
            <summary>
            Helper function; do not use
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:CSharpFramework.Layer.OnDeserialization(System.Object)">
            <summary>
            non virtual interface implementation. Calls virtual OnDeserialization
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:CSharpFramework.Layer.OnDeserialization">
            <summary>
            Virtual overridable
            </summary>
        </member>
        <member name="M:CSharpFramework.Layer.OnBeforeSerialization">
            <summary>
            Overridable that is called before saving the layer
            </summary>
        </member>
        <member name="M:CSharpFramework.Layer.GetStaticLightInfo(CSharpFramework.Scene.StaticLightInfo)">
            <summary>
            Virtual function to collect information for static light update
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Layer.OnActivateScene">
            <summary>
            Virtual function that gets called when the scene gets activated
            </summary>
        </member>
        <member name="M:CSharpFramework.Layer.OnExport(CSharpFramework.Scene.SceneExportInfo)">
            <summary>
            Initiates the export of all engine instances in this layer
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Layer.GetDependencies(CSharpFramework.Scene.ResourceSnapshotInfo)">
            <summary>
            Fills the snapshot info with information about native resource being used in this layer
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Layer.CalculateBoundingBox">
            <summary>
            Overridable to calculate the bounding box of all shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Layer.OnLayerActionTriggered(CSharpFramework.LayerChangedArgs.Action)">
            <summary>
            Overridable that is automatically called for every layer for that the IScene.SendLayerChangedEvent callback is triggered
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:CSharpFramework.Layer.CreateLayer">
            <summary>
            Prompts for a layer name and creates the layer
            </summary>
            <param name="selection_Layers"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Layer.CreateLayer(CSharpFramework.LayerCollection)">
            <summary>
            Prompts for a layer name and creates the layer
            </summary>
            <param name="selection_Layers">indicates layers selected to determine where the new layer should be placed (outside/inside zone?)</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Layer.AddPendingDirtyObject(CSharpFramework.Scene.ISceneObject)">
            <summary>
            Adds an object to the list that will be marked as dirty after scene loading
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:CSharpFramework.Layer.MarkPendingObjectsDirty">
            <summary>
            Calls MOdified=true for each obejct that has been added via AddPendingDirtyObject
            </summary>
        </member>
        <member name="M:CSharpFramework.Layer.RenameLayerFile(System.String,System.String,System.Boolean)">
            <summary>
            Function that is called when renaming the layer. Does not handle the filelock
            </summary>
            <param name="oldFile">Old filename (with extension already)</param>
            <param name="newFile">New filename (with extension already)</param>
            <param name="bForceOverwrite">if false this function returns false if the new file exists, otherwise it overwrites it</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Layer.SetLayerNameAsFilename(System.Boolean,System.String@)">
            <summary>
            Renames the layer file on disk
            </summary>
            <param name="bCheckOnly"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Layer.ConvertLayerFilename(System.String)">
            <summary>
            Converts a layer name to filename, i.e. Layername.Layer
            </summary>
            <param name="layername"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Layer.CreateBackupFile">
            <summary>
            Creates a backup of the current layer file
            </summary>
        </member>
        <member name="M:CSharpFramework.Layer.SaveToFile">
            <summary>
            Saves the layer to a binary archive using its filename relative to the current scene
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Layer.UpdateReadOnlyState">
            <summary>
            Updates the read-only status of the layer itself
            </summary>
        </member>
        <member name="M:CSharpFramework.Layer.UpdateLockStatus(System.Boolean,System.Boolean)">
            <summary>
            Updates the state that is returned via LockStatus.
            </summary>
            <param name="safeMode">if set, this function tries to acquire a lock for getting the accurate lock state. The safe check is only necessary for tracking unexpected situation (lock files not having been deleted)</param>
            <param name="bSendMsg">if set, this function triggers a LayerChangedArgs event if the state has changed</param>
            <returns>true if the state has changed</returns>
        </member>
        <member name="M:CSharpFramework.Layer.GetFileLock(CSharpFramework.IScene)">
            <summary>
            Gets (resp. creates) a file lock object for this layer. Does however not lock the file.
            </summary>
            <param name="scene"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Layer.TryLock(CSharpFramework.IScene,System.Boolean)">
            <summary>
            Tries to lock the layer file for writing. The scene is needed for the directory name
            (might not be set yet for EditorManager.Scene)
            </summary>
            <param name="scene">scene used for the directory. null for current scene</param>
            <param name="bSendMsg">if set, this function triggers a LayerChangedArgs event if the state has changed</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Layer.OwnsLockForScene(CSharpFramework.IScene)">
            <summary>
            wraps around the OwnsLock function of the layer's file lock instance
            </summary>
            <param name="scene"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Layer.ReleaseLock(System.Boolean,System.Boolean)">
            <summary>
            wraps around the Unlock function of the layer's file lock instance and optionally triggers a LayerChangedEvent event and resets
            the action stack
            </summary>
            <param name="bSendMsg"> Determines whether an Layer Changed Event should be triggered. </param>
            <param name="bResetActionStack"> Determines whether the action stack should be resetted. </param>
            <returns> TRUE when releasing the lock was successful, FALSE otherwise. </returns>
        </member>
        <member name="M:CSharpFramework.Layer.ForceRemoveExternalLock">
            <summary>
            This removes any lock without any checks. It is necessary for example
            if the layer is saved in a new file because the lock will still reference
            to the old location of the layer
            </summary>
            <remarks>Use with extreme caution</remarks>
        </member>
        <member name="M:CSharpFramework.Layer.UpdateLastModified(System.IO.FileInfo)">
            <summary>
            Updates the time stamp for this layer. The fileInfo parameter is optional.
            The return value is true in case the new time stamp is newer than the old one
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Layer._sortingOrder">
            <summary>
            Value that defines the sorting order in the list view
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer._bExport">
            <summary>
            Export flag for this layer (not saved)
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.LayerName">
            <summary>
            Get or set the layer name
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.Description">
            <summary>
            The description ot this layer. Optionally, the description of the main layer can pop up after scene loading. (See scene settings)
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.HasDescription">
            <summary>
            Indicates whether this layer has a description
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.IncludeInNavMesh">
            <summary>
            Get or set property that determines if layer is included when building a nav mesh
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.LayerID">
            <summary>
            Returns the layer's own 32bit ID, which is the first part of shapes global unique ID
            This ID is generated from a hash code of the layer's unique filename
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.ID">
            <summary>
            String version of LayerID for the property grid
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.ParentScene">
            <summary>
            Gets or sets the owner scene where this layer is attached to. The set function is only for
            internal use.
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.ParentZone">
            <summary>
            Gets or sets the owner zone. This can be null. The setter is for internal use; use AttachToZone instead
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.Loaded">
            <summary>
            Indicates the loaded status of this layer. Uses the parent zone's status
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.Visible">
            <summary>
            Visible flag of the layer (get/set)
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.Export">
            <summary>
            Export flag of the layer (get/set)
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.ShapesSelectable">
            <summary>
            Visible flag of the layer (get/set)
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.Root">
            <summary>
            Get the root shape in the layer
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.ActiveShape">
            <summary>
            Get the active shape in the layer
            </summary>
        </member>
        <member name="E:CSharpFramework.Layer.ActiveShapeChanged">
            <summary>
            ActiveShapeChanged Event,
            Gets invoked when the active shape of the layer changes.
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.Modifiable">
            <summary>
            Implements the ISceneObject interface and returns the locked status
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.Modified">
            <summary>
            Implements the ISceneObject interface and sets the Dirty status
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.Removable">
            <summary>
            Indicates whether layer is removable or not. By default, it returns the Lock status of the layer
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.LayerFilename">
            <summary>
            Returns the (relative) filename for saving the layer to file (e.g. Layername.Layer). Uses ConvertLayerFilename
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.AbsoluteLayerFilename">
            <summary>
            Concatenates the current scene path with the layer filename
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.AbsoluteLayerBackupFilename">
            <summary>
            Gets the absolute path to the layer backup file
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.CheckEditable">
            <summary>
            Checks the OwnsLock status and shows a error message dialog if not ediable
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.ReadOnly">
            <summary>
            Internal strate that indices whether layer file is read only
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.LockStatus">
            <summary>
            Evaluates the Layer status using its file lock object. The state is not updated/modified.
            Use UpdateLockStatus instead
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.OwnsLock">
            <summary>
            Wraps around OwnsLockForScene(null) function, i.e. always uses current scene 
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.LastModified">
            <summary>
            time stamp of the file's last modification (update via UpdateLastModified)
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.LastModifiedInternal">
            <summary>
            Setter function to leave the normal one read-only
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.FileTimeHasChanged">
            <summary>
            Indicates whether the file time has changed since the last update
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.FileStatus">
            <summary>
            Used internally when updating layer information
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.Dirty">
            <summary>
            Indicates whether this layer has been modified by the user.
            </summary>
        </member>
        <member name="P:CSharpFramework.Layer.DirtyFlagInternal">
            <summary>
            Sets the dirty flag without modifying anything. Should not be used
            </summary>
        </member>
        <member name="T:CSharpFramework.Layer.ActiveShapeChangedArgs">
            <summary>
            ActiveShapeChanged Event Arguments
            </summary>
        </member>
        <member name="M:CSharpFramework.Layer.ActiveShapeChangedArgs.#ctor(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Constructor
            </summary>
            <param name="oldActiveShapeIn"></param>
            <param name="newActiveShapeIn"></param>
        </member>
        <member name="F:CSharpFramework.Layer.ActiveShapeChangedArgs.OldActiveShape">
            <summary>
            Previously active shape
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.ActiveShapeChangedArgs.NewActiveShape">
            <summary>
            New active shape
            </summary>
        </member>
        <member name="T:CSharpFramework.Layer.ActiveShapeChangedEventHandler">
            <summary>
            ActiveShapeChanged Delegate
            </summary>
        </member>
        <member name="T:CSharpFramework.Layer.LayerLockStatus_e">
            <summary>
            Enum that represents the distinct locked states of a layer
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.LayerLockStatus_e.LockedByUser">
            <summary>
            The Layer is locked by this user. It is thus editable
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.LayerLockStatus_e.NotLocked">
            <summary>
            The layer seems to be locked by nobody (status can change after updating)
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.LayerLockStatus_e.ExternalLock">
            <summary>
            The layer seems to be locked by someone else. GetFileLock(null).LockOwnerUser tells you who that is
            </summary>
        </member>
        <member name="T:CSharpFramework.Layer.LayerFileStatus_e">
            <summary>
            Internal status enum when updating layer
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.LayerFileStatus_e.NotModified">
            <summary>
            The layer has not been modified according to file stamp
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.LayerFileStatus_e.Modified">
            <summary>
            The layer has been changed externally
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.LayerFileStatus_e.NewLayer">
            <summary>
            This layer is new
            </summary>
        </member>
        <member name="F:CSharpFramework.Layer.LayerFileStatus_e.Deleted">
            <summary>
            This layer seems to be deleted
            </summary>
        </member>
        <member name="T:CSharpFramework.LayerNameComparer">
            <summary>
            Comparer class to sort layers by name
            </summary>
        </member>
        <member name="M:CSharpFramework.LayerNameComparer.#ctor(System.Windows.Forms.SortOrder)">
            <summary>
            Constructor
            </summary>
            <param name="order">alphabetical order</param>
        </member>
        <member name="M:CSharpFramework.LayerNameComparer.Compare(System.Object,System.Object)">
            <summary>
            Implements IComparer
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.BoolUITypeEditor">
            <summary>
            UI Type editor that shows a checkmark control next to the true/false value
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Vector3D">
            <summary>
            Vector class for a 3D vector with double precision components
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.#ctor(CSharpFramework.Math.Vector3D)">
            <summary>
            Constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.Normalize">
            <summary>
            Normalize the vector. Does not throw exception if length is zero
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.GetLength">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.GetLengthSqr">
            <summary>
            Returns the length square of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.CrossProduct(CSharpFramework.Math.Vector3D,CSharpFramework.Math.Vector3D)">
            <summary>
            Computes the cross product between 2 vectors
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.GetCrossProduct(CSharpFramework.Math.Vector3D)">
            <summary>
            Returns the cross product between this and the other vector
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.op_Equality(CSharpFramework.Math.Vector3D,CSharpFramework.Math.Vector3D)">
            <summary>
            Checks for equality
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.op_Inequality(CSharpFramework.Math.Vector3D,CSharpFramework.Math.Vector3D)">
            <summary>
            Checks for equality
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.op_UnaryNegation(CSharpFramework.Math.Vector3D)">
            <summary>
            Negates the vector
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.op_Addition(CSharpFramework.Math.Vector3D,CSharpFramework.Math.Vector3D)">
            <summary>
            Returns the sum of two vectors
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.op_Subtraction(CSharpFramework.Math.Vector3D,CSharpFramework.Math.Vector3D)">
            <summary>
            Subtracts v2 from v1
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.DotProduct(CSharpFramework.Math.Vector3D,CSharpFramework.Math.Vector3D)">
            <summary>
            Static version of the dor product
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.op_Multiply(CSharpFramework.Math.Vector3D,CSharpFramework.Math.Vector3D)">
            <summary>
            Dot product
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.op_Multiply(CSharpFramework.Math.Vector3D,System.Double)">
            <summary>
            Multiplies by a scalar.
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.op_Multiply(System.Double,CSharpFramework.Math.Vector3D)">
            <summary>
            Multiplies by a scalar.
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.op_Division(CSharpFramework.Math.Vector3D,System.Double)">
            <summary>
            Devides by a scalar
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.GetHashCode">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.ToString">
            <summary>
            Converts this vector to readable string of type (x, y)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.Parse(System.String)">
            <summary>
            Tries to parse the string. The string should be compatible to the ToString result.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.Equals(System.Object)">
            <summary>
            Indicates whether this vector equals another. Other type must be a vector, too
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.System#ICloneable#Clone">
            <summary>
            Clones the vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.Clone">
            <summary>
            Clones the vector (return type is vector)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called while de-serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector3D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:CSharpFramework.Math.Vector3D.Zero">
            <summary>
            Predefined vector (0,0,0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector3D.XAxis">
            <summary>
            Predefined vector (1,0,0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector3D.YAxis">
            <summary>
            Predefined vector (0,1,0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector3D.ZAxis">
            <summary>
            Predefined vector (0,0,1)
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector3D.X">
            <summary>
            Access the x-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector3D.Y">
            <summary>
            Access the y-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector3D.Z">
            <summary>
            Access the z-coordinate
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Vector3DObjectConverter">
            <summary>
            Object converter for vector class
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector3DObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3DObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3DObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3DObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector3DObjectConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function - do not support standard values
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Math.Matrix3D">
            <summary>
            Matrix class for 3x3 rotation matrices with double precision components
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.#ctor(CSharpFramework.Math.Matrix3D)">
            <summary>
            Constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.#ctor(System.Double[])">
            <summary>
            Constructor
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.Set(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the matrix as 9 elements
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.SetIdentity">
            <summary>
            Set matrix to identity
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.GetDeterminant">
            <summary>
            Returns the determinant of the matrix (Sarrus' rule)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.Transpose">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.Transpose(CSharpFramework.Math.Matrix3D)">
            <summary>
            Static version of Transpose
            </summary>
            <param name="matrix"></param>
            <returns>transposed matrix</returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.op_Equality(CSharpFramework.Math.Matrix3D,CSharpFramework.Math.Matrix3D)">
            <summary>
            Check equality
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.op_Inequality(CSharpFramework.Math.Matrix3D,CSharpFramework.Math.Matrix3D)">
            <summary>
            Check equality
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.op_Multiply(CSharpFramework.Math.Matrix3D,CSharpFramework.Math.Matrix3D)">
            <summary>
            Multiply two matrices
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.op_Multiply(CSharpFramework.Math.Matrix3D,CSharpFramework.Math.Vector3D)">
            <summary>
            Transform vector by matrix
            </summary>
            <param name="matrix"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.Transform(CSharpFramework.Math.Matrix3D,CSharpFramework.Math.Vector3D)">
            <summary>
            Static function version of matrix*vector
            </summary>
            <param name="matrix"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.Equals(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.GetHashCode">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.ToString">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.Parse(System.String)">
            <summary>
            Tries to parse the string. The string should be compatible to the ToString result.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.System#ICloneable#Clone">
            <summary>
            Clone matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.Clone">
            <summary>
            Clones the matrix (return type is matrix)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when de-serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:CSharpFramework.Math.Matrix3D.Identity">
            <summary>
            Identity matrix
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Matrix3D.COMPONENT_COUNT">
            <summary>
            Number of components for this matrix type
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3D.M11">
            <summary>
            Matrix element at 1-based index [1,1].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3D.M12">
            <summary>
            Matrix element at 1-based index [1,2].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3D.M13">
            <summary>
            Matrix element at 1-based index [1,3].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3D.M21">
            <summary>
            Matrix element at 1-based index [2,1].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3D.M22">
            <summary>
            Matrix element at 1-based index [2,2].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3D.M23">
            <summary>
            Matrix element at 1-based index [2,3].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3D.M31">
            <summary>
            Matrix element at 1-based index [3,1].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3D.M32">
            <summary>
            Matrix element at 1-based index [3,2].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3D.M33">
            <summary>
            Matrix element at 1-based index [3,3].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3D.Item(System.Int32)">
            <summary>
            Access matrix as an array of 9 elements
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Math.Matrix3D.Item(System.Int32,System.Int32)">
            <summary>
            Access matrix as 2D array of type [row, column]
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Matrix3DObjectConverter">
            <summary>
            Object converter for matrix class
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3DObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3DObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3DObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3DObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix3DObjectConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function - do not support standard values
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Dialogs.OpenFileDlg">
            <summary>
            Dialog for opening a file in a project. With this dialog you cannot switch to any other device on your machine, since it is thought to be used for files that are located inside the project folder.
            If you want to select files that are located on other devices we recommend to use the standard .net dialogs
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.OpenFileDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.OpenFileDlg.#ctor(System.String,System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Create a Open File Dialog with predefined parameters.
            </summary>
            <param name="caption">The caption of the dialog</param>
            <param name="description">A short descriptive text, which will be shown inside the dialog</param>
            <param name="fileName">The absolute or relative filename of the desired destination or null</param>
            <param name="multiSelect">Allow multi file selection (true) or not (false)</param>
            <param name="filterExtensions">An array of filter extensions or null to extract it from the specified filename</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.OpenFileDlg.OpenStandardOpenFileDialog(System.Windows.Forms.IWin32Window,System.String,System.String@,System.String,System.String[])">
            <summary>
            Static helper method to re-direct file open requests to the standard file browser dialog
            </summary>
            <param name="owner"></param>
            <param name="initialDir"></param>
            <param name="filename"></param>
            <param name="caption"></param>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.OpenFileDlg.ShowDialog">
            <summary>
            Show the dialog
            </summary>
            <returns>Standard dialog result</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.OpenFileDlg.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Show the dialog
            </summary>
            <returns>Standard dialog result</returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.OpenFileDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.OpenFileDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.OpenFileDlg.OnOK(System.Object,System.EventArgs)">
            <summary>
            OK button pressed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.OpenFileDlg.folderTreeView1_AfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Selection has changed
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.OpenFileDlg.folderTreeView1_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Double click on a folder
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:CSharpFramework.Dialogs.OpenFileDlg.Caption">
            <summary>
            Text displayed in dialog title and caption bar
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.OpenFileDlg.Description">
            <summary>
            Test displayed as caption bar description
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.OpenFileDlg.InitialDirectory">
            <summary>
            Main root directory of the browser
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.OpenFileDlg.ShowBaseData">
            <summary>
            Flag that determines whether the basedata folder is being shown
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.OpenFileDlg.Filter">
            <summary>
            Filter to use. eg. {".bmp",".jpg"} in LOWERCASE!
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.OpenFileDlg.FileName">
            <summary>
            Returns the file that was selected.
            Eventually we will also use the filename for the starting file
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.OpenFileDlg.FileNames">
            <summary>
            If multi-selection is enabled this will return the selected filenames (absolute paths).
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.OpenFileDlg.MultiSelection">
            <summary>
            Gets or sets whether multi-selection is enabled in the open file dialog.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.OpenFileDlg.BrowseDirectoriesOnly">
            <summary>
            If enabled, this dialog can be used to browse a directory name. Files are hidden
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.OpenFileDlg.ThumbnailProvider">
            <summary>
            Associates a thumbnail provider with this dialog
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.OpenFileDlg.ShowPreview">
            <summary>
            If enabled, thumbnail previews can be displayed
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.OpenFileDlg.RelativeFileName">
            <summary>
            Gets the filename relative to InitialDirectory
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.SourceCodeEditorPanel">
            <summary>
            Panel for editing source code.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.SourceCodeEditorPanel.#ctor(CSharpFramework.Docking.DockingContainer)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.SourceCodeEditorPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.SourceCodeEditorPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.SourceCodeEditorPanel.ClearHistory">
            <summary>
            Clears the history of the scintilla editor control, e.g. after loading a
            new document from file.
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SourceCodeEditorPanel.ScriptText">
            <summary>
            Returns the scintilla source control
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SourceCodeEditorPanel.LastChange">
            <summary>
            Returns the last change date of the text
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SourceCodeEditorPanel.CreatedPath">
            <summary>
            Returns the absolute path from where the doc was open/created
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.SourceCodeEditorPanel.ScintillaControl">
            <summary>
            Returns the source control scintillaNet box
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.FindDuplicatesPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.FindDuplicatesPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.FindDuplicatesPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.FindDuplicatesPanel.treeView_Results_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Process the OnKeyDown event for the shape tree view
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:CSharpFramework.Dialogs.FindDuplicatesPanel.Comparer">
            <summary>
            This global instance of the shape comparer is used to compare pairs of shapes for equality. As for the return value of CompareShapes, only
            results of ==0 and !=0 are relevant.
            This instance can be globally replaced by custom compare functions. The properties of this object are shown in the property grid.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.ConfigureRendererComponentsDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ConfigureRendererComponentsDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ConfigureRendererComponentsDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.ToolStripSplitButtonCheckable">
            <summary>
            Adds 'CheckState' functionality to the default ToolStripSplitButton.
            </summary>
        </member>
        <member name="T:CSharpFramework.BaseTypes.ShapeReference">
            <summary>
            Class that represents a typed object reference
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.ShapeReference.ShapePath">
            <summary>
            Gets/sets the shape path of the object reference
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.ShapeReference.Shape">
            <summary>
            Gets/sets the shape of the object reference
            </summary>
        </member>
        <member name="T:CSharpFramework.PickHandlers.IPickHandler">
            <summary>
            IPickHandler is a pure virtual interface to register a respond to a click into the engine view.
            A pick handler can be globally registered (one at a time) and the next click into the engine view will notify the pick handler.
            Examples for pick handler implementations are material picking or height picking in the terrain editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.PickHandlers.IPickHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.PickHandlers.IPickHandler.OnPick(System.Windows.Forms.MouseEventArgs,CSharpFramework.Contexts.KeyModifier)">
            <summary>
            Gets called when the users clicks on the view.
            Override this function to implement your pick behaviour.
            You need to call the base class to release the pick handler again.
            </summary>
            <param name="e">mouse events</param>
            <param name="eKeyMod">keyboard modifier</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PickHandlers.IPickHandler.OnCancel">
            <summary>
            Gets called when the pick handler is aborted (via escape key)
            Override this function to react on the cancel event.
            </summary>
        </member>
        <member name="M:CSharpFramework.PickHandlers.IPickHandler.ScreenOutput(CSharpFramework.VisionViewBase)">
            <summary>
            Overridable that is called for the active pick handler to output messages on screen. This default implementation prints
            the string returned by the virtual ScreenMessage property to the upper left corner of the screen.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.PickHandlers.IPickHandler.PickMaterial(System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Helper function that gets the material at the current mouse position
            </summary>
            <param name="e">mouse events</param>
            <param name="bPickMeshMaterial">if true, pick the mesh's material rather than the visible material</param>
            <returns>picked material, or null if nothing was picked</returns>
        </member>
        <member name="P:CSharpFramework.PickHandlers.IPickHandler.ScreenMessage">
            <summary>
            Optional screen message that is written to upper left corner of the screen when the pick handler is active
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ShapeReferencePicker.PickHandler.#ctor(CSharpFramework.DynamicProperties.DynamicPropertyCollection,System.ComponentModel.PropertyDescriptor)">
            <summary>
            This version for dynamic properties
            </summary>
            <param name="Instance"></param>
            <param name="Descriptor"></param>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ShapeReferencePicker.PickHandler.#ctor(CSharpFramework.Shapes.ShapeBase,System.ComponentModel.PropertyDescriptor)">
            <summary>
            This version for a shape property
            </summary>
            <param name="Instance"></param>
            <param name="Descriptor"></param>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ShapeReferencePicker.PickHandler.TraceShape(System.Int32,System.Int32)">
            <summary>
            Traces a shape using the ray under the 2D mouse position
            </summary>
            <param name="iScreenX">Mouse x position</param>
            <param name="iScreenY">Mouse y position</param>
            <returns>The traced shape (or null)</returns>
        </member>
        <member name="T:CSharpFramework.Actions.ChangeLayerVisibilityAction">
            <summary>
            This action changes the visible status of a layer (checkmark in view)
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.ChangeLayerVisibilityAction.#ctor(CSharpFramework.Layer,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="layer">The layer that should change visible status</param>
            <param name="bNewVis">The new visible status</param>
        </member>
        <member name="M:CSharpFramework.Actions.ChangeLayerVisibilityAction.Do">
            <summary>
            Overidden Do function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.ChangeLayerVisibilityAction.Undo">
            <summary>
            Overridden Undo function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.ChangeLayerVisibilityAction.ShortName">
            <summary>
            Short name of this action
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.ChangeLayerVisibilityAction.LongName">
            <summary>
            Long name of this action
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.ChangeLayerVisibilityAction.Valid">
            <summary>
            Overridden valid function (checks layer editable flag)
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.AddShapesAction">
            <summary>
            Action that adds a collection of shapes
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.AddShapesAction.CreateAddShapesAction(CSharpFramework.ShapeCollection,CSharpFramework.Shapes.ShapeBase,CSharpFramework.Layer,System.Boolean,System.String)">
            <summary>
            Instead of using the constructor of AddShapesAction, please use this function to create a new instance. Since this will use the factory where the user can inject his own AddShapesAction factory
            </summary>
            <param name="shapes">Collection of shapes to be added</param>
            <param name="parent">The parent shape to add the collection</param>
            <param name="layer">The layer to add the collection</param>
            <param name="bCreateUniqueName">Ceate unique shape names for each shap e in the collection, e.g. light1, light2,...</param>
            <param name="startName">The first part of the action name, e.g. "Add" or "Paste". Nice for the menu.</param>
            <returns>A new instance of AddShapesAction</returns>
        </member>
        <member name="M:CSharpFramework.Actions.AddShapesAction.#ctor(CSharpFramework.ShapeCollection,CSharpFramework.Shapes.ShapeBase,CSharpFramework.Layer,System.Boolean,System.String)">
            <summary>
            Constructor that takes a collection of shapes to be added
            </summary>
            <param name="shapes">Collection of shapes to be added</param>
            <param name="parent">The parent shape to add the collection</param>
            <param name="layer">The layer to add the collection</param>
            <param name="bCreateUniqueName">Ceate unique shape names for each shap e in the collection, e.g. light1, light2,...</param>
            <param name="startName">The first part of the action name, e.g. "Add" or "Paste". Nice for the menu.</param>
        </member>
        <member name="P:CSharpFramework.Actions.AddShapesAction.Valid">
            <summary>
            Overridden valid function
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.RemoveShapesAction">
            <summary>
            Action that removes a collection of shapes
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.RemoveShapesAction.CreateRemoveShapesAction(CSharpFramework.ShapeCollection,System.String)">
            <summary>
            Instead of using the constructor of RemoveShapesAction, please use this function to create a new instance. Since this will use the factory where the user can inject his own RemoveShapesAction factory
            </summary>
            <param name="shapes">The shape collection to be removed from the scene</param>
            <param name="startName">The first part of the action name, e.g. "Cut" or "Remove". Nice for the menu.</param>
            <returns>A new instance of RemoveShapesAction</returns>
        </member>
        <member name="M:CSharpFramework.Actions.RemoveShapesAction.#ctor(CSharpFramework.ShapeCollection,System.String)">
            <summary>
            Constructor that takes a collection of shapes to be removed
            </summary>
            <param name="shapes">The shape collection to be removed from the scene</param>
            <param name="startName">The first part of the action name, e.g. "Cut" or "Remove". Nice for the menu.</param>
        </member>
        <member name="P:CSharpFramework.Actions.RemoveShapesAction.Valid">
            <summary>
            Overridden valid function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.RemoveShapesAction.IconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
        </member>
        <member name="T:CSharpFramework.ActionEventArgs">
            <summary>
            Event notification for performing actions
            </summary>
        </member>
        <member name="M:CSharpFramework.ActionEventArgs.#ctor(CSharpFramework.IAction,CSharpFramework.ActionEventArgs.State)">
            <summary>
            Constructor that takes the action and the action state
            </summary>
            <param name="_action"></param>
            <param name="_state"></param>
        </member>
        <member name="F:CSharpFramework.ActionEventArgs.state">
            <summary>
            The current action processing state
            </summary>
        </member>
        <member name="F:CSharpFramework.ActionEventArgs.action">
            <summary>
            The currently processed action
            </summary>
        </member>
        <member name="P:CSharpFramework.ActionEventArgs.ActionPerformed">
            <summary>
            Indicates whether the state is any of EndAdd, EndRedo or EndUndo. These are actually the relevant states
            that are triggered after an action has been executed
            </summary>
        </member>
        <member name="T:CSharpFramework.ActionEventArgs.State">
            <summary>
            The current action state
            </summary>
        </member>
        <member name="F:CSharpFramework.ActionEventArgs.State.BeginAdd">
            <summary>
            Used before an action is added to the action stack
            </summary>
        </member>
        <member name="F:CSharpFramework.ActionEventArgs.State.EndAdd">
            <summary>
            Used after an action is added to the action stack
            </summary>
        </member>
        <member name="F:CSharpFramework.ActionEventArgs.State.BeginUndo">
            <summary>
            Used before the Undo action is performed
            </summary>
        </member>
        <member name="F:CSharpFramework.ActionEventArgs.State.EndUndo">
            <summary>
            Used after the Undo action has been performed
            </summary>
        </member>
        <member name="F:CSharpFramework.ActionEventArgs.State.BeginRedo">
            <summary>
            Used before the Do action is performed
            </summary>
        </member>
        <member name="F:CSharpFramework.ActionEventArgs.State.EndRedo">
            <summary>
            Used after the Do action has been performed
            </summary>
        </member>
        <member name="F:CSharpFramework.ActionEventArgs.State.Clear">
            <summary>
            Used when the action stack is cleared
            </summary>
        </member>
        <member name="T:CSharpFramework.ActionEventHandler">
            <summary>
            Delegate that sends action changed events
            </summary>
        </member>
        <member name="T:CSharpFramework.CollectionDependentActionsEventHandler">
            <summary>
            Delegate for the CollectDependentActions event
            </summary>
        </member>
        <member name="T:CSharpFramework.ActionStack">
            <summary>
            Class that represents a do/undo stack. The EngineManager has one static instance of it
            </summary>
        </member>
        <member name="M:CSharpFramework.ActionStack.#ctor">
            <summary>
            Initilaises the action stack
            </summary>
        </member>
        <member name="M:CSharpFramework.ActionStack.RemoveActionAt(System.Int32)">
            <summary>
            wrapper around the CollectionBase.RemoveAt function, that additionally calls the OnDispose function
            </summary>
            <param name="iIndex"></param>
        </member>
        <member name="M:CSharpFramework.ActionStack.RemoveAfter(System.Int32)">
            <summary>
            Collection implementation
            </summary>
            <param name="index">index (exclusive) after which actions should be removed from stack</param>
        </member>
        <member name="M:CSharpFramework.ActionStack.SetMaxSize(System.Int32)">
            <summary>
            Sets the maximum number of actions in the stack. Can be an arbitrary number
            </summary>
            <param name="iCount">Number of operations in the stack</param>
        </member>
        <member name="M:CSharpFramework.ActionStack.Reset">
            <summary>
            Resets the stack
            </summary>
        </member>
        <member name="M:CSharpFramework.ActionStack.Add(CSharpFramework.IAction)">
            <summary>
            Adds an action to the stack. Performs the Do() action
            </summary>
            <param name="action">action intance to add</param>
        </member>
        <member name="M:CSharpFramework.ActionStack.Undo">
            <summary>
            Performs undo action on the stack (if possible)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ActionStack.Redo">
            <summary>
            Performs redo action on the stack (if possible)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ActionStack.ProcessStackToIndex(System.Int32)">
            <summary>
            Performs a number of Undos/Redos until stack reaches target index
            </summary>
            <param name="iTargetIndex">Target index on the stack (can be larger or smaller than current stack position)</param>
        </member>
        <member name="M:CSharpFramework.ActionStack.StartGroup(System.String)">
            <summary>
            Starts a new group action. All further calls of Add() will go into this group. A group has to be closed again.
            Alternatively, a group action can be added that contans sub-actions
            </summary>
            <param name="groupName">Name of the group to show up in the history</param>
        </member>
        <member name="M:CSharpFramework.ActionStack.EndGroup">
            <summary>
            Closes the group.
            </summary>
        </member>
        <member name="P:CSharpFramework.ActionStack.Item(System.Int32)">
            <summary>
            Collection implementation
            </summary>
        </member>
        <member name="P:CSharpFramework.ActionStack.StackIndex">
            <summary>
            Get the current stack position
            </summary>
        </member>
        <member name="P:CSharpFramework.ActionStack.UndoCount">
            <summary>
             Get the number of possible Undo actions
            </summary>
        </member>
        <member name="P:CSharpFramework.ActionStack.RedoCount">
            <summary>
             Get the number of possible Redo actions
            </summary>
        </member>
        <member name="P:CSharpFramework.ActionStack.UndoShortName">
            <summary>
             Name of the latest undo action on the stack (useful for menu entries)
            </summary>
        </member>
        <member name="P:CSharpFramework.ActionStack.RedoShortName">
            <summary>
            Name of the next redo action (useful for menu entries)
            </summary>
        </member>
        <member name="E:CSharpFramework.ActionStack.ActionEvent">
            <summary>
            Event handler for action event
            </summary>
        </member>
        <member name="E:CSharpFramework.ActionStack.CollectDependentActions">
            <summary>
            Event which is triggered by the action stack to collect any dependent actions.
            Dependent actions will be added to stack as part of the "main" action
            and will thus be treated correspondingly in undo/redo operations.
            
            You can use this event to attach own actions to a triggered action, e.g. for
            executing a specific behaviour when a shape is removed. Simply add your own
            action to "dependentPreActionsOut" or "dependentPostActionsOut" parameter
            that is passed to the event listener (dependent on whether your action shall 
            be executed before or after the original action).
            The original action is passed as a parameter, so that you can verify whether it is
            relevant for you.
            </summary>
        </member>
        <member name="T:CSharpFramework.Serialization.FileLockRCS">
            <summary>
            Implementation of the IFileLock interface for revision control system (RCS) file locks.
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.FileLockRCS.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor. Takes the file to lock as a parameter.
            </summary>
            <param name="fileName">Name of the file to get a lock for (absolute path)</param>
        </member>
        <member name="M:CSharpFramework.Serialization.FileLockRCS.TryLock">
            <summary>
            RCS lock: Tries to get the RCS lock
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.FileLockRCS.Unlock">
            <summary>
            RCS lock: removes the lock if the file was unmodified
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.FileLockRCS.OwnsLock">
            <summary>
            RCS lock: Indicates whether the FileLock instance has the lock for the file
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.FileLockRCS.LockFileExists">
            <summary>
            RCS lock: Indicates whether the physical lock file exists.
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.FileLockRCS.IsLocked">
            <summary>
            Checks whether the file is either write protected or locked by any process. This function also
            returns a locked state if the file is locked by this instance. 
            
            Use the OwnsLock property for checking whether the FileLock instance has the
            write lock to the file.
            If this function indicated true, the LockOwnerMachine and LockOwnerUser propery is valid afterwards.
            </summary>
            <returns>"true" if the file is locked by any process, otherwise false</returns>
        </member>
        <member name="T:CSharpFramework.vForgePropertyDescriptor">
            <summary>
            This class should be used in vForge as base class for custom propertydescriptors instead of using directly the .net PropertyDescriptor
            It holds the inner property descriptor and offers a getter for it. 
            </summary>
        </member>
        <member name="P:CSharpFramework.vForgePropertyDescriptor.InnerDynamicProperty">
            <summary>
            the very inner property descriptor
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.FilenameEditor">
            <summary>
            Editor to pick a filename
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FilenameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden UITypeEditor function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FilenameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overridden UITypeEditor function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.FilenameCreator">
            <summary>
            Editor to create a filename
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FilenameCreator.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden UITypeEditor function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FilenameCreator.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overridden UITypeEditor function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.BitmapBrowserEditor">
            <summary>
            Editor for picking a bitmap
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.BitmapBrowserEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.BitmapBrowserEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Overridden function : Paints a preview image if possible
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.BitmapBrowserEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden UITypeEditor function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.BitmapBrowserEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overridden UITypeEditor function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.FileDialogFilterAttribute">
            <summary>
            attribute for file extension filter
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FileDialogFilterAttribute.#ctor(System.String[])">
            <summary>
            Define a filter for the UIFilenameEditor.
            The filter to use in the file dialog in UIFilenameEditor. 
            The following is an example of a filter string: {".txt",".bmp"} in LOWERCASE!
            </summary>
            <param name="filter">Array of filter strings</param>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.FileDialogFilterAttribute.Filter">
            <summary>
            Access the filter strings
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.ThumbnailFormatAttribute">
            <summary>
            Attribute for a simple thumbnail provider. It creates an image provider of type StandardThumbnailProvider and forwards the conversion format strings.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ThumbnailFormatAttribute.#ctor(System.String[])">
            <summary>
            The filename conversion format(s). See class StandardThumbnailProvider
            </summary>
            <param name="conversionFormats"></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ThumbnailFormatAttribute.#ctor(System.String)">
            <summary>
            The filename conversion format(s). See class StandardThumbnailProvider
            </summary>
            <param name="conversionFormat"></param>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.ThumbnailFormatAttribute.ImageProvider">
            <summary>
            The image provider instance that can be used for the file dialog
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.ImageProviderAttribute">
            <summary>
            Attribute class to provide an image provider of a custom class
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ImageProviderAttribute.#ctor(System.Type)">
            <summary>
            Constructor. Takes the provider class type. That class must implement the IImageProvider interface
            </summary>
            <param name="providerClass">An instance of this class is created and used as the image provider</param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ImageProviderAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            onstructor. Takes the provider class type and a constructor parameter list. That class must implement the IImageProvider interface
            </summary>
            <param name="providerClass">An instance of this class is created and used as the image provider</param>
            <param name="constructorParams">List of objects that are passed to the constructor</param>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.ImageProviderAttribute.ImageProvider">
            <summary>
            Returns an instance of the image provider of class that is specified in the constructor
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.AlternativeTextureDisplayAttribute">
            <summary>
            attribute for BitmapBrowserEditor. Allows for displaying an alternative image filename
            if the filename contains a defined sub-string.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.AlternativeTextureDisplayAttribute.#ctor(System.String,System.String)">
            <summary>
            Attribute for BitmapBrowserEditor. Allows for displaying an alternative image filename
            if the filename contains a defined sub-string.
            Example: AlternativeTextureDisplay("%","PerSectorTexture.png")
            </summary>
            <param name="filter">Array of filter strings</param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.AlternativeTextureDisplayAttribute.ResolveImageFilename(System.String,System.String@)">
            <summary>
            Resolves the incoming texture filename. If it matches the criteria of this attribute,
            the alternative filename is returned
            </summary>
            <param name="inFile"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.FileCreateDialogAllowOverwriteAttribute">
            <summary>
            attribute to determine if the file creator is allowed to overwrite files
            the default is to prevent from selecting an existing file
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FileCreateDialogAllowOverwriteAttribute.#ctor(System.Boolean)">
            <summary>
            Define if the create dialog can select an existing file.
            </summary>
            <param name="bAllowOverwrite">Is it allowed to overwrite a file</param>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.FileCreateDialogAllowOverwriteAttribute.AllowOverwrite">
            <summary>
            Access the allow overwrite boolean
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.FileCreateDialogFolderNameReturnAttribute">
            <summary>
            attribute to determine file creator returns folder name.
            the default is to return filename
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FileCreateDialogFolderNameReturnAttribute.#ctor(System.Boolean)">
            <summary>
            Define if the create dialog can select an existing file.
            </summary>
            <param name="bAllowOverwrite">Is it allowed to overwrite a file</param>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.FileCreateDialogFolderNameReturnAttribute.FolderReturn">
            <summary>
            Access the allow overwrite boolean
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.FileCreateDialogAskOverwriteAttribute">
            <summary>
            attribute to determine if the file creator is allowed to overwrite files
            the default is to prevent from selecting an existing file
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FileCreateDialogAskOverwriteAttribute.#ctor(System.Boolean)">
            <summary>
            Define if the create dialog can select an existing file.
            </summary>
            <param name="bAllowOverwrite">Is it allowed to overwrite a file</param>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.FileCreateDialogAskOverwriteAttribute.AskOverwrite">
            <summary>
            Access the allow overwrite boolean
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.PropertyLiveUpdateAttribute">
            <summary>
            Attribute that defines which property should be updated on the instance during live update of (Color-)changes.
            It is typically used together with the StandardColorDropDownEditor: Whenever the color changes in the color picker,
            the property defined by this attribute is updated. This should not be the color property itself. Rather stick to the
            implementation in the standard shapes (e.g. DynLightShape.LightColor, DynLightShape.LightColorLiveUpdate)
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.PropertyLiveUpdateAttribute.#ctor(System.String)">
             <summary>
            
             </summary>
             <param name="conversionFormats"></param>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.StandardColorDropDownEditor">
            <summary>
            Editor for showing the ColorPickerControlEx control as a drop down for standard System.Drawing.Color instances.
            This attribute should be used together with the PropertyLiveUpdateAttribute so color chanegs are shown instantly.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.StandardColorDropDownEditor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.StandardColorDropDownEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.StandardColorDropDownEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overriden Edit value function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.CurveEditor">
            <summary>
            UITypeEditor that opens a modal curve editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.CurveEditor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.CurveEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.CurveEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.ColorCurveDialog">
            <summary>
            Dialog to display color curve editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ColorCurveDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ColorCurveDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ColorCurveDialog.TriggerCurveChanged">
            <summary>
            UI
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ColorCurveDialog.curveEditorBox_OnCurveChanged(System.Object,System.EventArgs)">
            <summary>
            This function is called whenever the curve is change in the curve editor control.
            Thus, the event will be forwarded and listeners from outside the curve editor dialog
            can listen to curve changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.ColorCurveDialog._originalCurves">
            <summary>
            This curve is used for keeping a reference to the original curve
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ColorCurveDialog.LoadColorCurvePresets">
            <summary>
            Helper function to load curve presets
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ColorCurveDialog.RestoreColorCurvePresets">
            <summary>
            Helper function to restore the default curve presets
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ColorCurveDialog.CreatePresetPreview(System.String,CSharpFramework.BaseTypes.ColorCurves)">
            <summary>
            Create a preset preview box
            </summary>
            <param name="name">Name of the preset</param>
            <param name="curve">Curve that is assigned tyo the gradient preview box</param>
            <returns>The gradient preview box</returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ColorCurveDialog.CanUsePresetName(System.String)">
            <summary>
            Check whether the given name can be used for a preset
            </summary>
            <param name="name">Name of Preset</param>
            <returns>TRUE if preset name is ok, FALSE otherwise</returns>
        </member>
        <member name="E:CSharpFramework.PropertyEditors.ColorCurveDialog.OnCurveChanged">
            <summary>
            Event that is triggered when the value changed
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.ColorCurveDialog.Curves">
            <summary>
            Gets or sets the curve for the editor. The set function clones it
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.ColorCurveDialog.CurvesInstantUpdate">
            <summary>
            Gets or sets the curve for the editor. These function should be used when instant update is required.
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.ColorCurveDialog.GridTimeMaximum">
            <summary>
            Gets or sets the Grid Time Maximum
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.ColorCurveDialog.DefaultColorCurvePresetPath">
            <summary>
            Gets the path to the directory with the (non-writeable) default curve presets
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.ColorCurveDialog.UserColorCurvePresetPath">
            <summary>
            Gets the path to the customized curve presets of the user
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.ColorCurveDialog.ColorCurveFileExtension">
            <summary>
            File extension of the single curve preset file (VSC - Vision Single Curve)
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.ColorCurveDialog.OnCurveChangedEventHandler">
            <summary>
            Delegate
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Vector4D">
            <summary>
            Vector class for a 3D vector with double precision components
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.#ctor(CSharpFramework.Math.Vector4D)">
            <summary>
            Constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.Normalize">
            <summary>
            Normalize the vector. Does not throw exception if length is zero
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.GetLength">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.GetLengthSqr">
            <summary>
            Returns the length square of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.op_Equality(CSharpFramework.Math.Vector4D,CSharpFramework.Math.Vector4D)">
            <summary>
            Checks for equality
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.op_Inequality(CSharpFramework.Math.Vector4D,CSharpFramework.Math.Vector4D)">
            <summary>
            Checks for equality
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.op_UnaryNegation(CSharpFramework.Math.Vector4D)">
            <summary>
            Negates the vector
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.op_Addition(CSharpFramework.Math.Vector4D,CSharpFramework.Math.Vector4D)">
            <summary>
            Returns the sum of two vectors
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.op_Subtraction(CSharpFramework.Math.Vector4D,CSharpFramework.Math.Vector4D)">
            <summary>
            Subtracts v2 from v1
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.DotProduct(CSharpFramework.Math.Vector4D,CSharpFramework.Math.Vector4D)">
            <summary>
            Static version of the dor product
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.op_Multiply(CSharpFramework.Math.Vector4D,CSharpFramework.Math.Vector4D)">
            <summary>
            Dot product
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.op_Multiply(CSharpFramework.Math.Vector4D,System.Double)">
            <summary>
            Multiplies by a scalar.
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.op_Multiply(System.Double,CSharpFramework.Math.Vector4D)">
            <summary>
            Multiplies by a scalar.
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.op_Division(CSharpFramework.Math.Vector4D,System.Double)">
            <summary>
            Devides by a scalar
            </summary>
            <param name="v"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.GetHashCode">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.ToString">
            <summary>
            Converts this vector to readable string of type (x, y)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.Parse(System.String)">
            <summary>
            Tries to parse the string. The string should be compatible to the ToString result.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.Equals(System.Object)">
            <summary>
            Indicates whether this vector equals another. Other type must be a vector, too
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.System#ICloneable#Clone">
            <summary>
            Clones the vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.Clone">
            <summary>
            Clones the vector (return type is vector)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called while de-serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Vector4D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:CSharpFramework.Math.Vector4D.Zero">
            <summary>
            Predefined vector (0,0,0,1)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector4D.XAxis">
            <summary>
            Predefined vector (1,0,0,0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector4D.YAxis">
            <summary>
            Predefined vector (0,1,0,0)
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Vector4D.ZAxis">
            <summary>
            Predefined vector (0,0,1,0)
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector4D.X">
            <summary>
            Access the x-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector4D.Y">
            <summary>
            Access the y-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector4D.Z">
            <summary>
            Access the z-coordinate
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Vector4D.W">
            <summary>
            Access the w-coordinate
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Vector4DObjectConverter">
            <summary>
            Object converter for vector class
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Vector4DObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4DObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4DObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4DObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Vector4DObjectConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function - do not support standard values
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Math.Matrix4D">
            <summary>
            Matrix class for 4x4 rotation matrices with double precision components
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m14"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m24"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
            <param name="m34"></param>
            <param name="m41"></param>
            <param name="m42"></param>
            <param name="m43"></param>
            <param name="m44"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.#ctor(CSharpFramework.Math.Matrix4D)">
            <summary>
            Constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.#ctor(System.Double[])">
            <summary>
            Constructor
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.Set(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the matrix from 16 source elements
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m14"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m24"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
            <param name="m34"></param>
            <param name="m41"></param>
            <param name="m42"></param>
            <param name="m43"></param>
            <param name="m44"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.SetIdentity">
            <summary>
            Set matrix to identity
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.Transpose">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.Transpose(CSharpFramework.Math.Matrix4D)">
            <summary>
            Static version of Transpose
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.op_Equality(CSharpFramework.Math.Matrix4D,CSharpFramework.Math.Matrix4D)">
            <summary>
            Check equality
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.op_Inequality(CSharpFramework.Math.Matrix4D,CSharpFramework.Math.Matrix4D)">
            <summary>
            Check equality
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.op_Multiply(CSharpFramework.Math.Matrix4D,CSharpFramework.Math.Matrix4D)">
            <summary>
            Multiply two matrices
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.op_Multiply(CSharpFramework.Math.Matrix4D,CSharpFramework.Math.Vector4D)">
            <summary>
            Transform vector by matrix
            </summary>
            <param name="matrix"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.op_Multiply(CSharpFramework.Math.Matrix4D,CSharpFramework.Math.Vector3D)">
            <summary>
            Transform vector by matrix. Uses W=1 so that translation is applied
            </summary>
            <param name="matrix"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.Transform(CSharpFramework.Math.Matrix4D,CSharpFramework.Math.Vector4D)">
            <summary>
            Static function version of matrix*vector
            </summary>
            <param name="matrix"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.Equals(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.GetHashCode">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.ToString">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.Parse(System.String)">
            <summary>
            Tries to parse the string. The string should be compatible to the ToString result.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.System#ICloneable#Clone">
            <summary>
            Clone matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.Clone">
            <summary>
            Clones the matrix (return type is matrix)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when de-serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:CSharpFramework.Math.Matrix4D.Identity">
            <summary>
            Identity matrix
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.Matrix4D.COMPONENT_COUNT">
            <summary>
            Number of components for this matrix type
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M11">
            <summary>
            Matrix element at 1-based index [1,1].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M12">
            <summary>
            Matrix element at 1-based index [1,2].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M13">
            <summary>
            Matrix element at 1-based index [1,3].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M14">
            <summary>
            Matrix element at 1-based index [1,4].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M21">
            <summary>
            Matrix element at 1-based index [2,1].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M22">
            <summary>
            Matrix element at 1-based index [2,2].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M23">
            <summary>
            Matrix element at 1-based index [2,3].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M24">
            <summary>
            Matrix element at 1-based index [2,4].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M31">
            <summary>
            Matrix element at 1-based index [3,1].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M32">
            <summary>
            Matrix element at 1-based index [3,2].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M33">
            <summary>
            Matrix element at 1-based index [3,3].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M34">
            <summary>
            Matrix element at 1-based index [3,4].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M41">
            <summary>
            Matrix element at 1-based index [4,1].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M42">
            <summary>
            Matrix element at 1-based index [4,2].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M43">
            <summary>
            Matrix element at 1-based index [4,3].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.M44">
            <summary>
            Matrix element at 1-based index [4,4].
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.TranslationVector">
            <summary>
            Gets or sets the translation vector
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.TranslationVector4">
            <summary>
            Gets or sets the translation vector
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.Scaling">
            <summary>
            Gets or sets the diagonal of the matrix
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.Item(System.Int32)">
            <summary>
            Access matrix as an array of 9 elements
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Math.Matrix4D.Item(System.Int32,System.Int32)">
            <summary>
            Access matrix as 2D array of type [row, column]
            </summary>
        </member>
        <member name="T:CSharpFramework.Math.Matrix4DObjectConverter">
            <summary>
            Object converter for matrix class
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4DObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4DObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4DObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4DObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.Matrix4DObjectConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function - do not support standard values
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.ClampRangeAttribute">
            <summary>
            Attribute for setting a specific clamped range for a dynamic property grid element.
            NOTE: This attribute is only applicable to DynamicProperties
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.ClampRangeAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="_fMin">min clamp value</param>
            <param name="_fMax">max clamp value</param>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.ClampRangeAttribute.fMin">
            <summary>
            Value range min
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.ClampRangeAttribute.fMax">
            <summary>
            Value range max
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.ClampRangeAttribute.Min">
            <summary>
            min of the value range
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.ClampRangeAttribute.Max">
            <summary>
            max of the value range 
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicPropertyType">
            <summary>
            Description of a dynamic property.
            Contains the information which is shared between all dynamic properties of this type
            (e.g. name and default value of the property)
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicPropertyType._name">
            <summary>
            name of the dynamic property (as displayed in the property panel)
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicPropertyType._displayName">
            <summary>
            Optional display name. Uses _name if null
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicPropertyType._nativeType">
            <summary>
            native type of the dynamic property (e.g. int, float, ...)
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicPropertyType._defaultValue">
            <summary>
            default value of the dynamic properties
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicPropertyType._description">
            <summary>
            description of the dynamic property (e.g. displayed as description in the property panel)
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicPropertyType._attributes">
            <summary>
            list of property attributes 
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.#ctor(System.String,System.Type,System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of the property</param>
            <param name="nativeType">native type of the property</param>
            <param name="defaultValue">default value of the property</param>
            <param name="description">description of the property</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddAttribute(System.Attribute)">
            <summary>
            Adds an attribute to the property
            </summary>
            <param name="newAttribute"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddFileBrowseAttribute(System.String[])">
            <summary>
            Helper function to add a file filter attribute to this property
            </summary>
            <param name="fileFilters">string array of file filters to use</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.SetOrderAttribute(System.Int32)">
            <summary>
            sets the value of order property attribute if it is already available on the prop
            </summary>
            <param name="order"></param>
            <returns>True if it could find and replace the order number on the attribute. False if it could not find the attribute</returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddPropertyOrderAttribute(System.Int32)">
            <summary>
            Helper function to add property order attribute
            </summary>
            <param name="fileFilters">string array of file filters to use</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddBitmapBrowseAttribute">
            <summary>
            Helper function to add a bitmap browse editor attribute to this property
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddBitmapBrowseAttribute(System.String)">
            <summary>
            Helper function to add a bitmap browse editor attribute to this property
            </summary>
            <param name="filters">List of supported image file extensions, separated by comma</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddScriptFileAttribute">
            <summary>
            Helper function to add a script file new/edit/browse editor attribute to this property
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddSceneObjectKeyAttribute(CSharpFramework.IEngineManager.ObjectKeyType_e)">
            <summary>
            Helper function to add a dropdown attribute that enumerates key strings of special scene objects such as entities
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddModelBrowseAttribute">
            <summary>
            Helper function to add a model file browse editor attribute to this property
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddAnyFileBrowseAttribute">
            <summary>
            Helper function to add a model file browse editor attribute to this property
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddAnyFileBrowseAttribute(System.String)">
            <summary>
            Helper function to add a model file browse editor attribute to this property
            </summary>
            <param name="filters">file filters, each separated by comma. E.g. ".xml,.lua"</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddCategoryAttribute(System.String)">
            <summary>
            Helper function to add a category attribute to this property
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddSliderAttribute(System.Single,System.Single,System.Int32)">
            <summary>
            Helper function to add a slider attribute to the property
            </summary>
            <param name="fMin">minimum value</param>
            <param name="fMax">maximum value</param>
            <param name="iSubDiv">number of subdivisions (or 0 for smooth)</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddClampAttribute(System.Single,System.Single)">
            <summary>
            Helper function to add a clamp attribute to the property
            </summary>
            <param name="fMin">minimum value</param>
            <param name="fMax">maximum value</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddBitmaskAttribute">
            <summary>
            Helper function to add a bitmask editor to the property.
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddStandardStringValuesAttribute(System.String,System.Boolean)">
            <summary>
            Helper function to a add a string converter attribute that queries specific standard string values from the object defined by key value.
            The object instance should implement the IStandardValueProvider interface to provide the default values.
            Example: Entity shapes provide Animation names through the "Animation" key.
            </summary>
            <param name="key"></param>
            <param name="bAllowEditing"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddStringListBitmaskAttribute(System.String)">
            <summary>
            Adds a StandardValueKeyAttribute attribute
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddIntListAttribute(System.Int32[])">
            <summary>
            Helper function to add a IntListTypeConverter type converter paired with a AllowedIntValuesAttribute attribute
            </summary>
            <param name="iList"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.AddFixedStringSizeAttribute(System.Int32)">
            <summary>
            Adds atributes to a string property to limit the number of characters to maximum n characters
            </summary>
            <param name="iMaxLength"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.GetAttribute(System.Type,System.Boolean)">
            <summary>
            Returns the first occurrence (or null) of an attribute with the passed type
            </summary>
            <param name="type"></param>
            <param name="bAllowDerived"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.GetEnumValues">
            <summary>
            Returns the available standard values for enumeration property types
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.IsValidEnumValue(System.Object)">
            <summary>
            Determines whether the passed value is part of the standard enumation values
            </summary>
            <param name="valueIn">object value</param>
            <returns>true if the passed value is part of the enumeration standard values</returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.FindMatchingEnumValue(System.Object)">
            <summary>
            Searches for a matching enumeration value using the Equals function
            </summary>
            <param name="valueIn">enumeration value to search for (by value comparison)</param>
            <returns>matching enumeration value in this propert type</returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization function
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.Clone">
            <summary>
            Clones this property type
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyType.CustomAttributeProvider">
            <summary>
            Allows for installing an attribute provider for custom editor hint strings in native variable tables.
            By default no provider is installed. Please refer to the RTTI chapter of the documentation for more information.
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyType.Name">
            <summary>
            Gets or sets the name of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyType.DisplayName">
            <summary>
            Gets or sets the the name for displaying in the property grid. If null (default) the Name property is used
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyType.NativeType">
            <summary>
            Gets or sets the native type of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyType.DefaultValue">
            <summary>
            Gets or sets the default value of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyType.Description">
            <summary>
            Gets or sets the description of the property, as displayed in the property grid
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyType.Attributes">
            <summary>
            Gets the attributes that have been added to the property
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyType.IsEnum">
            <summary>
            Indicates whether the dynamic property type is an enumeration
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicPropertyType.IAttributeProvider">
            <summary>
            Interface that allows for installing custom attributes on the passed property type. Users can install a global
            instance of their own implementation of this interface via static DynamicPropertyType.CustomAttributeProvider setter.
            That way custom attributes/property editors can be installed.
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyType.IAttributeProvider.ParseEditorHintString(CSharpFramework.DynamicProperties.DynamicPropertyType,System.String)">
            <summary>
            Called by the RTTI system for every new variable table entry that has a non-standard editor hint string.
            Standard hint strings (such as "Slider(0,100,100)") are parsed before this function is called.
            New attributes can be added via propertyType.AddAttribute.
            </summary>
            <param name="propertyType">The property type that corresponds to the variable table entry</param>
            <param name="hintString">The hint string as specified in the C++ variable table macro</param>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicEnumPropertyType">
            <summary>
            Description of a dynamic enumeration property type.
            Additionally contains the information about the standard values for the enumeration
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicEnumPropertyType._enumValues">
            <summary>
            Standard values of this enumeration
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicEnumPropertyType.#ctor(System.String,System.Type,System.Object[],System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of the property</param>
            <param name="nativeType">native type of the property</param>
            <param name="enumValues">available standard values for the enumeration</param>
            <param name="defaultValue">default value of the property</param>
            <param name="description">description of the property</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicEnumPropertyType.GetEnumValues">
            <summary>
            Returns the available standard values for the enumeration
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicEnumPropertyType.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicEnumPropertyType.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization function
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicEnumPropertyType.IsEnum">
            <summary>
            Indicates whether the dynamic property type is an enumeration
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicProperty">
            <summary>
            Representation of a dynamic property instance. Holds the instance-relevant data (e.g. property value)
            references the type definition (DynamicPropertyType).
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicProperty._value">
            <summary>
            Current value of the dynamic property
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicProperty._propertyType">
            <summary>
            Type definition of the property
            </summary>
        </member>
        <member name="F:CSharpFramework.DynamicProperties.DynamicProperty._readOnly">
            <summary>
            Indicates whether the property is set to readonly
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicProperty.#ctor(CSharpFramework.DynamicProperties.DynamicPropertyType)">
            <summary>
            Constructor
            </summary>
            <param name="propertyType">type definition of the property</param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicProperty.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicProperty.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization function
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicProperty.Clone">
            <summary>
            Clones the dynamic property instances
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicProperty.Value">
            <summary>
            Sets or gets the current value of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicProperty.PropertyType">
            <summary>
            Gets the type definition of the property
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicProperty.ReadOnly">
            <summary>
            Sets or gets the readonly state of the property. Note that the readonly
            state does not get serialized.
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicPropertyDescriptor">
            <summary>
            Custom Property Descriptor which gives access to the dynamic property data. Use to display the
            dynamic properties in the property grid.
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyDescriptor.#ctor(CSharpFramework.DynamicProperties.DynamicProperty)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyDescriptor.ComponentType">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyDescriptor.IsReadOnly">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyDescriptor.PropertyType">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyDescriptor.Description">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.DynamicProperties.DynamicPropertyDescriptor.Attributes">
            <summary>
            Overridden Attribute
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicPropertyConverter">
            <summary>
            Type Converter for displaying a dynamic property collection in the property grid
            
            Use the TypeConverter attribute to set this type converter for your dynamic property
            collection instance.
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overrriden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicPropertyConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Overridden function.
            
            Creates DynamicPropertyDescriptor instances for giving access to the dynamic properties. Additionally
            wraps the descriptors in UndoRedoPropertyDescriptor to provide undo/redo support.
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.DynamicEnumConverter">
            <summary>
            Type Converter for displaying a dynamic enumeration property as dropdown list in the property grid.
            Internally used by the DynamicEnumPropertyType class 
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicEnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates whether the converter support enumerations
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicEnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns the standard enumeration values of the DynamicPropertyType
            </summary>
            <param name="context">property context</param>
            <returns>standard enumeration values</returns>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.DynamicEnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Do not allow non-standard enumeration values.
            Fix for ticket #19607.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.FixedStringConverter">
            <summary>
            String converter that validates the maximum number of allowed characters and trims the string if it is too long. 
            The maximum length of a string can be specified via the FixedStringSizeAttribute atribute
            </summary>
        </member>
        <member name="T:CSharpFramework.DynamicProperties.FixedStringSizeAttribute">
            <summary>
            Attribute that works together with FixedStringConverter
            </summary>
        </member>
        <member name="M:CSharpFramework.DynamicProperties.FixedStringSizeAttribute.#ctor(System.Int32)">
            <summary>
            Constructor: Maximum number of allowed characters for the FixedStringConverter
            </summary>
            <param name="iMaxCharCount"></param>
        </member>
        <member name="T:CSharpFramework.Docking.MissingPanel">
            <summary>
            Special purpose panel implementation which serves as a placeholder for missing panels.
            This panel has the following properties
            - It explains to the user why the panel is marked as missing and provides the possibility
              to permanently remove it from the layout
            - It gets saved under the original panel name and will thus be replaced by the original panel
              as soon as it is available again
            
            This mechanism has been introduced to correctly support panels implemented in project specific
            editor plugins (see bug #561).
            </summary>
        </member>
        <member name="F:CSharpFramework.Docking.MissingPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:CSharpFramework.Docking.MissingPanel._originalPanelPersistentString">
            <summary>
            
            </summary>
        </member>
        <member name="M:CSharpFramework.Docking.MissingPanel.#ctor(CSharpFramework.Docking.DockingContainer,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="container"></param>
            <param name="originalPanelPersistentString">name of the original panel this panel is supposed to replace</param>
        </member>
        <member name="M:CSharpFramework.Docking.MissingPanel.GetPersistString">
            <summary>
            Gets the persistent string of the panel.
            We override this virtual function to always returns the persistent string of the original panel
            (placeholder functionality).
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Docking.MissingPanel.ClosePermanently">
            <summary>
            Closes the panel permanently.
            By default dockable panels just hide themselves when "Close" is triggered. Use this function
            to permanently remove the panel from the layout.
            </summary>
        </member>
        <member name="M:CSharpFramework.Docking.MissingPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Docking.MissingPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.SetupGridDlg">
            <summary>
            Dialog for setting up the snap grid
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.SetupGridDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.SetupGridDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.SetupGridDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.SetupGridDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.SetupGridDlg.ShowDialog">
            <summary>
            Override the ShowDialog function to do some additional setup
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Dialogs.SetupGridDlg.MoveGrid">
            <summary>
            The grid used for moving
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.SetupGridDlg.RotateGrid">
            <summary>
            The grid used for rotation
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.InputDlg">
            <summary>
            Simple dialog for getting single text line input
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.InputDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.InputDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.InputDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.InputDlg.ShowDialog">
            <summary>
            Overridden ShowDialog function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.InputDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.InputDlg.textBox1_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Make enter act as OK
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:CSharpFramework.Dialogs.InputDlg.Prompt">
            <summary>
            Property for the prompting text
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.InputDlg.Input">
            <summary>
            Property for the editable text
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.ModelGroupEditorDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ModelGroupEditorDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ModelGroupEditorDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Contexts.WintabTabletContext">
             <summary>
             This tablet context is using the WintabDN library for the tablet input.
             
             Copyright (c) 2010, Wacom Technology Corporation
            
             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:
             
             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             
             </summary>
        </member>
        <member name="M:CSharpFramework.Contexts.WintabTabletContext.WTPacketEventHandler(System.Object,WintabDN.MessageReceivedEventArgs)">
            <summary>
            Called when Wintab WT_PACKET events are received.
            </summary>
            <param name="sender_I">The EventMessage object sending the report.</param>
            <param name="eventArgs_I">eventArgs_I.Message.WParam contains ID of packet containing the data.</param>
        </member>
        <member name="T:CSharpFramework.Actions.SetShapeParentAction">
            <summary>
            SAction that attaches a shape to another parent.
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SetShapeParentAction.#ctor(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Action constructor. Takes the shape to parent the new parent
            </summary>
            <param name="shape"></param>
            <param name="newParent"></param>
        </member>
        <member name="M:CSharpFramework.Actions.SetShapeParentAction.Do">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SetShapeParentAction.Undo">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SetShapeParentAction.BreakupLinksForNewParentRecursive(CSharpFramework.ShapeCollection,CSharpFramework.Shapes.ShapeBase,CSharpFramework.Scene.Zone,CSharpFramework.GroupAction,CSharpFramework.Actions.SetShapeParentAction.CollectLinksToBreakVisitor)">
            <summary>
            Static internal helper function
            </summary>
            <param name="rootshapes"></param>
            <param name="shape"></param>
            <param name="newzone"></param>
            <param name="action"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:CSharpFramework.Actions.SetShapeParentAction.BreakupLinksForNewParent(CSharpFramework.ShapeCollection,CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Static helper function to collect all UnlinkAction that must be performed when shape (as part of the rootshapes list) wants to 
            be attached to a new parent
            </summary>
            <param name="rootshapes">A list of all shapes that are moved</param>
            <param name="shape">The shape to attach to new parent</param>
            <param name="newparent">The new parent shape</param>
            <returns>A group action that contains all UnlinkAction. Returns null if no unlink has to be performed</returns>
        </member>
        <member name="M:CSharpFramework.Actions.SetShapeParentAction.TestShapesLinkToDifferentZone(CSharpFramework.ShapeCollection,CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeBase,System.Boolean)">
            <summary>
            Static helper function to determine whether the passed shape (as part of the rootshapes list) can be attached to newparent,
            i.e. it does not conflict with the rule there must not be links to other zones
            </summary>
            <param name="rootshapes">A collection of all shapes that are moved</param>
            <param name="shape">A single shape that shall be tested</param>
            <param name="newparent">The new parent</param>
            <param name="bMessageBox">if true and the result is false, a message box appears asking the user whether links should be removed</param>
            <returns>true if successful or false if there are still links to shapes in different zones. The function also returns true if the user
            clicks OK in the message box</returns>
        </member>
        <member name="M:CSharpFramework.Actions.SetShapeParentAction.TestShapesLinkToDifferentZone(CSharpFramework.ShapeCollection,CSharpFramework.Shapes.ShapeBase,System.Boolean)">
            <summary>
            Static helper function to determine whether the passed shapes can be attached to newparent,
            i.e. it does not conflict with the rule there must not be links to other zones
            </summary>
            <param name="shapes">A collection of all shapes that are moved</param>
            <param name="newparent">The new parent</param>
            <param name="bMessageBox">if true and the result is false, a message box appears asking the user whether links should be removed</param>
            <returns>true if successful or false if there are still links to shapes in different zones. The function also returns true if the user
            clicks OK in the message box</returns>
        </member>
        <member name="M:CSharpFramework.Actions.SetShapeParentAction.TestLayersLinkToDifferentZone(CSharpFramework.LayerCollection,CSharpFramework.Scene.Zone,System.Boolean)">
            <summary>
            Analogue to TestShapesLinkToDifferentZone but rather tests whether a list of layers can be attached to a new zone
            </summary>
            <param name="layers"></param>
            <param name="newparent"></param>
            <param name="bMessageBox"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Actions.SetShapeParentAction.OldParent">
            <summary>
            Old parent of the shape 
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SetShapeParentAction.NewParent">
            <summary>
            New parent of the shape 
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SetShapeParentAction.AffectedShape">
            <summary>
            Affected shape of this action
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SetShapeParentAction.ShortName">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SetShapeParentAction.Valid">
            <summary>
            Overridden valid function (checks layer editable flag)
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.SetShapeParentAction.BackupLocalIDVisitor">
            <summary>
            Helper class to backup and assign new local IDs to a shape (and its children) that moved from one layer to another
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SetShapeParentAction.BackupLocalIDVisitor.Run(CSharpFramework.Actions.SetShapeParentAction.BackupLocalIDVisitor.RunMode)">
            <summary>
            Call this function to run the visitor in one of its modes
            </summary>
            <param name="runMode"></param>
        </member>
        <member name="T:CSharpFramework.Actions.SetShapeParentAction.CollectLinksToBreakVisitor">
            <summary>
            Helper visitor class to collect break-up actions in a shapes hierarchy
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.SetShapesParentAction">
            <summary>
            Group action to re-parent a collection of shapes
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SetShapesParentAction.#ctor(CSharpFramework.ShapeCollection,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Action constructor. Takes the shapes to parent the new parent
            </summary>
            <param name="shapes">Collection of shapes to parent</param>
            <param name="newParent">New parent of shapes</param>
        </member>
        <member name="T:CSharpFramework.Actions.SetShapeNameAction">
            <summary>
            Action that renames a shapes. Takes care for choosing a valid name (i.e. unique in the hierarchy)
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SetShapeNameAction.#ctor(CSharpFramework.Shapes.ShapeBase,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="shape">shape to rename</param>
            <param name="newName">new shape name, will be converted to a valid name</param>
        </member>
        <member name="M:CSharpFramework.Actions.SetShapeNameAction.Do">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SetShapeNameAction.Undo">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.SetShapeNameAction.FlagLinkedShapes">
            <summary>
            Marks all shapes linked by this shape and any child shape as modified
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SetShapeNameAction.ShortName">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SetShapeNameAction.Valid">
            <summary>
            Overridden valid function (checks layer editable flag)
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SetShapeNameAction.IconIndex">
            <summary>
            Overridden icon index function
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.SetShapeNameAction.IconImage">
            <summary>
            Static function to return the image used to display this type of action in the history
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ConnectNeighborVisibilityZonesLink.#ctor(CSharpFramework.Shapes.Shape3D,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ownerShape"></param>
            <param name="primaryStringId"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ConnectNeighborVisibilityZonesLink.#ctor(CSharpFramework.Shapes.Shape3D,System.String,System.String)">
            <summary>
            Default constructor used by the factory class
            </summary>
            <param name="ownerShape"></param>
            <param name="linkName"></param>
            <param name="primaryStringId"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ConnectNeighborVisibilityZonesLink.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.ConnectNeighborVisibilityZonesLink.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.Shapes.ConnectNeighborVisibilityZonesLink.DefaultHotspotIconFilename">
            <summary>
            Get the icon filename
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.VisibilityZoneShape">
            <summary>
            Defines a visibility zone box that is used by the visibility building process to create native counterparts
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.#ctor(System.String)">
            <summary>
            Shape constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.Clone">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.OnTransformationChanged">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.GetLocalBoundingBox(CSharpFramework.Math.BoundingBox@)">
            <summary>
            Overridden function
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.OnAddedToScene">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.OnRemoveFromScene">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.RenderVisibilityZone(CSharpFramework.VisionViewBase,System.UInt32)">
            <summary>
            Render the zone box into the view
            </summary>
            <param name="view"></param>
            <param name="iColor"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.AddChild(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Overridden function
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.RemoveChild(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Overridden function
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.GetFarClipDistance">
            <summary>
            Returns 0.0f as this shape does not contribute anything to far clipping
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Shapes.VisibilityZoneShape.NativeZonePointer">
            <summary>
            Public member that can be used to temporarily associate this shape with its native counterpart. See AcquireNativeZone
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.VisibilityZoneShape.VisibilityOwnerMeshShape">
            <summary>
            This shape pointer must be set if this zone belongs to a shape with local visibility (Not necessarily the parent shape)
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.AddNeighborZone(CSharpFramework.Shapes.VisibilityZoneShape)">
            <summary>
            Adds a zone to the neighbor list. Checks for null.
            </summary>
            <param name="zone"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.AddTemporaryPortal(CSharpFramework.Shapes.PortalShape)">
            <summary>
            Adds a temporary portal that is created while visibility building
            </summary>
            <param name="portal"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.GetVisibilityInfo(CSharpFramework.Scene.IVisibilityBuilder)">
            <summary>
            Overridden function
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.ResetVisibilityInfo(CSharpFramework.Scene.IVisibilityBuilder)">
            <summary>
            Overridden function
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.AcquireNativeZone">
            <summary>
            Overridable to set the NativeZonePointer pointer. This is optional, because a native zone will be generated by the visbuilder
            if the NativeZonePointer is still null afterwards
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.OnConnect(CSharpFramework.Shapes.VisibilityZoneShape,CSharpFramework.Shapes.PortalShape)">
            <summary>
            Overridable that is called by the visibility builder whenever this zone is connected to another zone.
            This function is also called for AddNeighborZone, then the viaPortal parameter is null
            The base implementation does not do anything
            </summary>
            <param name="otherZone"></param>
            <param name="viaPortal"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.OnPaintScene2DView(CSharpFramework.Controls.Scene2DView,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden function (paint zone into 2d view)
            </summary>
            <param name="view"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.GetScene2DRenderingSortingKey(CSharpFramework.Controls.Scene2DView)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.OnSelected">
            <summary>
            Called when the shape is selected
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.OnUnSelected">
            <summary>
            Called when the shape is unselected
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when user starts dragging a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Called while the user drags a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when the user releases the mouse button on a hotspot
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.AbsBoundingBox">
            <summary>
            Returns the absolute bounding box of the zone
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.FinalBoundingBox">
            <summary>
            This bounding box starts as a clone of AbsBoundingBox but gets inflated by the portal vertices
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.BoundingBoxMin">
            <summary>
            Bounding box min position in local space (used for prefabs)
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.BoundingBoxMax">
            <summary>
            Bounding box max position in local space (used for prefabs)
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.SizeX">
            <summary>
            x-diameter of the zone box
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.SizeY">
            <summary>
            y-diameter of the zone box
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.SizeZ">
            <summary>
            z-diameter of the zone box
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.DebugColor">
            <summary>
            This color is used when debugging visibility to tint the zone elements
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.SubMeshIndices">
            <summary>
            Array of submeshes that are referenced by this zone. Loaded from XML and used by visibility building
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.ForceGeometryAssignment">
            <summary>
            Internal flag used to determine the behavior when SubMeshIndices is null
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.MergeWithOutside">
            <summary>
            Determines whether geometry inside this zone is to be merged with the outside
            CURRENTLY NOT IMPLEMENTED IN THE PROCESSING
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.ParentingMode">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.Portals">
            <summary>
            Returns a collection of portals that use this zone as a source
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.ValidPortals">
            <summary>
            Returns a collection of portals that use this zone as a source and that have a valid target, i.e. Portals collection with portal.Valid flag test
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.NeighborZonesViaPortals">
            <summary>
            Returns a collection of zones connected via portals
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.VisibilityZoneShape.NeighborZones">
            <summary>
            Returns a collection of zones that are connected directly
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.VisibilityZoneShapeCreator">
            <summary>
            Creator plugin for visibility shapes. Not exposed to vForge
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator.GetPluginName">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator.GetPluginCategory">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator.CreateShapeInstance">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Shapes.VisibilityZoneShapeCreator_HallwayY">
            <summary>
            Creator plugin for visibility shapes. Not exposed to vForge
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_HallwayY.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_HallwayY.GetPluginName">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_HallwayY.GetPluginCategory">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_HallwayY.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_HallwayY.CreateShapeInstance">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Shapes.VisibilityZoneShapeCreator_HallwayX">
            <summary>
            Creator plugin for visibility shapes. Not exposed to vForge
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_HallwayX.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_HallwayX.GetPluginName">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_HallwayX.GetPluginCategory">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_HallwayX.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_HallwayX.CreateShapeInstance">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Shapes.VisibilityZoneShapeCreator_Room">
            <summary>
            Creator plugin for visibility shapes. Not exposed to vForge
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_Room.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_Room.GetPluginName">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_Room.GetPluginCategory">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_Room.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.VisibilityZoneShapeCreator_Room.CreateShapeInstance">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Scene.ILightSource">
            <summary>
            Interface that must be implemented by light sources so it has an affect testr
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ILightSource.Affects(CSharpFramework.Math.BoundingBox)">
            <summary>
            Indicates whether this light affects the passed bounding box (simple range check)
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ILightSource.IsOccluder(CSharpFramework.Math.BoundingBox,CSharpFramework.Math.BoundingBox)">
            <summary>
            Indicates whether the passed occluderBox potentially casts a shadow on the receiverBox
            </summary>
            <param name="occluderBox"></param>
            <param name="receiverBox"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ILightSource.GetRangeBox">
            <summary>
            Must return the bounding box of the light's range
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Scene.StaticLightInfo">
            <summary>
            An instance of the StaticLightInfo class keeps the information about all additional shadow casting
            objects in the scene
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.StaticLightInfo.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.StaticLightInfo.SupplierShapes">
            <summary>
            Use this collection to add shapes that provide hints for lighting. These shapes go into a prefab.xml file that can be read by vLux
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.StaticLightInfo.RelevantOccluder">
            <summary>
            Add shapes to this collection that can serve as occluder geometry
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.StaticLightInfo.RelevantReceiver">
            <summary>
            Add shapes to this collection that can serve as lightmap receiver geometry
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.StaticLightInfo.RelevantLights">
            <summary>
            Put light shapes into this collction. Each shape here should implement the ILightSource interface
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.StaticLightInfo.AddReceiverWithLOD(CSharpFramework.Shapes.ShapeBase,System.UInt64[])">
            <summary>
            Adds a shape to the relevant receivcers and additionally associates it with a list of unique IDS that represent the LOD versions 
            </summary>
            <param name="shape">The high res version of the shape</param>
            <param name="iLODIDs">List of IDs that represent the LODs (the high res version not included)</param>
        </member>
        <member name="M:CSharpFramework.Scene.StaticLightInfo.GetFilteredReceiverIDs">
            <summary>
            Returns a flat list of all unique IDs that are receivers
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.StaticLightInfo.FilterByZone(CSharpFramework.Scene.Zone)">
            <summary>
            Shrinks all collections so that they only contain shapes relevant for the passed zone
            </summary>
            <param name="zone"></param>
        </member>
        <member name="M:CSharpFramework.Scene.StaticLightInfo.Save(System.String)">
            <summary>
            save config to file
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Scene.StaticLightInfo.Empty">
            <summary>
            get the empty status of the whole config
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.ShowDescriptionDlg">
            <summary>
            Dialog that shows a description text (read only)
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.ShowDescriptionDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShowDescriptionDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShowDescriptionDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShowDescriptionDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ShowDescriptionDlg.DescriptionText">
            <summary>
            Sets the Description text
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ShowDescriptionDlg.ShowAgain">
            <summary>
            Gets or sets the flag whether this description should be shown again
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ShowDescriptionDlg.HeaderText">
            <summary>
            Allows to set a header text shown above the description
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.FlatComboBox">
            <summary>
            Making Standard ComboBox appear flat: A simple and easy class that draws the standard ComboBox as flat control. 
            Publicly available code taken from http://www.codeproject.com/KB/combobox/ComboBox_appears_flat.aspx
            License: http://www.codeproject.com/info/cpol10.aspx
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.FlatComboBox.WM_ERASEBKGND">
            <summary>
            Windows message: WM_ERASEBKGND
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.FlatComboBox.WM_PAINT">
            <summary>
            Windows message: WM_PAINT
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.FlatComboBox.WM_NC_PAINT">
            <summary>
            Windows message: WM_NC_PAINT
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.FlatComboBox.WM_PRINTCLIENT">
            <summary>
            Windows message: WM_PRINTCLIENT
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.FlatComboBox.DropDownButtonWidth">
            <summary>
            Width of the dropdown button
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.FlatComboBox.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Imported native function
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.FlatComboBox.GetWindowDC(System.IntPtr)">
            <summary>
            Imported native function
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Controls.FlatComboBox.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            Imported native function
            </summary>
            <param name="hWnd"></param>
            <param name="hDC"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Controls.FlatComboBox.#cctor">
            <summary>
            Static initialiser
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.FlatComboBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.FlatComboBox.OnSelectedValueChanged(System.EventArgs)">
            <summary>
            Event function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.FlatComboBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            WndProc implementation
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CSharpFramework.Controls.FlatComboBox.SendPrintClientMsg">
            <summary>
            PrintClient message function
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.FlatComboBox.PaintFlatControlBorder(System.Windows.Forms.Control,System.Drawing.Graphics)">
            <summary>
            Paints flat control border
            </summary>
            <param name="ctrl"></param>
            <param name="g"></param>
        </member>
        <member name="M:CSharpFramework.Controls.FlatComboBox.PaintFlatDropDown(System.Windows.Forms.Control,System.Drawing.Graphics)">
            <summary>
            Paints flat dropdown button
            </summary>
            <param name="ctrl"></param>
            <param name="g"></param>
        </member>
        <member name="M:CSharpFramework.Controls.FlatComboBox.OnLostFocus(System.EventArgs)">
            <summary>
            OnLostFocus event handlers
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.FlatComboBox.OnGotFocus(System.EventArgs)">
            <summary>
            OnGotFocus event handlers
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.FlatComboBox.OnResize(System.EventArgs)">
            <summary>
            OnResize event handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:CSharpFramework.View.HotSpotLink">
            <summary>
            Hotspot that is used for link sources resp. targets (derived classes)
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotLink.#ctor(CSharpFramework.Shapes.ShapeLink,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="link">owner link</param>
            <param name="fOfsX">display offset to shape origin (screen coordinates)</param>
            <param name="fOfsY">display offset to shape origin (screen coordinates)</param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotLink.EvaluatePosition">
            <summary>
             Updates the position of the hotspot according to shape's position
            </summary>
        </member>
        <member name="M:CSharpFramework.View.HotSpotLink.OnDragBegin(CSharpFramework.VisionViewBase)">
            <summary>
            Overridden drag function
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotLink.OnDrag(CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Overridden drag function
            </summary>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotLink.OnDragEnd(CSharpFramework.VisionViewBase)">
            <summary>
            Overridden drag function
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.View.HotSpotLink.RenderHotSpot(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overridden render function
            </summary>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="P:CSharpFramework.View.HotSpotLink.OwnerLink">
            <summary>
            The link, this hotspot is attached to
            </summary>
        </member>
        <member name="P:CSharpFramework.View.HotSpotLink.MouseOverCursor">
            <summary>
            Returns the mouse over cursor
            </summary>
        </member>
        <member name="T:CSharpFramework.UndoRedo.DelegatePropertyChangesToParent">
            <summary>
            Use this attribute on a class to instruct the property converter to delegate any changes applied 
            to instance properties to the parent of this property. Mostly relevant for property grid based edits.
            
            This attribute is typically required for structures and classes such as vectors and floats,
            since changes to their XYZ/RGBA values would otherwise bypass the shape setters method.
            
            Example:
            - Lets say the user edits the value of the property "shape.Color.R" (type: Color4)
            - The property grid will call SetValue on the property descriptor of "shape.Color"
            - SetValue would *by default* set the "R" property on the color object
              - Problem: The shape won't notice this change, since the setter if the "Color" property is not triggered
              - This e.g. results in the engine instance not being informed about the changed color
            - When adding this attribute to the Color4 class, the SetValue function will behave differently:
              - It will create a new color object which has the new "R" value
              - Next it will set the new color object "shape.Color", and thus trigger the setter of the color property
              - The engine instance will now be informed of the change, as expected
            </summary>
        </member>
        <member name="T:CSharpFramework.UndoRedo.DelegatePropertyChangesFromChildren">
            <summary>
            Use this attribute on a class to instruct the property converter to delegate any changes applied
            to instance properties of the children of this property.
            
            This attribute is typically required if the property contains a DynamicPropertyCollection which
            does not delegate the changes by itself.
            </summary>
        </member>
        <member name="T:CSharpFramework.UndoRedo.UndoRedoPropertyDescriptor">
            <summary>
            Custom Property Descriptor which overrides the SetValue function to transform property
            changes into undoable actions
            </summary>
        </member>
        <member name="M:CSharpFramework.UndoRedo.UndoRedoPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,CSharpFramework.Scene.PropertyFlags_e,CSharpFramework.UndoRedo.UndoableObjectConverter.ParentContext,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="srcDescriptor">property descriptor to wrap around</param>
            <param name="flags">display flags</param>
            <param name="parentContext">optional parent context</param>
            <param name="customComponent">Optional object that is used as a set property target</param>
        </member>
        <member name="M:CSharpFramework.UndoRedo.UndoRedoPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.UndoRedo.UndoRedoPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.UndoRedo.UndoRedoPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:CSharpFramework.UndoRedo.UndoRedoPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.UndoRedo.UndoRedoPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="P:CSharpFramework.UndoRedo.UndoRedoPropertyDescriptor.ComponentType">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.UndoRedo.UndoRedoPropertyDescriptor.IsReadOnly">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.UndoRedo.UndoRedoPropertyDescriptor.PropertyType">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.UndoRedo.UndoRedoPropertyDescriptor.Description">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="T:CSharpFramework.UndoRedo.PendingActionsManager">
            <summary>
            Static manager class for accessing all pending actions. Pending actions are created while editing
            properties and are supposed to be executed by the property grid as soon as the editing process 
            is being finished.
            </summary>
        </member>
        <member name="M:CSharpFramework.UndoRedo.PendingActionsManager.Reset">
            <summary>
            Remove all pending actions
            </summary>
        </member>
        <member name="M:CSharpFramework.UndoRedo.PendingActionsManager.Execute">
            <summary>
            Executes all currently open actions (add them to the action stack)
            </summary>
        </member>
        <member name="M:CSharpFramework.UndoRedo.PendingActionsManager.ExecuteNoUndo">
            <summary>
            Immediately executes all pending actions WITHOUT adding them to the undo/redo stack.
            </summary>
        </member>
        <member name="F:CSharpFramework.UndoRedo.PendingActionsManager._pendingActions">
            <summary>
            Collection of currently pending actions which need to be processed by the PropertyGrid
            </summary>
        </member>
        <member name="P:CSharpFramework.UndoRedo.PendingActionsManager.Actions">
            <summary>
            Gets the list of currently pending actions
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.PrefabTest">
            <summary>
            Tests the prefab system
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.PrefabTest.SetUp">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.PrefabTest.TearDown">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.PrefabTest.Test_CreationAndSave">
            <summary>
            Create instances from all shapes in the scene and save it as a prefab
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.PrefabTest.Test_NestedBinaryPrefabs">
            <summary>
            Create an outer Prefab from an inner prefab
            Instantiate the outer prefab as a shape
            Change the inner prefab by making it editable
            Resave and collapse and see if OuterPrefab changed too
            Load vScene as concluding test
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.PrefabTest.IgnoreForPrefabTests">
            <summary>
            Add this attribute to a creator plugin so it is not considered for testing all prefab shapes
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.AllActionsTest.TearDown">
            <summary>
            Test function
            </summary>
        </member>
        <member name="T:CSharpFramework.ShortCuts.ModifierKeyState">
            <summary>
            The ModifierKeyState class holds the state of the Shift, Alt and Control keys.
            Use the static property called "Current" to query the current state of the modifier keys.
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ModifierKeyState.GetKeyState(System.Int16)">
            <summary>
            Imported GetKeyState function. Used to query the current state of the modifier keys.
            </summary>
            <param name="nVirtKey"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ModifierKeyState.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor, takes states as parameter
            </summary>
            <param name="bShiftKey">state of shift key</param>
            <param name="bAltKey">state of alt key</param>
            <param name="bCtrlKey">state of control key</param>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ModifierKeyState.Equals(System.Object)">
            <summary>
            Compares two ModifierKeyState instances
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ModifierKeyState.GetHashCode">
            <summary>
            Overridden GetHashCode function (necessary to avoid warning CS0659)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ModifierKeyState.IsKeyPressed(System.Windows.Forms.Keys)">
            <summary>
            Indicates whether the passed key is currently pressed
            </summary>
            <param name="key">virtual key code</param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ModifierKeyState.Current">
            <summary>
            Gets the current state of the modifier keys
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ModifierKeyState.ShiftKey">
            <summary>
            Gets the state of the Shift key for this instance
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ModifierKeyState.AltKey">
            <summary>
            Gets the state of the Alt key for this instance
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ModifierKeyState.ControlKey">
            <summary>
            Gets the state of the Control key for this instance
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ZoneChangedArgs">
            <summary>
            Event class for changes in a zone
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ZoneChangedArgs.#ctor(CSharpFramework.Scene.Zone,CSharpFramework.Scene.ZoneChangedArgs.Action)">
            <summary>
            Constructor
            </summary>
            <param name="_layer"></param>
            <param name="_owner"></param>
            <param name="_action"></param>
        </member>
        <member name="F:CSharpFramework.Scene.ZoneChangedArgs.zone">
            <summary>
            The layer that changed
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ZoneChangedArgs.action">
            <summary>
            The current status
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ZoneChangedArgs.Action">
            <summary>
            changed status
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ZoneChangedArgs.Action.Added">
            <summary>
            zone has been added
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ZoneChangedArgs.Action.Removed">
            <summary>
            zone has been removed
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ZoneChangedArgs.Action.Selected">
            <summary>
            zone has been selected
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ZoneChangedArgs.Action.Clicked">
            <summary>
            zone has been clicked on (in list view)
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ZoneChangedArgs.Action.NameChanged">
            <summary>
            Name of the zone changed
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ZoneChangedArgs.Action.PropertyChanged">
            <summary>
            A zone property changed
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ZoneChangedArgs.Action.RebuildList">
            <summary>
            The whole zone list has to be rebuilt
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ZoneChangedArgs.Action.ModifiedChanged">
            <summary>
            The 'Dirty' flag of the zone changed
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ZoneChangedArgs.Action.LoadedStatusChanged">
            <summary>
            The Loaded status of the zone changed
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Zone.CAT_ZONE">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Zone.CATORDER_ZONE">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Zone.CAT_STREAMING">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Zone.CATORDER_STREAMING">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Zone.CAT_EXPORT">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Zone.CATORDER_EXPORT">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Zone.CAT_PREVIEW">
            <summary>
            Category name
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Zone.CATORDER_PREVIEW">
            <summary>
            Category ID
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.Zone.LAST_CATEGORY_ORDER_ID">
            <summary>
            Last used category ID
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Zone.SetZoneFileNameInternal(System.String)">
            <summary>
            Sets the internal file name of the zone. Should not be used.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Zone.SetZoneNameInternal(System.String)">
            <summary>
            Internal functioin, do not use
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Zone.OnLayerChangedEvent(CSharpFramework.LayerChangedArgs)">
            <summary>
            notification that is sent to all zones. The passed layer is not necessarily part of this zone
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Zone.GetDependencies(CSharpFramework.Scene.ResourceSnapshotInfo)">
            <summary>
            Helper function that calls the respective GetDependencies function on each layer in this zone
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Scene.Zone.CalculateBoundingBox">
            <summary>
            Recalculates the bounding box from all shapes in all layers
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.Zone.InvalidateBoundingBox">
            <summary>
            Forces a re-calculation of the AbsoluteBoundingBox next time it is accessed. It retains the current box if the zone is in
            unloaded state
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Zone.MatchupLayerNames(CSharpFramework.LayerCollection)">
            <summary>
            After scene serialization, matchup the layers by unique name as the zone only stores string filenames
            </summary>
            <param name="allLayers"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.Zone.SaveToFile">
            <summary>
            Serializes this zone to binary file
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.Zone.OnDeserialization">
            <summary>
            Virtual overridable
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.Zone.CreateZone">
            <summary>
            Prompts a dialog and adds a new zone
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.Zone.GetPropertyFlags(CSharpFramework.Scene.PropertyFlagsProviderInfo)">
            <summary>
            Implements the IPropertyFlagsProvider interface
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.ZoneName">
            <summary>
            Name of the zone file
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.Description">
            <summary>
            Short description of the zone
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.ZoneFilename">
            <summary>
            Zone name plus file extension. THis filename is project relative
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.AbsoluteZoneFilename">
            <summary>
            Absolute version of ZoneFilename
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.RunLighting">
            <summary>
            Internal status that determines whether static lighting should be calculated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.ConsiderForSortIntoZones">
            <summary>
            Internal status that determines whether static lighting should be calculated
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.SortingOrder">
            <summary>
            order value for sorting zones
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.NodeCollapsed">
            <summary>
            Helper flag that stores the collapsed flag in the view
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.IndexInScene">
            <summary>
            Returns the list index of this zone in its parent scene
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.ShowProgress">
            <summary>
            Opens a progress dialog. Useful while loading a zone
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.CurrentStatus">
            <summary>
            Returns the current status (loaded, unloaded or loading/unloading). The latter ones can be useful to test
            inside a shape's RemoveEngineInstance function to determine the reason for removing the instance.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.ParentScene">
            <summary>
            Gets or sets the owner scene where this layer is attached to. The set function is only for
            internal use.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.Layers">
            <summary>
            The collection of layers attached to this zone
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.AbsoluteBoundingBox">
            <summary>
            Returns the cached bounding box of the zone (i.e. bounding box of all shapes in all layers)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.AssignmentBoundingBox">
            <summary>
            Returns the bounding box that is used for shape assignment. Usually the same as AbsoluteBoundingBox
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.MaxFarClipDistance">
            <summary>
            Returns the (cached) far clipping distance (maximum over all shapes in the scene).
            Reserved values are: -1 : always use view clip distance; 0:far clip distance of 0
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.Zone.Scene2DRenderingEnabled">
            <summary>
            Get or set the status for rendering this object into any 2D map view
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.Zone.EvaluateAllowFullUnloadVisitor">
            <summary>
            This class tests whether full unload is supported for a layer
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.GridZone">
            <summary>
            Derived zone class that is aligned in a grid
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ZoneNameComparer">
            <summary>
            Comparer class to sort zones by name
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ZoneNameComparer.#ctor(System.Windows.Forms.SortOrder)">
            <summary>
            Constructor
            </summary>
            <param name="order">alphabetical order</param>
        </member>
        <member name="M:CSharpFramework.Scene.ZoneNameComparer.Compare(System.Object,System.Object)">
            <summary>
            Implements IComparer
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Scene.SceneExportProfile">
            <summary>
            Holds export related properties
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportProfile.#ctor(CSharpFramework.IScene,System.String)">
            <summary>
            Contructor to attach a profile with a specific name to a scene
            </summary>
            <param name="ownerScene"></param>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportProfile.DEFAULT_PROFILE_NAME">
            <summary>
            The default profile name that is always available
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportProfile.FILE_EXTENSION_EXPORT">
            <summary>
            Get the default file extension for exported files: "vscene"
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.SceneExportProfile.FILE_EXTENSION_EXPORTPROFILE">
            <summary>
            Get the default file extension for exported profiles: "ExportProfile"
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportProfile.ProfilenameToFilename(System.String,CSharpFramework.IScene)">
            <summary>
            Helper function to translate a profile name to absolute filename
            </summary>
            <param name="profileName"></param>
            <param name="scene"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportProfile.ExportedLayersFromScene">
            <summary>
            Gathers the layer.Export flag from each layer in the scene
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportProfile.ExportedLayersToScene(System.Boolean)">
            <summary>
            Modifies the layer.Export flag for each layer in the scene
            </summary>
            <param name="bMarkChangesAsDirty"></param>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportProfile.FixupLayerNames">
            <summary>
            Converts the name collection to collection of layer objects
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportProfile.Equals(System.Object)">
            <summary>
            Compares two profiles
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportProfile.Clone">
            <summary>
            Clones the profile (deep clone where necessary)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportProfile.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportProfile.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportProfile.SaveToFile">
            <summary>
            Save this profile instance to file
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.SceneExportProfile.LoadProfile(CSharpFramework.IScene,System.String,System.Boolean)">
            <summary>
            Load the specified profile name and return its instance. The return value might be null
            </summary>
            <param name="scene"></param>
            <param name="profileName"></param>
            <param name="convertToSceneRefs"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportProfile.OwnerScene">
            <summary>
            Internal getter/setter
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportProfile.LoadedFromFile">
            <summary>
            Indicates whether this instance has been loaded from file or not
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportProfile.ProfileName">
            <summary>
            The export path of the scene
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportProfile.FileName">
            <summary>
            Returns the absolute filename derived from the profile name
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportProfile.ExportPath">
            <summary>
            The export path of the scene. The return value is always valid (defaults to scenename.vscene)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportProfile.ReplacementResourcePath">
            <summary>
            Project relative path to access low-res replacement resources. Must be non-empty to have any effect
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportProfile.AbsoluteReplacementResourcePath">
            <summary>
            Helper function to return a cached version of the absolute replacemant path. Returns null if BakeReplacementResources 
            is set to false
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportProfile.BakeReplacementResources">
            <summary>
            Flag that indicates whether Export should bake the replacement resources into the vscene (resources taken from ReplacementResourcePath)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportProfile.RunAfterExport">
            <summary>
            Flag that indicates whether scene should be run in viewer after export
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportProfile.IncludeVisibilityInfo">
            <summary>
            Flag that indicates whether relevant engine plugins should be copied to the export path so the viewer runs properly
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportProfile.EmbedCustomLitFile">
            <summary>
            Flag that determines whether the .lit file stored in the layer's directory should be embedded into the scene export so
            that the VSceneLoader triggers the Vision::Callbacks.OnLightmapFileLoaded callback at loading time.
            This flag is not necessary for standard scene lightmapping (e.g. of static meshes)
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportProfile.InvisibleLayersExportInvisibleObjects">
            <summary>
            Flag that indicates whether shapes in invisible layers remain invisible in the exported scene
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportProfile.ExportedLayers">
            <summary>
            List of exported layers in the scene
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.SceneExportProfile.ExportedZones">
            <summary>
            List of exported zones in the scene
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyOrderAttribute">
            <summary>
            [COMMENT]
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyOrderAttribute.#ctor(System.Int32)">
            <summary>
            Constructor that takes the order constant
            </summary>
            <param name="order">order value</param>
        </member>
        <member name="P:CSharpFramework.PropertyOrderAttribute.Order">
            <summary>
            Simple attribute to allow the order of a property to be specified
            </summary>
        </member>
        <member name="T:CSharpFramework.SortedCategoryAttribute">
            <summary>
            Extends the standard Category attribute with sorting capabilities.
            </summary>
        </member>
        <member name="M:CSharpFramework.SortedCategoryAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="order"></param>
        </member>
        <member name="M:CSharpFramework.SortedCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            localized name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.PropertyOrderPair">
            <summary>
            A pair of property name and order ID
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyOrderPair.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="order"></param>
        </member>
        <member name="M:CSharpFramework.PropertyOrderPair.CompareTo(System.Object)">
            <summary>
            Comapre function
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.PropertyOrderPair.Name">
            <summary>
            get the name
            </summary>
        </member>
        <member name="T:CSharpFramework.ReadOnlyPropertyDescriptor">
            <summary>
            PropertyDescriptor for read only properties
            </summary>
        </member>
        <member name="M:CSharpFramework.ReadOnlyPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Constructor
            </summary>
            <param name="srcDescriptor">property descriptor to wrap around</param>
        </member>
        <member name="M:CSharpFramework.ReadOnlyPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:CSharpFramework.ReadOnlyPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ReadOnlyPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ReadOnlyPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:CSharpFramework.ReadOnlyPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.ReadOnlyPropertyDescriptor.IsReadOnly">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ReadOnlyPropertyDescriptor.ComponentType">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ReadOnlyPropertyDescriptor.PropertyType">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.EnumEditor">
            <summary>
            Implements a custom type editor for selecting enums from a list.
            You can specify this type editor for any enumeration as in the 
            following sample:
            
            [Editor(typeof(EnumEditor), 
             typeof(System.Drawing.Design.UITypeEditor))]
            public enum MyBitmask
            {
              [NotVisibleEnum]
              None = 0,
              [Description("Description for the RED value.")]
              Red = 1,
              [Description("Description for the GREEN value.")]
              Green = 2,
              [Description("Description for the BLUE value.")]
              Blue = 4
            }
            
            You can use the NotVisibleEnum attribute to mark specific enumeration values
            as not visible and therefore not selectable for the user .
            
            The description of the enumeration values is shown as tooltips when hovering above the enum.
            
            This class can be derived from to implement custom enum editors that optionally use custom value lists.
            Override FillListBox and ToObject for this purpose.
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.EnumEditor.editorService">
            <summary>
            Service instances passed to the EditValue function
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.EnumEditor.listBox">
            <summary>
             Instance of the listbox that is displayed as dropdown
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.EnumEditor.tooltipControl">
            <summary>
             Control instance for displaying tooltips
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.EnumEditor.cancelEdit">
            <summary>
            Should the editing be canceled
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.EnumEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden UITypeEditor function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.EnumEditor.FillListBox(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object,System.Windows.Forms.ListBox)">
            <summary>
            Overridable that is called to fill the combobox with data. The default implementation parses the enum values
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <param name="list"></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.EnumEditor.ToObject(System.ComponentModel.ITypeDescriptorContext,CSharpFramework.PropertyEditors.EnumEditor.ListItem)">
            <summary>
            Overridable to convert the selected list item to target format. This default implementation converts the selectedItem.Value to enum value
            </summary>
            <param name="context"></param>
            <param name="iValue"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.EnumEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overridden UITypeEditor function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.EnumEditor.OnKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Cancel the editng when ESC is pressed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.EnumEditor.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Close the dropdown control when the mouse is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.EnumEditor.OnMouseMoved(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Sets the tooltip of the item under the mouse pointer when the mouse is moved
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.EnumEditor.ListItem">
            <summary>
            Internal class used for storing custom data in listviewitems
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.EnumEditor.ListItem.#ctor(System.String,System.UInt32,System.String)">
            <summary>
            Creates a new instance of the <c>ListItem</c>
            </summary>
            <param name="_name">The name of the enum which is return by the <c>ToString</c> method.</param>
            <param name="_value">The integer value of the enum</param>
            <param name="_tooltip">The tooltip displayed in the <see cref="T:System.Windows.Forms.ListBox"/></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.EnumEditor.ListItem.ToString">
            <summary>
            The name of this item
            </summary>
            <returns>The name passed in the constructor</returns>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.EnumEditor.ListItem.Value">
            <summary>
            The int value for this item
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.EnumEditor.ListItem.Tooltip">
            <summary>
            The tooltip for this item
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.NotVisibleEnumAttribute">
            <summary>
            Field Attribute to be used in combination with the EnumEditor custom type editor class.
            Marks enumeration values as not visible and therfore not selectable for the user.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.NotVisibleEnumAttribute.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="T:CSharpFramework.Helper.IClassFactory`1">
            <summary>
            Class factory interface.
            </summary>
        </member>
        <member name="M:CSharpFramework.Helper.IClassFactory`1.CreateInstance(System.Object[])">
            <summary>
            Creates an instance of the type _classname.
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.ShowPluginsDlg">
            <summary>
            Show list views with all currently loaded plugins. Uses different lists for Editor plugins,
            creator plugins and engine entity classes
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.ShowPluginsDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShowPluginsDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShowPluginsDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShowPluginsDlg.ActivateAssemblyTab">
            <summary>
            Activates the assembly tab
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShowPluginsDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShowPluginsDlg.UpdatePluginList">
            <summary>
            Update all list views with current plugin information. Gets the information from the EditorManager instance
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.IncrementalSearchPanel">
            <summary>
            Reusable incremental search control
            
            Simply add this control to your panel and listen to the "FilterChanged" event.
            
            Once this event occurs (and probably once during the initialisation of your control)
            you can use the MatchFilter function to check whether a passed name matches the
            filter specified by the user.
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.IncrementalSearchPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.IncrementalSearchPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Controls.IncrementalSearchPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.IncrementalSearchPanel.MatchesFilter(System.String)">
            <summary>
            Indicates whether the passed plugin has been filtered
            out according to the current search filter content.
            </summary>
            <param name="filterToken"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Controls.IncrementalSearchPanel.IsActive">
            <summary>
            Indicates whether the user has entered something in the incremental search filter
            </summary>
        </member>
        <member name="E:CSharpFramework.Controls.IncrementalSearchPanel.FilterChanged">
            <summary>
            This event gets triggered if the search filter has been changed by the user and
            thus has to be applied to the external content again.
            </summary>
        </member>
        <member name="T:CSharpFramework.ActionHistoryView">
            <summary>
            Tree view for showing the UNDO/REDO history.
            </summary>
        </member>
        <member name="M:CSharpFramework.ActionHistoryView.#ctor">
            <summary>
             Constructor of the view
            </summary>
        </member>
        <member name="M:CSharpFramework.ActionHistoryView.AddActionNode(CSharpFramework.IAction,System.Windows.Forms.TreeNodeCollection,System.Int32)">
            <summary>
             Internal function to add a tree node to the tree view
            </summary>
            <param name="action">source action</param>
            <param name="parentNodes">collection to add the node</param>
            <param name="iStackIndex">Stack index of the action</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ActionHistoryView.UpdateActionView">
            <summary>
            Update the tree view if the action stack has changed
            </summary>
        </member>
        <member name="M:CSharpFramework.ActionHistoryView.OnActionEvent(System.Object,CSharpFramework.ActionEventArgs)">
            <summary>
            Listens to changes in the action stack
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ActionHistoryView.SetStack(CSharpFramework.ActionStack)">
            <summary>
            Sets the action stack this view refers to.
            </summary>
        </member>
        <member name="M:CSharpFramework.ActionHistoryView.OnAfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Normal selection does not do anything
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.ActionHistoryView.OnDoubleClick(System.Object,System.EventArgs)">
            <summary>
            when double clicking on item,  select the undo stack index
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:CSharpFramework.ActionHistoryView.Stack">
            <summary>
            Gets or sets the action stack this view refers to.
            Must be private, since otherwise the designer in VS2010 crashes after 
            setting this property. The reason for this is the implicit call of UpdateActionView which 
            calls some static function/member in Editormanager [#4703]. To set the Stack please use the function SetStack(...)
            </summary>
        </member>
        <member name="T:CSharpFramework.ActionHistoryView.ActionTreeNode">
            <summary>
            Tree node that represents an action tree node
            </summary>
        </member>
        <member name="M:CSharpFramework.ActionHistoryView.ActionTreeNode.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name">node name</param>
            <param name="iStackIndex">stack depth</param>
        </member>
        <member name="F:CSharpFramework.ActionHistoryView.ActionTreeNode.StackIndex">
            <summary>
            Stack depth of this node
            </summary>
        </member>
        <member name="T:CSharpFramework.Visitors.RepairShapeIDVisitor">
            <summary>
            This visitor can be used to repair the unique IDs inside a scene or layer.
            </summary>
        </member>
        <member name="M:CSharpFramework.Visitors.RepairShapeIDVisitor.RepairLayer(CSharpFramework.Layer)">
            <summary>
            Constructor
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:CSharpFramework.Visitors.RepairShapeIDVisitor.CheckLayer(CSharpFramework.Layer)">
            <summary>
            Run this visitor on the passed layer in check-mode
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Visitors.RepairShapeIDVisitor.RepairScene(CSharpFramework.IScene,System.Boolean)">
            <summary>
            Run this visitor on the passed scene in repair-mode
            </summary>
            <param name="scene"></param>
            <param name="bForceAllLayer"></param>
        </member>
        <member name="M:CSharpFramework.Visitors.RepairShapeIDVisitor.CheckScene(CSharpFramework.IScene)">
            <summary>
            Run this visitor on the passed scene in check-mode
            </summary>
            <param name="scene"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Visitors.RepairShapeIDVisitor.RepairVirtualShapes">
            <summary>
            Run flag
            </summary>
        </member>
        <member name="M:CSharpFramework.Visitors.RepairShapeIDVisitor.Visit(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Overridden function
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Visitors.ShapeLinksToTextFile">
            <summary>
            Helper class that writes all links to text file. For debugging purposes
            </summary>
        </member>
        <member name="M:CSharpFramework.Visitors.ShapeLinksToTextFile.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Visitors.ShapeLinksToTextFile.WriteToFile(System.String)">
            <summary>
            Write scene content to file
            </summary>
            <param name="absFilename"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Visitors.ShapeLinksToTextFile.TextWriteLinkVisitor">
            <summary>
            Helper visitor
            </summary>
        </member>
        <member name="T:CSharpFramework.Visitors.MarkLinkedShapesModifiedLinkVisitor">
            <summary>
            Visitor that iterates all shapes connected to a link and marks them as modified
            </summary>
        </member>
        <member name="T:CSharpFramework.Visitors.CheckWhetherLinkedShapesAreModifiableLinkVisitor">
            <summary>
            Visitor that iterates all shapes connected to a link and checks whether all of them
            can be modified. The result can be queried via the AreAllModifiable member. A list of
            linked shapes that can't be modified is stored in FailedShapes (contains first failed shape
            only though).
            </summary>
        </member>
        <member name="F:CSharpFramework.Visitors.CheckWhetherLinkedShapesAreModifiableLinkVisitor.AreAllModifiable">
            <summary>
            Indicates whether all linked shapes are modifiable
            </summary>
        </member>
        <member name="F:CSharpFramework.Visitors.CheckWhetherLinkedShapesAreModifiableLinkVisitor.FailedShapes">
            <summary>
            List of shapes that can't be modified. Currently contains the first
            found shape only, since the iteration then stops.
            </summary>
        </member>
        <member name="T:CSharpFramework.View.ViewSettings">
            <summary>
            Class that keeps engine view related settings such as FOV and filtering mode
            </summary>
        </member>
        <member name="M:CSharpFramework.View.ViewSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.View.ViewSettings.Reset">
            <summary>
            Resets all values to defaults
            </summary>
        </member>
        <member name="M:CSharpFramework.View.ViewSettings.Validate">
            <summary>
            Ensures that values are in valid range
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ViewSettings.FOV">
            <summary>
            Field of view (in degree)
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ViewSettings.AnisotropicFilteringEnabled">
            <summary>
            Global filtering status
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ViewSettings.MaxAnisotropy">
            <summary>
            Maximum Anisotropy
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ViewSettings.MipMapBias">
            <summary>
            Mipmap bias value
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ViewSettings.GlobalAlphaThreshold">
            <summary>
            Global Alpha Test Threshold value
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ViewSettings.FarClipDistance">
            <summary>
            Far clip distance (set in main layer)
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ViewSettings.NearClipDistance">
            <summary>
            Near clip distance (set in main layer)
            </summary>
        </member>
        <member name="M:CSharpFramework.View.ViewSettings.Clone">
            <summary>
            Clone function
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.View.ViewIconSettings">
            <summary>
            This class describes the preferences used to display shape icons in the engine view. Shapes can respond to changes in the
            Shape.OnSceneEvent override using the SceneEventArgs.Action.ViewIconSettingsChanged action ID.
            Relevant shape functions are: Shape3D.UpdateViewIconStatus or Shape3D.CreateDefaultViewIcon
            </summary>
        </member>
        <member name="E:CSharpFramework.View.ViewIconSettings.OnViewIconSettingsChanged">
            <summary>
            This event is triggered when any property in the structure changed. The instance is passed as sender. Shapes however get
            notifications automatically through the Shape.OnSceneEvent override with ViewIconSettingsChanged as action ID
            </summary>
        </member>
        <member name="P:CSharpFramework.View.ViewIconSettings.ShowIcons">
            <summary>
            Indicates whether icons should be shown at all 
            </summary>
        </member>
        <member name="P:CSharpFramework.View.ViewIconSettings.VisibleShapesOnly">
            <summary>
            Indicates whether only visible shapes/layers should be shown
            </summary>
        </member>
        <member name="P:CSharpFramework.View.ViewIconSettings.Action">
            <summary>
            Enum that defines which action is executed upon selection
            </summary>
        </member>
        <member name="T:CSharpFramework.View.TextureAtlas">
            <summary>
            Class that describes a texture atlas. Basically it holds a list of atlas entries (class AtlasEntry) and
            each entry describes a sub-rectangle in the source texture. The atlas can be saved to XML format.
            </summary>
        </member>
        <member name="T:CSharpFramework.View.TextureAtlasEditor">
            <summary>
            UITypeEditor to support texture atlas editing for a texture atlas property
            </summary>
        </member>
        <member name="T:CSharpFramework.View.AtlasSourceTexturePropertyAttribute">
            <summary>
            Attribute that works together with the TextureAtlasFilenameEditor. It marks another property in the source instance that provides
            the filename of the texture. This is because the texture itself is not a property of the texture atlas.
            </summary>
        </member>
        <member name="T:CSharpFramework.View.TextureAtlasFilenameEditor">
            <summary>
            UITypeEditor to support texture atlas editing to a string filename property
            </summary>
        </member>
        <member name="M:CSharpFramework.View.TextureAtlasFilenameEditor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CSharpFramework.View.TextureAtlasFilenameEditor.DEFAULT_EXTENSION">
            <summary>
            Default file extension for atlas files
            </summary>
        </member>
        <member name="M:CSharpFramework.View.TextureAtlasFilenameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.View.TextureAtlasFilenameEditor.editorService">
            <summary>
            Service instances passed to the EditValue function
            </summary>
        </member>
        <member name="M:CSharpFramework.View.TextureAtlasFilenameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overriden Edit value function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.View.TextureAtlasFilenameEditor.CreateEmptyAtlasFile(System.String,System.String)">
            <summary>
            Helper function to physically create a new atlas file
            </summary>
            <param name="absFilename">absolute file path. If null, a browse dialog appears</param>
            <param name="oldFilename">optional for browsing. Can be null</param>
            <returns></returns>
            
        </member>
        <member name="M:CSharpFramework.View.TextureAtlasFilenameEditor.BrowseAtlasFile(System.String)">
            <summary>
            Opens a browse dialog for atlas files.
            </summary>
            <param name="oldFilename">previous name for browsing. Can be null</param>
            <returns>relative filename or null</returns>
        </member>
        <member name="M:CSharpFramework.View.TextureAtlasFilenameEditor.EditAtlasFile(System.String,System.String)">
            <summary>
            Helper function to open/edit an atlas file
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.View.TextureAtlasFilenameEditor.AddFileNameToMRU(System.String)">
            <summary>
            Helper function to add filename to MRU list
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:CSharpFramework.View.ShapeSnapPoint">
            <summary>
            This class represents a single instance of a 3D postion that other shapes can snap to. A snap point is
            basically a position in the scene with a radius. Other snap points that touch the radius while the user drags
            the owner object around, can be snapped to that position. Derived snap point classes might additionally add filtering
            mechanisms so specific snap points may only snap to points of the same kind.
            Collection of snap points can be returned by overriding the shape's virtual GetSnapPointList function. The rest
            is handled automatically by the gizmo.
            </summary>
        </member>
        <member name="M:CSharpFramework.View.ShapeSnapPoint.#ctor(CSharpFramework.Shapes.Shape3D)">
            <summary>
            Constructor
            </summary>
            <param name="shape"></param>
        </member>
        <member name="F:CSharpFramework.View.ShapeSnapPoint.OwnerShape">
            <summary>
            Owner shape, passed in the constructor
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ShapeSnapPoint.SnapShape">
            <summary>
            Shape that is snapped, OwnerShape by default
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ShapeSnapPoint.Enabled">
            <summary>
            Status of the snap point
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ShapeSnapPoint.AbsolutePosition">
            <summary>
            Absolute position of snap position. By default, gets calculated from owner shape's transformation
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ShapeSnapPoint.RelativePosition">
            <summary>
            Relative position of the snap point to the owner shape's pivot
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ShapeSnapPoint.Radius">
            <summary>
            Radius for snapping
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ShapeSnapPoint.ConsiderGlobalUnitScaling">
            <summary>
            If true, the Radius is internally scaled with the global units sclaing of vForge
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ShapeSnapPoint.IconFilename">
            <summary>
            Filename of the sprite to render
            </summary>
        </member>
        <member name="F:CSharpFramework.View.ShapeSnapPoint.IconColor">
            <summary>
            Icon color (RGBA)
            </summary>
        </member>
        <member name="M:CSharpFramework.View.ShapeSnapPoint.CanSnapTo(CSharpFramework.View.ShapeSnapPoint)">
            <summary>
            Overridable that indicates whether this shape can snap to another one. This base implementation
            performs some sanity checks, e.g. both must be enabled and not be parented to the same shape.
            </summary>
            <param name="other">The other snap point to test</param>
            <returns>true, if this point can snap to the other</returns>
        </member>
        <member name="M:CSharpFramework.View.ShapeSnapPoint.OnShow">
            <summary>
            Called when this point is detected to be visible for other snappoints
            </summary>
        </member>
        <member name="M:CSharpFramework.View.ShapeSnapPoint.OnHide">
            <summary>
            Called when hidden again
            </summary>
        </member>
        <member name="M:CSharpFramework.View.ShapeSnapPoint.OnEvaluatePosition">
            <summary>
            Called whenever owner shape changes its transformation
            </summary>
        </member>
        <member name="M:CSharpFramework.View.ShapeSnapPoint.GetSnapPoint(System.Collections.ArrayList,CSharpFramework.Math.Vector3F,CSharpFramework.ShapeCollection)">
            <summary>
            Evaluates the best snapping point (or null) between this and points in the passed collection
            </summary>
            <param name="points">Collection of ShapeSnapPoint to test</param>
            <param name="shapeOfs">Additional shape offset (used while dragging he shape)</param>
            <param name="ignoreShapes">List of shapes to ignore</param>
            <returns>The best snap point or null</returns>
        </member>
        <member name="M:CSharpFramework.View.ShapeSnapPoint.SnapDistanceTo(CSharpFramework.View.ShapeSnapPoint,CSharpFramework.Math.Vector3F)">
            <summary>
            Evaluates the snapping distance between this and the other point. Returns -1.0 if snapping is not possible
            </summary>
            <param name="other"></param>
            <param name="shapeOfs"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.View.ShapeSnapPoint.Clone">
            <summary>
            Implements ICloneable
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.View.ShapeSnapPoint.FinalRadius">
            <summary>
            Considers the ConsiderGlobalUnitScaling flag. Always use this one
            </summary>
        </member>
        <member name="P:CSharpFramework.View.ShapeSnapPoint.Visible">
            <summary>
            Determines the visible state of the snap point
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.FileHelperTest">
            <summary>
            Summary description for FileHelperTest.
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.FileHelperTest.TestMakeRelative">
            <summary>
            Tests the FileHelper.MakeFileRelative function
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.DynamicAssemblyBuilderTest">
            <summary>
            Summary description for DynamicAssemblyBuilderTest.
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicAssemblyBuilderTest.TestNormalClasses">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicAssemblyBuilderTest.TestValueClasses">
            <summary>
            test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicAssemblyBuilderTest.TestArray">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicAssemblyBuilderTest.TestCustomProperty">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicAssemblyBuilderTest.TestAttributes">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicAssemblyBuilderTest.TestEnumCreation">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicAssemblyBuilderTest.TestSerialization">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicAssemblyBuilderTest.TestClone">
            <summary>
            Test function
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.DynamicAssemblyBuilderTest.TestEnum">
            <summary>
            Internal enum
            </summary>
        </member>
        <member name="F:CSharpFramework.Tests.DynamicAssemblyBuilderTest.TestEnum.RED">
            <summary>
            Test value
            </summary>
        </member>
        <member name="F:CSharpFramework.Tests.DynamicAssemblyBuilderTest.TestEnum.GREEN">
            <summary>
            Test value
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.DynamicAssemblyBuilderTest.CustomPropertyClass">
            <summary>
            test class
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.DynamicAssemblyBuilderTest.CustomPropertyClass.#ctor(CSharpFramework.Tests.DynamicAssemblyBuilderTest.CustomPropertyClass.TYPE,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="initType"></param>
            <param name="initValue"></param>
        </member>
        <member name="F:CSharpFramework.Tests.DynamicAssemblyBuilderTest.CustomPropertyClass.iValue">
            <summary>
            Test value
            </summary>
        </member>
        <member name="F:CSharpFramework.Tests.DynamicAssemblyBuilderTest.CustomPropertyClass.type">
            <summary>
            Test type
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.DynamicAssemblyBuilderTest.CustomPropertyClass.TYPE">
            <summary>
            internal enum
            </summary>
        </member>
        <member name="F:CSharpFramework.Tests.DynamicAssemblyBuilderTest.CustomPropertyClass.TYPE.TYPE_A">
            <summary>
            Test value
            </summary>
        </member>
        <member name="F:CSharpFramework.Tests.DynamicAssemblyBuilderTest.CustomPropertyClass.TYPE.TYPE_B">
            <summary>
            Test value
            </summary>
        </member>
        <member name="T:CSharpFramework.ShortCuts.ShortCutConfig">
            <summary>
            Class ShortCutConfig describes an array of key bindings. Globally accessible via EditorManager.ShortCuts.
            Note that the ShortCutConfig class doesn't track the user input and thus won't execute the shortcuts.
            Use the ShortCutMessageFilter instead for this purpose.
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutConfig.Add(CSharpFramework.ShortCuts.ShortCutAction)">
            <summary>
            Adds a key binding to this config
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutConfig.Remove(CSharpFramework.ShortCuts.ShortCutAction)">
            <summary>
            Removes a key binding from this config
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutConfig.ProcessShortCut(CSharpFramework.ShortCuts.ShortCutAction)">
            <summary>
            Performs the passed action and returns the status of the Do function
            </summary>
            <param name="shortcut"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutConfig.ProcessShortCut(System.Windows.Forms.Keys,CSharpFramework.ShortCuts.ModifierKeyState)">
            <summary>
            Performes the shortcut action for the passed key combination
            </summary>
            <param name="keyPressed">pressed key</param>
            <param name="modKeyState">modifier key state</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutConfig.SetDefaults">
            <summary>
            Sets the default key binding for each action
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutConfig.SetUnassignedToDefaults">
            <summary>
            Sets the default key binding for each action that does not have a shortcut assigned
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutConfig.IsRegistered(System.Windows.Forms.Keys,CSharpFramework.ShortCuts.ShortCutAction)">
            <summary>
            Indicates whether a specific key binding is in this config
            </summary>
            <param name="key"></param>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutConfig.FindByName(System.String)">
            <summary>
            Find an action by action name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutConfig.Clone">
            <summary>
            Overridden function - performs a deep copy of the array
            </summary>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.ShortCuts.ShortCutConfig.DEFAULT_SETTINGS_FILE">
            <summary>
            Default filename (in EXE dir) to store hotkey config
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutConfig.LoadFromFile(System.String)">
            <summary>
            Loads the settings file from XML file
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutConfig.SaveToFile(System.String)">
            <summary>
            Saves the current settings to XML file
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutConfig.KeyBinding">
            <summary>
            Get the has table with action name/ shortcut pairs
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutConfig.Actions">
            <summary>
            Returns this config as an array of actions
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutConfig.Triggering">
            <summary>
            Status that indicates the config is currently triggering a hotkey action.
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutConfig.Active">
            <summary>
            Activates/Deactivates all key bindings
            </summary>
        </member>
        <member name="T:CSharpFramework.ShortCuts.ShortCutsPropertyConverter">
            <summary>
            Property converter for the short cut config
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.ShortCutPropertyDescriptor">
            <summary>
            Derived PropertyDescriptor class
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.ShortCutPropertyDescriptor.#ctor(CSharpFramework.ShortCuts.ShortCutConfig,CSharpFramework.ShortCuts.ShortCutAction)">
            <summary>
            Constructor
            </summary>
            <param name="config"></param>
            <param name="action"></param>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.ShortCutPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.ShortCutPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.ShortCutPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.ShortCutPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.ShortCutPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.ShortCutPropertyDescriptor.Action">
            <summary>
            Returns the action
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.ShortCutPropertyDescriptor.DisplayName">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.ShortCutPropertyDescriptor.Category">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.ShortCutPropertyDescriptor.Description">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.ShortCutPropertyDescriptor.IsReadOnly">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.ShortCutPropertyDescriptor.PropertyType">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ShortCutsPropertyConverter.ShortCutPropertyDescriptor.ComponentType">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="T:CSharpFramework.Serialization.EditorPluginInfo">
            <summary>
            Class that provides information about used plugins. An info structure should be returned by every shape.
            This class can be extended in the future
            </summary>
        </member>
        <member name="P:CSharpFramework.Serialization.EditorPluginInfo.IsValid">
            <summary>
            Indicates whether this info is valid. (Future use)
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.BitmapBrowseDlg">
            <summary>
            Dialog for browsing the bitmaps in a directory.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.BitmapBrowseDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.BitmapBrowseDlg._InitialDirectory">
            <summary>
            Initial directory
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.BitmapBrowseDlg._FileName">
            <summary>
            Selected filename
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.BitmapBrowseDlg._Filter">
            <summary>
            Filter array
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.BitmapBrowseDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.BitmapBrowseDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.BitmapBrowseDlg.ShowDialog">
            <summary>
            Overridden ShowDialog function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.BitmapBrowseDlg.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Overridden ShowDialog function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Dialogs.BitmapBrowseDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.BitmapBrowseDlg.InitialDirectory">
            <summary>
            Main root directory of the browser
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.BitmapBrowseDlg.Filter">
            <summary>
            Filter to use for textures. e.g  {".bmp",".jpg"} in LOWERCASE!
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.BitmapBrowseDlg.FileName">
            <summary>
            Returns the file that was selected
            Eventually we will also use the filename for the starting file
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.DialogCaptionBar">
            <summary>
            The DialogCaptionBar control can be embedded in dialogs to visually improve them.
            It provides a caption, description and image.
            
            You can directly drag this control as custom control into your form. Set the anchor
            property to up, left and right then.
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.DialogCaptionBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.DialogCaptionBar.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.DialogCaptionBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.DialogCaptionBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.DialogCaptionBar.DialogCaptionBar_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint event. Draws a horizontal line at the bottom of the bar.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:CSharpFramework.Controls.DialogCaptionBar.Caption">
            <summary>
            Text shown as title of the bar
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.DialogCaptionBar.Description">
            <summary>
            Text shown as description (underneath the title)
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.DialogCaptionBar.Image">
            <summary>
            Image to display in the upper left corner
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.DialogCaptionBar.ShowBottomLine">
            <summary>
            Specifies whether a single black line will be rendered at the
            bottom of a control (separator)
            </summary>
        </member>
        <member name="T:CSharpFramework.VisionColors">
            <summary>
            Helper class for color conversion between Color class and Vision specific VColorRef (uint) structure
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionColors.RGBA(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a Vision 32bit color value from r,g,b and a component
            </summary>
            <param name="r">source red</param>
            <param name="g">source green</param>
            <param name="b">source blue</param>
            <param name="a">source alpha</param>
            <returns>32 bit color value compatible with VColorRef</returns>
        </member>
        <member name="M:CSharpFramework.VisionColors.RGB(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a Vision 32bit color value from r,g,b component. Alpha is set to 255
            </summary>
            <param name="r">source red</param>
            <param name="g">source green</param>
            <param name="b">source blue</param>
            <returns>32 bit color value compatible with VColorRef</returns>
        </member>
        <member name="M:CSharpFramework.VisionColors.Get(System.Drawing.Color)">
            <summary>
            Creates a Vision 32bit color value from r,g and b component
            </summary>
        </member>
        <member name="M:CSharpFramework.VisionColors.ToColor(System.UInt32)">
            <summary>
            Converts a Vision color value to Color class instance
            </summary>
            <param name="iColorRef">Vision 32 bit color value</param>
            <returns>Color instance</returns>
        </member>
        <member name="M:CSharpFramework.VisionColors.GetR(System.UInt32)">
            <summary>
            Returns the red component of a 32 bit color value
            </summary>
            <param name="iColorRef">the VColorRef compatible color</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.VisionColors.GetG(System.UInt32)">
            <summary>
            Returns the green component of a 32 bit color value
            </summary>
            <param name="iColorRef">the VColorRef compatible color</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.VisionColors.GetB(System.UInt32)">
            <summary>
            Returns the blue component of a 32 bit color value
            </summary>
            <param name="iColorRef">the VColorRef compatible color</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.VisionColors.GetA(System.UInt32)">
            <summary>
            Returns the alpha component of a 32 bit color value
            </summary>
            <param name="iColorRef">the VColorRef compatible color</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.VisionColors.Modulate(System.UInt32,System.UInt32)">
            <summary>
            Multiplies two colors and returns the result
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.VisionColors.Black">
            <summary>
            Plain black
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionColors.White">
            <summary>
            Plain white
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionColors.Grey">
            <summary>
            Medium Grey
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionColors.Red">
            <summary>
            Plain red
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionColors.Green">
            <summary>
            Plain green
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionColors.Blue">
            <summary>
            Plain blue
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionColors.Yellow">
            <summary>
            Plain yellow
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionColors.Cyan">
            <summary>
            Plain cyan
            </summary>
        </member>
        <member name="P:CSharpFramework.VisionColors.Magenta">
            <summary>
            Plain magenta
            </summary>
        </member>
        <member name="T:CSharpFramework.TransparencyType">
            <summary>
            Vision transparency type. The enum values match the VIS_TransparencyType values.
            </summary>
        </member>
        <member name="F:CSharpFramework.TransparencyType.Opaque">
            <summary>
             no transparency
            </summary>
        </member>
        <member name="F:CSharpFramework.TransparencyType.Modulate">
            <summary>
            multiplicative transparency
            </summary>
        </member>
        <member name="F:CSharpFramework.TransparencyType.AlphaBlended">
            <summary>
            alpha transparency
            </summary>
        </member>
        <member name="F:CSharpFramework.TransparencyType.Additive">
            <summary>
            additive transparency
            </summary>
        </member>
        <member name="F:CSharpFramework.TransparencyType.AlphaTest">
            <summary>
            alphatest transparency, only pixels with low alpha values are tranparent, other pixels are opaque
            </summary>
        </member>
        <member name="F:CSharpFramework.TransparencyType.AddModulate">
            <summary>
            add the modulated result (dest=dest*(1+src))
            </summary>
        </member>
        <member name="F:CSharpFramework.TransparencyType.Modulate2x">
            <summary>
            modulate and multiply by two
            </summary>
        </member>
        <member name="F:CSharpFramework.TransparencyType.Subtractive">
            <summary>
            subtractive transparency, (dest = dest - src*src.a)
            </summary>
        </member>
        <member name="F:CSharpFramework.TransparencyType.PremultipliedAlpha">
            <summary>
            PremultipliedAlpha transparency, (dest = src + dest*(1-src.a))
            </summary>
        </member>
        <member name="F:CSharpFramework.TransparencyType.AlphaSmooth">
            <summary>
            Alpha blending with no alpha test
            </summary>
        </member>
        <member name="T:CSharpFramework.Tests.FileLockTest">
            <summary>
            Automated tests for the FileLock class
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.FileLockTest.TestFileLock">
            <summary>
            Test function
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.PortalShape">
            <summary>
            Represents a single sided portal in the scene.
            Used by the visibility building process to convert into native counterparts.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.#ctor(System.String)">
            <summary>
            Shape constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.Clone">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.CloneMirrored">
            <summary>
            Creates a clone portal that is the mirrored counterpart of this portal (i.e. reverse vertex order)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.GetLocalBoundingBox(CSharpFramework.Math.BoundingBox@)">
            <summary>
            Overridden function
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.SetParent(CSharpFramework.Shapes.ShapeBase,System.Boolean)">
            <summary>
            Overridden function
            </summary>
            <param name="newParent"></param>
            <param name="bValidateName"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.OnTransformationChanged">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.AllowsToSetParent(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Overridden function
            </summary>
            <param name="newParent"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.OnAddedToScene">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.OnRemoveFromScene">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.RenderPortal(CSharpFramework.VisionViewBase,System.UInt32)">
            <summary>
            Helper function to render portal debug geoemetry inside the editor
            </summary>
            <param name="view"></param>
            <param name="iColor"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.RenderShape(CSharpFramework.VisionViewBase,CSharpFramework.Shapes.ShapeRenderMode)">
            <summary>
            Overridden function
            </summary>
            <param name="view"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.OnDoubleClick">
            <summary>
            Move to the portal, but also look at it from its front side
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.GetFarClipDistance">
            <summary>
            Returns 0.0f as this shape does not contribute anything to far clipping
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.GetIconIndex">
            <summary>
            Overridden function to get the icon index
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.OnPostPrefabCreation(CSharpFramework.ShapeCollection,CSharpFramework.Scene.PrefabDesc)">
            <summary>
            Overridden function
            </summary>
            <param name="allRootShapes"></param>
            <param name="prefab"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.GetVisibilityInfo(CSharpFramework.Scene.IVisibilityBuilder)">
            <summary>
            Overridden function
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.ResetVisibilityInfo(CSharpFramework.Scene.IVisibilityBuilder)">
            <summary>
            Overridden function
            </summary>
            <param name="info"></param>
        </member>
        <member name="F:CSharpFramework.Shapes.PortalShape.NativePointer">
            <summary>
            Public member that can be used to temporarily associate this shape with its native counterpart
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.OnPaintScene2DView(CSharpFramework.Controls.Scene2DView,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Callback to render itself into the 2D view
            </summary>
            <param name="view"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.CountVerticesInsideBox(CSharpFramework.Math.BoundingBox)">
            <summary>
            helper function that tests how many of the worldspace vertex positions are inside the passed bounding box
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.IsCompletelyInsideBox(CSharpFramework.Math.BoundingBox)">
            <summary>
            Helper function that indicates whether all portal worldspace vertices are completely inside the box
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.IsCompletelyOutsideBox(CSharpFramework.Math.BoundingBox)">
            <summary>
            Helper function that indicates whether all portal worldspace vertices are completely outside the box
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.Connected(CSharpFramework.Shapes.PortalShape,CSharpFramework.Shapes.PortalShape,System.Single)">
            <summary>
            Static helper function to test two portals for connection
            </summary>
            <param name="portal1"></param>
            <param name="portal2"></param>
            <param name="fEpsilon"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.IsPointInPolygon(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F[],CSharpFramework.Math.PlaneF,System.Single)">
            <summary>
            Static helper function to test whether a position is inside a convex polygon
            </summary>
            <param name="pos"></param>
            <param name="polygon"></param>
            <param name="polyPlane"></param>
            <param name="fEpsilon"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.OnSelected">
            <summary>
            Called when the shape is selected
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.OnUnSelected">
            <summary>
            Called when the shape is unselected
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.OnHotSpotDragBegin(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when user starts dragging a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.OnHotSpotDrag(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase,System.Single,System.Single)">
            <summary>
            Called while the user drags a hotspot that belongs to this shape
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
            <param name="fDeltaX"></param>
            <param name="fDeltaY"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.OnHotSpotDragEnd(CSharpFramework.View.HotSpotBase,CSharpFramework.VisionViewBase)">
            <summary>
            Called when the user releases the mouse button on a hotspot
            </summary>
            <param name="hotSpot"></param>
            <param name="view"></param>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShape.OnHotSpotEvaluatePosition(CSharpFramework.View.HotSpotBase)">
            <summary>
            Called every frame and per hotspot that belongs to the shape
            </summary>
            <param name="hotSpot"></param>
        </member>
        <member name="P:CSharpFramework.Shapes.PortalShape.Valid">
            <summary>
            Indicates whether this portal has a valid source and target zone
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PortalShape.LeadsToOutside">
            <summary>
            If true, the target zone will be marked as MergeWithOutside==true
            CURRENTLY NOT IMPLEMENTED IN THE PROCESSING
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PortalShape.VertexCount">
            <summary>
            Get or set the number of portal vertices
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PortalShape.LocalVertexPositions">
            <summary>
            Takes a raw array of local vertex positions.
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PortalShape.VertexPositions">
            <summary>
            Returns an array of transformed world space vertex positions
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PortalShape.PortalPlane">
            <summary>
            gets the plane of all portal vertices
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PortalShape.PortalMeanRadius">
            <summary>
            Returns the average distance of portal vertices to the center
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PortalShape.ParentingMode">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PortalShape.SourceZone">
            <summary>
            Source zone reference
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PortalShape.TargetZone">
            <summary>
            Target zone reference
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PortalShape.TargetZoneViaPortal">
            <summary>
            Reference for the portal that leads to target zone
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PortalShape.TargetPortalID">
            <summary>
            Unique ID of TargetZoneViaPortal
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PortalShape.TargetZoneID">
            <summary>
            Unique ID of the target zone
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PortalShape.IsOpen">
            <summary>
            Determines whether the portal has a non-temporary target portal
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.PortalShapeCreator">
            <summary>
            Creator plugin for visibility shapes. Not exposed to vForge
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShapeCreator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShapeCreator.GetPluginName">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShapeCreator.GetPluginCategory">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShapeCreator.GetPluginDescription">
            <summary>
            Returns a short description text
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PortalShapeCreator.CreateShapeInstance">
            <summary>
            Overridden function
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Serialization.SerializationHelper">
            <summary>
            Helper class for serialization
            </summary>
        </member>
        <member name="F:CSharpFramework.Serialization.SerializationHelper.ENGINEVECTOR_SEPARATOR">
            <summary>
            The character used to separate vector components for entity parameter in the engine. Defined as forward slash.
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.SerializationHelper.IsSerializable(System.Object,System.Boolean)">
            <summary>
            Checks whether an object is serializable. For testing purposes only
            </summary>
            <param name="obj">object to test</param>
            <param name="bOutputMessage">output exception info or not</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Serialization.SerializationHelper.HasElement(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Helper function since SerializationInfo::FindElement isn't public
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.SerializationHelper.GetOptionalValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Type)">
            <summary>
            Helper function since SerializationInfo::GetValue throws an 
            exception if the value doesn't exist
            </summary>
        </member>
        <member name="F:CSharpFramework.Serialization.SerializationHelper.SERIALIZATION_BINDER">
            <summary>
            Provides one global instance of a serialization binder that should be used for all binary reader
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.SerializationHelper.GetType(System.String)">
            <summary>
            Gets the type of a type name, e.g. Int32 for "System.Int32"
            This helper seems to be useful to call from managed code, since the managed code doesn't seem to like the Vector3F class for example.
            </summary>
        </member>
        <member name="F:CSharpFramework.Serialization.SerializationHelper.LastException">
            <summary>
            Stores the last exception that was triggered by GetObjectFromStringData
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.SerializationHelper.CreateBoolString(System.Int32,System.Int32,System.String)">
            <summary>
            Create a string of bools from the passed bitmask, e.g. true,true,false for bitmask 3
            </summary>
            <param name="iBitmask"></param>
            <param name="iCount"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Serialization.SerializationHelper.GetObjectFromStringData(System.Type,System.String,System.String)">
            <summary>
            Creates a .NET object of the specified type from the passed engine string value
            </summary>
            <param name="type">Type of the object</param>
            <param name="objValue">Value of the object as string</param>
            <param name="separator">Defines the separator character between vector components</param>
            <returns>Created object</returns>
        </member>
        <member name="M:CSharpFramework.Serialization.SerializationHelper.GetObjectFromStringData(System.Type,System.String)">
            <summary>
            Overloaded version that uses the forward slash as separator character
            </summary>
            <param name="type"></param>
            <param name="objValue"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Serialization.SerializationHelper.GetEngineStringFromObject(System.Object,System.String)">
            <summary>
            Get the engine string representation for a .NET object 
            </summary>
            <param name="obj">.NET object to convert</param>
            <param name="separator">Separator characer for vector components</param>
            <returns>Engine string representation of the .NET object</returns>
        </member>
        <member name="M:CSharpFramework.Serialization.SerializationHelper.GetEngineStringFromObject(System.Object)">
            <summary>
            Overloaded version that uses the forward slash as separator
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Serialization.SerializationHelper.CopyInstanceProperties(System.Object,System.Object)">
            <summary>
            This version calls the other overload with CopyInstanceProperties(targetObj,sourceObj,true,true,null);
            </summary>
            <param name="targetObj">traget object</param>
            <param name="sourceObj">source object</param>
            <returns>number of copied properties</returns>
        </member>
        <member name="M:CSharpFramework.Serialization.SerializationHelper.CopyInstanceProperties(System.Object,System.Object,System.Boolean,System.Boolean,System.Collections.Specialized.StringCollection)">
            <summary>
            Loops through all properties of the source object and maps the values to properities of the same name in the target object.
            The property types must be compatible.
            This function can be used to replace shapes by other shapes with similar properties
            </summary>
            <param name="targetObj">traget object</param>
            <param name="sourceObj">source object</param>
            <param name="bBrowsableOnly">if true, the BrowsableAttribute is checked for each candidate</param>
            <param name="bCloneValue">if true, values that implement ICloneable are cloned for the target object</param>
            <param name="excludeProperties">An additional list to exclude specific properties. Can be null</param>
            <returns>number of copied properties</returns>
        </member>
        <member name="M:CSharpFramework.Serialization.SerializationHelper.ConvertToValidClassName(System.String)">
            <summary>
            This helper class returns a string that contains valid characters only. Invalid characters are replaced by '_'
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Serialization.SerializationHelper.ApplyXMLProperties(System.Xml.XmlElement,System.Object,System.Boolean)">
            <summary>
            Applies property/value pairs (prefab style) to the target object
            </summary>
            <param name="node">The root node that contains the property/value nodes as sub-nodes</param>
            <param name="targetObj">The target object</param>
            <param name="bIncludeFields">If true, also fields are considered, otherwise only properties</param>
            <returns>The number of properties written</returns>
        </member>
        <member name="P:CSharpFramework.Serialization.SerializationHelper.BINARY_FORMATTER">
            <summary>
            Use this global instance for all binary serializations. It sets a binder that resolves potential class conflicts.
            </summary>
        </member>
        <member name="T:CSharpFramework.Serialization.SerializationHelper.VForgeSerializationBinder">
            <summary>
            This binder class helps migrating classes from older SDKs.
            A static instance of a prepared formatter can be used: SerializationHelper.BINARY_FORMATTER
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.SerializationHelper.VForgeSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            Binder that migrates classes
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Scene.ShaderEffectConfig">
            <summary>
            An instance of this class represents a single instance of a shader effect assignment. That is:
            Shader library name, Shader effect name and parameter setup
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.#ctor(CSharpFramework.Scene.ISceneObject)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method 
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method.
            Therefore, you should call GC.SupressFinalize to
            take this object off the finalization queue 
            and prevent finalization code for this object
            from executing a second time.
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.Reset">
            <summary>
            Resets the effect so that it represents a null-effect
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.SetNewLibraryName(System.String)">
            <summary>
            Sets the EffectLibrary property without updating the effect. For internal use only
            </summary>
            <param name="newLib"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.SetNewEffectName(System.String)">
            <summary>
            Sets the EffectLibrary property without updating the effect. For internal use only
            </summary>
            <param name="newLib"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.ParseParameterString(System.String)">
            <summary>
            Parses the parameter string and maps the values to the property list. Leaves all other parameters unmodified.
            </summary>
            <param name="paramstr">parameter string with parameters to modifiy</param>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.BuildParameterList">
            <summary>
            gets a new assembly that represents the effect's parameter list
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.UpdateEffect">
            <summary>
            Notifies all delegates that the shader properties changed
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ShaderEffectConfig._libFilename">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ShaderEffectConfig._effectName">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ShaderEffectConfig._shadermode">
            <summary>
            Internal value - do not use
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.OnDeserialization(System.Object)">
            <summary>
            Perform any tasks which expect the effect properties to be fully deserialized.
            (the effectProperties content is not yet deserialized when our deserialization constructor is called).
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.Clone">
            <summary>
            Clones the config
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.Equals(System.Object)">
            <summary>
            Performs a deep comparsion of all shader properties
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.op_Equality(CSharpFramework.Scene.ShaderEffectConfig,CSharpFramework.Scene.ShaderEffectConfig)">
            <summary>
            Implements the equal operator for comparison between two shader configs. Handles all combinations of null gracefully
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.op_Inequality(CSharpFramework.Scene.ShaderEffectConfig,CSharpFramework.Scene.ShaderEffectConfig)">
            <summary>
            Implements the equal operator for comparison between two shader configs. Handles all combinations of null gracefully
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.ToString">
            <summary>
            Overridden function; returns null to display no text in property grid
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Scene.ShaderEffectConfig.NO_EFFECT">
            <summary>
             This string should always be used if no effect has been assigned
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShaderEffectConfig.HasEffect">
            <summary>
            Indicates whether this instance represents an effect or is just empty.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShaderEffectConfig.Owner">
            <summary>
            Gets or sets the owner scene object that owns this effect
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShaderEffectConfig.EffectLibrary">
            <summary>
            Gets or sets the shader effect library filename
            Setting the libary via this property will also set the shader mode to MANUAL
            Directly set _libFilename to bypass this behaviour
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShaderEffectConfig.EffectName">
            <summary>
            Gets or sets the shader effect name. Effect must be in the library
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShaderEffectConfig.EngineEffectName">
            <summary>
            This version does not use the "No Effect" string but returns a null pointer.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShaderEffectConfig.ParameterString">
            <summary>
            Gets or sets the Parameter string for this effect. The parameter string is built from the properties
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShaderEffectConfig.EffectParameter">
            <summary>
            Gets the effect specific paramters (dynamic class)
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.ShaderEffectConfig.OnShaderEffectChanged">
            <summary>
            Shader effect changed event for this effect
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.ShaderEffectConfig.OnAnyShaderEffectChanged">
            <summary>
            Static event triggered when any shader effect changed
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShaderEffectConfig.Modifiable">
            <summary>
            Implements the ISceneObject interface.
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ShaderEffectConfig.Modified">
            <summary>
            Implements the ISceneObject interface and sets the Dirty status
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ShaderEffectConfig.ShaderEffectChangedArgs">
            <summary>
            shader effect changed event args - no specific information yet
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectConfig.ShaderEffectChangedArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ShaderEffectConfig.ShaderEffectChangedEventHandler">
            <summary>
            Delegate
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ShaderEffectNameConverter">
            <summary>
            String converter for enumerating effect names in a shader library
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standard values are supported
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectNameConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standard values are supported, but not exclusively
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Scene.ShaderEffectNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Generates a collection of effect names. The owner is assumed to be a ShaderEffectConfig which is
            used to enumerate the effect names from that library
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.SceneFileWatcher">
            <summary>
            The SceneFileWatcher class uses the FileWatcher of .NET to listen for changes
            in the layer folder. It triggeres events when another user changes the content
            or the lock status of a layer.
            </summary>
        </member>
        <member name="M:CSharpFramework.SceneFileWatcher.#ctor(CSharpFramework.IScene)">
            <summary>
            Constructor
            </summary>
            <param name="scene">scene to observe</param>
        </member>
        <member name="M:CSharpFramework.SceneFileWatcher.Dispose">
            <summary>
            Disposes this object
            </summary>
        </member>
        <member name="M:CSharpFramework.SceneFileWatcher.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:CSharpFramework.SceneFileWatcher.Dispose(System.Boolean)">
            <summary>
            Virtual dispose function that frees the managed resources
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:CSharpFramework.SceneFileWatcher._watcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Event that is called when a file in the observed directory was changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.SceneFileWatcher._timerLockStatusChanged_Tick(System.Object,System.EventArgs)">
            <summary>
            Timer event used to queue succeeding lock status changes.
            Triggers the LockStatusChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.SceneFileWatcher._timerLayerContentChanged_Tick(System.Object,System.EventArgs)">
            <summary>
            Timer event used queue succeeding layer content changes.
            Triggers the LayerContentChanged event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:CSharpFramework.SceneFileWatcher.LockStatusChanged">
            <summary>
            This event is triggered when another user changes the lock status of a layer.
            </summary>
        </member>
        <member name="E:CSharpFramework.SceneFileWatcher.LayerContentChanged">
            <summary>
            This event is triggered when another user changes the content of a layer.
            </summary>
        </member>
        <member name="T:CSharpFramework.SceneFileWatcher.LayerChangedEventArgs">
            <summary>
            Event argument class for the LayerContentChanged event
            </summary>
        </member>
        <member name="M:CSharpFramework.SceneFileWatcher.LayerChangedEventArgs.#ctor(CSharpFramework.LayerCollection)">
            <summary>
            Constructor
            </summary>
            <param name="layers">collection of layers with modified content</param>
        </member>
        <member name="F:CSharpFramework.SceneFileWatcher.LayerChangedEventArgs.ModifiedLayers">
            <summary>
            Collection of layers with modified content (can be empty).
            
            Please note that this collection only contains layers that are alread part of
            our scene. If another user adds a new layer then the LayerContentChanged event
            will also be triggered, but the new layer will not be part of this collection.
            The collection may thus be empty.
            </summary>
        </member>
        <member name="T:CSharpFramework.SceneFileWatcher.LayerChangedEventHandler">
            <summary>
            Delegate for LayerContentChanged event
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.EditableTypeAttribute">
            <summary>
            This attribute associates a type with the property. This is for instance useful for the TypedCollectionEditor property editor,
            but it can be used for other purposes as well
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.EditableTypeAttribute.#ctor(System.Type)">
            <summary>
            Constructor, takes the type
            </summary>
            <param name="_type">The type associated with the property</param>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.EditableTypeAttribute.EditableType">
            <summary>
            The type passed in the constructor
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.TypedCollectionEditor">
            <summary>
            This property editor allows to edit a collection of specific types. The property declaration of an ArrayList 
            might look as follows:
                [EditorAttribute(typeof(TypedCollectionEditor), typeof(UITypeEditor)), EditableTypeAttribute(typeof(ShaderEffectParam))]
                public ArrayList Parameter
                {
                  get {return _parameter;}
                  set {_parameter=value;}
                }
            So this class works around the limitation that the standard collection editor creates new instances of type "object".
            To specify the actual type, use the EditableTypeAttribute attribute.
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.TypedCollectionEditor.UsedCollectionForm">
            <summary>
            Internal state
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.TypedCollectionEditor.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.TypedCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overridden EditValue function; searches for the EditableTypeAttribute abd uses it as a type
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.TypedCollectionEditor.CreateNewItemTypes">
            <summary>
            Overridden function to create instances of our own type
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.TypedCollectionEditor.CreateCollectionItemType">
            <summary>
            Overridden function to return our own type
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.TypedCollectionEditor.CancelChanges">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.TypedCollectionEditor.CreateCollectionForm">
            <summary>
            Overridden function to return our own modified version of the collection form
            
            This is a dirty HACK!!! 
            
            Only necessary because microsoft does not let you
            show the help of the property grid in a nice way.
            
            </summary>
            <returns>The modified collection form</returns>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.DefaultServiceProvider">
            <summary>
            Helper class to launch a UIEditor outside a property grid
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.DefaultServiceProvider.#ctor(System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Constructor
            </summary>
            <param name="instance"></param>
            <param name="propertyDesc"></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.DefaultServiceProvider.OnComponentChanged">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.DefaultServiceProvider.OnComponentChanging">
            <summary>
            Internal function
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.DefaultServiceProvider.Container">
            <summary>
            Internal function
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.DefaultServiceProvider.Instance">
            <summary>
            Internal function
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.DefaultServiceProvider.PropertyDescriptor">
            <summary>
            Internal function
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.SliderRangeAttribute">
            <summary>
            Attribute for setting slider range
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.SliderRangeAttribute.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="_fMin">min slider value</param>
            <param name="_fMax">max slider value</param>
            <param name="_iSubDiv">number of slider subdivisions (0 for no quantisation)</param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.SliderRangeAttribute.GetPos(System.Single)">
            <summary>
            Translate value to ticks 
            </summary>
            <param name="fValue">input value</param>
            <returns>slider tick count</returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.SliderRangeAttribute.GetValue(System.Int32)">
            <summary>
            Translate slider tick position to value
            </summary>
            <param name="iPos">Slider tick position</param>
            <returns>resulting value</returns>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.SliderRangeAttribute.fMin">
            <summary>
            Value range min
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.SliderRangeAttribute.fMax">
            <summary>
            Value range max
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.SliderRangeAttribute.iSubDiv">
            <summary>
            Number of slider tick subdivisions
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.SliderRangeAttribute.ValueScale">
            <summary>
            Internal scaling value
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.SliderRangeAttribute.RangeMin">
            <summary>
            min of the value range (Slider ticks)
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.SliderRangeAttribute.RangeMax">
            <summary>
            max of the value range (Slider ticks)
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.SliderEditor">
            <summary>
            A UI dropdown property editor that displays a horizontal slider. This editor works together with SliderRangeAttribute to set the min/max value
            and optionally with the PropertyLiveUpdateAttribute to respond to live update changes.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.SliderEditor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.SliderEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.SliderEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overriden Edit value function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.SliderEditor.tbr_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            The trackbar mouse up event should close the drop down again
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.ColorCurveEditor">
            <summary>
            UITypeEditor that opens a modal color curve editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ColorCurveEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.ColorCurveEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CSharpFramework.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CSharpFramework.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:CSharpFramework.Editor.IAppInterface">
            <summary>
            Class interface to trigger editor specific events. One instance can be accessed via EditorManager.AppInterface
            </summary>
        </member>
        <member name="M:CSharpFramework.Editor.IAppInterface.Shutdown(System.Boolean)">
            <summary>
            Triggers shutdown of the editor.
            </summary>
            <param name="bPrompt">true to prompt a message about unsaved scene etc.</param>
            <returns>true if editor shuts down</returns>
        </member>
        <member name="T:CSharpFramework.Dialogs.ShowAssetListDlg">
            <summary>
            Dialog to show used assets
            </summary>
            <summary>
            Dialog to show used assets
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.ShowAssetListDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShowAssetListDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShowAssetListDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShowAssetListDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ShowAssetListDlg.AssetList">
            <summary>
            Getter and setter for asset array to show
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ShowAssetListDlg.Description">
            <summary>
            Setter for the description
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.FolderTreeView">
            <summary>
            A Tree view that displays folders and files in a project directory
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.FolderTreeView.FolderIcon">
            <summary>
            Image list icon index for folder icon
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.FolderTreeView.FolderOpenIcon">
            <summary>
            Image list icon index for folder open icon
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.FolderTreeView.FileIcon">
            <summary>
            Image list icon index for file icon
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.FolderTreeView.DataDirIcon">
            <summary>
            Image list icon index for data directories (basedata,...)
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.#ctor">
            <summary>
            Constructor of folder tree view
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.GetCurrentFilename(System.Boolean)">
            <summary>
            Return current filename 
            </summary>
            <param name="bFileOnly"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.Build(System.String,System.String[])">
            <summary>
            Build the directory tree
            </summary>
            <param name="StartDir">Start directory</param>
            <param name="filter">File filter, e.g. {".bmp"}</param>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.ExpandNodeByNames(System.String[],System.Windows.Forms.TreeNode)">
            <summary>
            expands nodes via names
            </summary>
            <param name="index">the current index to use in the names array</param>
            <param name="currentNode">the node in which we are searching right now</param>
            <returns>true if the file or directory has been selected, false otherwise</returns>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.ExpandNodeByNames(System.String[],System.Int32,System.Windows.Forms.TreeNode)">
            <summary>
            expands nodes via names
            </summary>
            <param name="names">the names in hierarchical order</param>
            <param name="index">the current index to use in the names array</param>
            <param name="currentNode">the node in which we are searching right now</param>
            <returns>true if the file or directory has been selected, false otherwise</returns>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.SelectFile(System.String)">
            <summary>
            Select a file or directory.
            </summary>
            <param name="fileName">relative file or directory name to select in the view</param>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.FindTreeNode(System.String)">
            <summary>
            Finds and returns a tree node with a specific tag. The noed tags are set to the directory
            </summary>
            <param name="tag">tag (i.e. directory) to find in the view</param>
            <returns>Tree node with specified tag</returns>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.FindTreeNode_rec(System.Windows.Forms.TreeNodeCollection,System.String)">
            <summary>
            Helper that finds and returns a tree node with a specific tag
            </summary>
            <param name="col">collection of tree nodes to recursively check</param>
            <param name="tag">tag (i.e. directory) to find in the collection</param>
            <returns>Tree node with specified tag</returns>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.RecAddDir(System.String,System.Windows.Forms.TreeNode,System.String[],System.Int64)">
            <summary>
            Recursively adds file nodes to start directory
            </summary>
            <param name="StartDir"></param>
            <param name="node"></param>
            <param name="filter"></param>
            <param name="StartTime"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.IsDirectoryAccessible(System.String)">
            <summary>
            Checks whether access to the passed directory is provided.
            E.g. returns false for system directories.
            </summary>
            <param name="dir">path of directory to check</param>
            <returns>true if access is allowed</returns>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.OnAfterExpand(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.FolderTreeView.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:CSharpFramework.Controls.FolderTreeView.OnlyAddFoldersWithFiles">
            <summary>
            flag. For loading we don't want all the subdirs
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.FolderTreeView.ShowBaseData">
            <summary>
            flag that determines whether the global BaseData folder is added (if available)
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.FolderTreeView.CustomDirectories">
            <summary>
            Optional collection with custom absolute data directories. Every Entry in the array must be of type IProject.CustomDataDirectoryEntry
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.FolderTreeView.BrowseDirectoriesOnly">
            <summary>
            If enabled, this dialog can be used to browse a directory name. Files are hidden
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.CustomGroupBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.CustomGroupBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSharpFramework.Controls.CustomGroupBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.MoveShapeAction">
            <summary>
            Action to move a single shape
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.MoveShapeAction.#ctor(CSharpFramework.Shapes.Shape3D,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Constructor that takes the shape to move and the move positions
            </summary>
            <param name="_shape">The shape to move</param>
            <param name="_oldPos">The old position of the shape</param>
            <param name="_newPos">The new position of the shape</param>
        </member>
        <member name="M:CSharpFramework.Actions.MoveShapeAction.Undo">
            <summary>
            Sets the old position
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.MoveShapeAction.Do">
            <summary>
            Sets the new position
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.MoveShapeAction.ShortName">
            <summary>
            Short name of the action, to show in the menu
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.MoveShapeAction.LongName">
            <summary>
            Long name of the action, to show in the history
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.MoveShapeAction.Valid">
            <summary>
            Overridden valid function (checks layer editable flag)
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.MoveShapeAction.IconImage">
            <summary>
            Static function to return the image used to display this type of action in the history
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.MoveShapeAction.IconIndex">
            <summary>
            Return the icon index for this action
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.MoveShapesAction">
            <summary>
            Group action to move a collection of shapes individually
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.MoveShapesAction.#ctor(CSharpFramework.ShapeCollection,CSharpFramework.Math.Vector3F[],CSharpFramework.Math.Vector3F[])">
            <summary>
            Constructor that takes a collections of shapes to move and the according arrays of old and new positions
            </summary>
            <param name="_shapes">Collection of shapes to move</param>
            <param name="_oldPositions">Array of old positions</param>
            <param name="_newPositions">Optional array of new positions (if null it uses the current shape position)</param>
        </member>
        <member name="P:CSharpFramework.Actions.MoveShapesAction.IconIndex">
            <summary>
            Return the icon index for this action
            </summary>
        </member>
        <member name="T:CSharpFramework.ActionCollection">
            <summary>
            A collection of actions. Used for group actions
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.FreezeShapeAction">
            <summary>
            Action that sets/removes the ShapeBase.HintFlags_e.ManualLock flag
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.UndoRedoTest.SetUp">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.UndoRedoTest.TearDown">
            <summary>
            Test function
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.UndoRedoTest.TestNestedClass">
            <summary>
            Tests whether modifications to nested classes (e.g. color.R) are correctly added to the 
            undo/redo stack
            </summary>
        </member>
        <member name="M:CSharpFramework.Tests.UndoRedoTest.TestNestedStruct">
            <summary>
            Tests whether modifications to nested structs (e.g. vector.X) are correctly added to the 
            undo/redo stack
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.PropertyDictionary">
            <summary>
            Dictionary for property name/value pairs
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.PropertyDictionary.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.PropertyDictionary.AddProperty(System.String,System.Object)">
            <summary>
            Adds the passed property name/value pair to the dictionary
            </summary>
            <param name="propertyName">name of the property</param>
            <param name="propertyValue">value of the property</param>
        </member>
        <member name="M:CSharpFramework.Shapes.PropertyDictionary.CreateAction(CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Creates an action for setting all properties on the passed shape
            </summary>
            <param name="targetShape">shape the property will be set on</param>
            <returns>action which sets the properties on the passed shape when being executed</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PropertyDictionary.CreateAction(CSharpFramework.ShapeCollection)">
            <summary>
            Creates an action for setting the properties on multiple shapes
            </summary>
            <param name="targetShapes">list of shapes the property shall be applied to </param>
            <returns>action which sets the properties on the passed shapes when being executed</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PropertyDictionary.CreateAction(CSharpFramework.Scene.ShapeComponent)">
            <summary>
            Creates an action for setting all properties on the passed component
            </summary>
            <param name="targetComponent">component the property will be set on</param>
            <returns>action which sets the properties on the passed component when being executed</returns>
        </member>
        <member name="M:CSharpFramework.Shapes.PropertyDictionary.CreateAction(CSharpFramework.Scene.ShapeComponent[])">
            <summary>
            Creates an action for setting the properties on multiple components
            </summary>
            <param name="targetComponents">list of components the property shall be applied to</param>
            <returns>action which sets the properties on the passed shapes when being executed</returns>
        </member>
        <member name="F:CSharpFramework.Shapes.PropertyDictionary._dict">
            <summary>
            Dictionary of property name/value pairs
            </summary>
        </member>
        <member name="P:CSharpFramework.Shapes.PropertyDictionary.Empty">
            <summary>
            Indicates whether the dictionary is empty
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ProgressStatus">
            <summary>
            Class that provides functionality to handle a progress, e.g. a loading progress. A static instance can for be obtained via
            EditorManager.Progress
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ProgressStatus.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ProgressStatus.Reset">
            <summary>
            Reset the progress status
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ProgressStatus.SetRange(System.Single,System.Single)">
            <summary>
            Sets the percentage range for subsequent calls of set Percentage. The new percentage range [0..100] will 
            be mapped to to [fLower,fUpper] which is useful for loading sub categories (e.g. V3D map file while loading scene)
            </summary>
            <param name="fLower">new lower percentage range border</param>
            <param name="fUpper">new upper percentage range border</param>
        </member>
        <member name="F:CSharpFramework.Scene.ProgressStatus._fAbsPercentage">
            <summary>
            Current abs. percentage value
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ProgressStatus._fAbsLastPercentage">
            <summary>
            Percentage at the last time
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ProgressStatus._fRangeStart">
            <summary>
            Current percentage range start
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ProgressStatus._fRangeMul">
            <summary>
            Current percentage range multiplier
            </summary>
        </member>
        <member name="F:CSharpFramework.Scene.ProgressStatus._fGranularity">
            <summary>
            Update granularity
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ProgressStatus.OnProgressChanged">
            <summary>
            Overridable that is called whenever the progress percentage value changes
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ProgressStatus.OnStatusStringChanged">
            <summary>
            Overridable that is called whenever the progress status string changes
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ProgressStatus.Percentage">
            <summary>
            Get or set the progress percentage
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ProgressStatus.StatusString">
            <summary>
            Gets or sets a sub status string that can be displayed as additional progress information
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ProgressStatus.WantsAbort">
            <summary>
            Overridable to respond to aborting a progress (if supported). This base implementation just sets an internal flag
            </summary>
        </member>
        <member name="P:CSharpFramework.Scene.ProgressStatus.IsAbortable">
            <summary>
            Overridable to mark a progress as abortable. The default is false
            </summary>
        </member>
        <member name="E:CSharpFramework.Scene.ProgressStatus.ProgressChanged">
            <summary>
            Progress changed event
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ProgressStatus.ProgressChangedArgs">
            <summary>
            Progress changed event
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ProgressStatus.ProgressChangedArgs.#ctor(CSharpFramework.Scene.ProgressStatus)">
            <summary>
            Constructor
            </summary>
            <param name="_progress"></param>
        </member>
        <member name="F:CSharpFramework.Scene.ProgressStatus.ProgressChangedArgs.Progress">
            <summary>
            Current progress status
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ProgressStatus.ProgressChangedEventHandler">
            <summary>
            Delegate
            </summary>
        </member>
        <member name="T:CSharpFramework.Scene.ProgressBarControlWrapper">
            <summary>
            Helper class that implements ProgressStatus and forwards to the control
            </summary>
        </member>
        <member name="M:CSharpFramework.Scene.ProgressBarControlWrapper.#ctor(System.Windows.Forms.ProgressBar)">
            <summary>
            Constructor
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:CSharpFramework.Scene.ProgressBarControlWrapper.OnProgressChanged">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.FlagsEditor">
            <summary>
            Implements a custom type editor for selecting flags in a list.
            You can specify this type editor for enumerations that have the "Flags" attribute
            assigned, as done in the following sample:
            
            [Flags, 
             Editor(typeof(FlagsEditor), 
             typeof(System.Drawing.Design.UITypeEditor))]
            public enum MyBitmask
            {
              [NonEditableFlag]
              None = 0,
              [Description("Description for the RED value.")]
              Red = 1,
              [Description("Description for the GREEN value.")]
              Green = 2,
              [Description("Description for the BLUE value.")]
              Blue = 4
            }
            
            You can use the NonEditableFlag attribute to mark specific enumeration values
            as non editable for the user.
            
            The description of the enumeration values is shown as tooltips when hovering above the flags.
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsEditor.edSvc">
            <summary>
            Service instances passed to the EditValue function
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsEditor.clb">
            <summary>
             Instance of the checked listbox that is displayed as dropdown
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsEditor.tooltipControl">
            <summary>
             Control instance for displaying tooltips
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FlagsEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overrides the method used to provide basic behaviour for selecting editor.
            Shows our custom control for editing the value.
            </summary>
            <param name="context">The context of the editing control</param>
            <param name="provider">A valid service provider</param>
            <param name="value">The current value of the object to edit</param>
            <returns>The new value of the object</returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FlagsEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Shows a dropdown icon in the property editor
            </summary>
            <param name="context">The context of the editing control</param>
            <returns>Returns <c>UITypeEditorEditStyle.DropDown</c></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FlagsEditor.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            When got the focus, handle the lost focus event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FlagsEditor.OnMouseMoved(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse is moved over the checkedlistbox. 
            Sets the tooltip of the item under the pointer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FlagsEditor.ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Close the dropdowncontrol when the user has selected a value
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.FlagsEditor.clbItem">
            <summary>
            Internal class used for storing custom data in listviewitems
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FlagsEditor.clbItem.#ctor(System.String,System.UInt32,System.String)">
            <summary>
            Creates a new instance of the <c>clbItem</c>
            </summary>
            <param name="str">The string to display in the <c>ToString</c> method. 
            It will contains the name of the flag</param>
            <param name="_value">The integer value of the flag</param>
            <param name="tooltip">The tooltip to display in the <see cref="T:System.Windows.Forms.CheckedListBox"/></param>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.FlagsEditor.clbItem.ToString">
            <summary>
            Gets the name of this item
            </summary>
            <returns>The name passed in the constructor</returns>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.FlagsEditor.clbItem.Value">
            <summary>
            Gets the int value for this item
            </summary>
        </member>
        <member name="P:CSharpFramework.PropertyEditors.FlagsEditor.clbItem.Tooltip">
            <summary>
            Gets the tooltip for this item
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.NonEditableFlagAttribute">
            <summary>
            Field Attribute to be used in combination with the FlagsEditor custom type editor class.
            Used to mark specific enumeration values as non editable for the user.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.NonEditableFlagAttribute.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.FlagsInt8_e">
            <summary>
            This enum allows to set a bitmask that consists of 8 bits
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt8_e.None">
            <summary>
            no bits set
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt8_e.All">
            <summary>
            All bits set
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt8_e.Bit0">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt8_e.Bit1">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt8_e.Bit2">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt8_e.Bit3">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt8_e.Bit4">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt8_e.Bit5">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt8_e.Bit6">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt8_e.Bit7">
            <summary>
            bit value
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.FlagsInt16_e">
            <summary>
            This enum allows to set a bitmask that consists of 16 bits
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.None">
            <summary>
            no bits set
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.All">
            <summary>
            All bits set
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit0">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit1">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit2">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit3">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit4">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit5">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit6">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit7">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit8">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit9">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit10">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit11">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit12">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit13">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit14">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt16_e.Bit15">
            <summary>
            bit value
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.FlagsInt32_e">
            <summary>
            This enum allows to set a bitmask that consists of 32 bits
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.None">
            <summary>
            no bits set
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.All">
            <summary>
            All bits set
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit0">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit1">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit2">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit3">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit4">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit5">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit6">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit7">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit8">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit9">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit10">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit11">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit12">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit13">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit14">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit15">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit16">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit17">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit18">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit19">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit20">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit21">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit22">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit23">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit24">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit25">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit26">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit27">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit28">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit29">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit30">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.FlagsInt32_e.Bit31">
            <summary>
            bit value
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.Bool2_e">
            <summary>
            This enum allows to set a bitmask that consists of 2 bits
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool2_e.None">
            <summary>
            no bits set
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool2_e.All">
            <summary>
            All bits set
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool2_e.Bit0">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool2_e.Bit1">
            <summary>
            bit value
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.Bool3_e">
            <summary>
            This enum allows to set a bitmask that consists of 2 bits
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool3_e.None">
            <summary>
            no bits set
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool3_e.All">
            <summary>
            All bits set
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool3_e.Bit0">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool3_e.Bit1">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool3_e.Bit2">
            <summary>
            bit value
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.Bool4_e">
            <summary>
            This enum allows to set a bitmask that consists of 2 bits
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool4_e.None">
            <summary>
            no bits set
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool4_e.All">
            <summary>
            All bits set
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool4_e.Bit0">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool4_e.Bit1">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool4_e.Bit2">
            <summary>
            bit value
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.Bool4_e.Bit3">
            <summary>
            bit value
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.MathHelpers.#ctor">
            <summary>
            Prevent creation
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.MathHelpers.FLOAT_EPSILON">
            <summary>
            Same as in C++
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.MathHelpers.FLOAT_MIN">
            <summary>
            Same as in C++
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.MathHelpers.VECTOR_SEPARATORS">
            <summary>
            Char array that can be iused for string.Split functions on vectors
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.MathHelpers.RandomGenerator">
            <summary>
            One global instance of a random generator that can be accessed from everywhere
            </summary>
        </member>
        <member name="T:CSharpFramework.Layout.Layout">
            <summary>
            Layout configuration for a docking container.
            Keeps a reference to the layout file and provides functions
            for loading/saving the layout.
            </summary>
        </member>
        <member name="M:CSharpFramework.Layout.Layout.#ctor(System.String,CSharpFramework.Layout.LayoutManager)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the layout (also: filename)</param>
            <param name="manager">Parent layout manager</param>
        </member>
        <member name="M:CSharpFramework.Layout.Layout.ToString">
            <summary>
            Overriden ToString implementation
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Layout.Layout.Activate">
            <summary>
            Sets this layout as active (in the layout manager)
            </summary>
        </member>
        <member name="M:CSharpFramework.Layout.Layout.Load">
            <summary>
            Loads the layout into the docking container
            </summary>
        </member>
        <member name="M:CSharpFramework.Layout.Layout.LoadInternal(System.String,System.Boolean)">
            <summary>
            Loads the layout into the docking container
            </summary>
        </member>
        <member name="M:CSharpFramework.Layout.Layout.Save">
            <summary>
            Saves the layout (from the docking container)
            </summary>
        </member>
        <member name="M:CSharpFramework.Layout.Layout.RestoreDefault">
            <summary>
            Restores the default layout from the application directory
            </summary>
        </member>
        <member name="M:CSharpFramework.Layout.Layout.CopySettingsFrom(CSharpFramework.Layout.Layout)">
            <summary>
            Copy the layout configuration from the passed layout.
            Attention: overwrites the existing user layout file of this layout
            </summary>
            <param name="sourceLayout"></param>
        </member>
        <member name="F:CSharpFramework.Layout.Layout._name">
            <summary>
            Name of the layout
            </summary>
        </member>
        <member name="F:CSharpFramework.Layout.Layout._manager">
            <summary>
            Parent layout manager
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.Layout.UserFilePath">
            <summary>
            Gets the absolute path to the writeable layout file within the user configuration directory
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.Layout.DefaultFilePath">
            <summary>
            Gets the absolute path to the readonly layout file within the default layout directory
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.Layout.Name">
            <summary>
            Name of the layout
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.Layout.HasDefault">
            <summary>
            Indicates whether the layout configuration has a default configuration that can be restored
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.Layout.LayoutManager">
            <summary>
            Gets the layout manager responsible for this layout
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.Layout.DefaultShortCut">
            <summary>
            Gets the default hotkey shortcut for this layout.
            We have default shortcuts for all layouts that are shipped with the initial SDK (non-user-ones)
            </summary>
        </member>
        <member name="P:CSharpFramework.Layout.Layout.IsDefaultLayout">
            <summary>
            Indicates whether this is the default layout
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.ShortCutSetupDlg">
            <summary>
            Dialog for setting up all global hotkeys.
            </summary>
        </member>
        <member name="F:CSharpFramework.Dialogs.ShortCutSetupDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShortCutSetupDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShortCutSetupDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ShortCutSetupDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ShortCutSetupDlg.ShortCuts">
            <summary>
            Gets or sets the config to edit. The set function clones it
            </summary>
        </member>
        <member name="T:CSharpFramework.Dialogs.ProgressBarDlg">
            <summary>
            Modal dialog that shows a progress bar.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ProgressBarDlg.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:CSharpFramework.Dialogs.ProgressBarDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSharpFramework.Dialogs.ProgressBarDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CSharpFramework.Dialogs.ProgressBarDlg.Progress">
            <summary>
            Gets or sets the current progress percentage
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.MRUListArgs">
            <summary>
            Event class for MRU list notification (i.e. an item from the MRU list is selected)
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.MRUListArgs.#ctor(CSharpFramework.Controls.MRUList,CSharpFramework.Controls.MRUList.MRUMenuItem)">
            <summary>
            Constructor
            </summary>
            <param name="_list">MRU list</param>
            <param name="_item">menu item</param>
        </member>
        <member name="F:CSharpFramework.Controls.MRUListArgs.list">
            <summary>
            The MRU list
            </summary>
        </member>
        <member name="F:CSharpFramework.Controls.MRUListArgs.item">
            <summary>
            The menu item
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.MRUListEventHandler">
            <summary>
            Delegate to send MRU changed events
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.MRUList">
            <summary>
            MRUList class. An instance of this class represents a MRU (=most recently used) list, e.g. files in
            the file menu. The MRUList class creates menu sub items of a menu item (popup)
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.MRUList.#ctor(System.Windows.Forms.MenuItem)">
            <summary>
            Constructor: Takes the parent menu item that is a popup
            </summary>
            <param name="parent">Parent menu item to append the MRU list to</param>
        </member>
        <member name="M:CSharpFramework.Controls.MRUList.Clear">
            <summary>
            Clears the list of MRU items
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.MRUList.Find(System.String)">
            <summary>
            Finds the entry with specified file name.
            </summary>
            <param name="filename">file name to find in MRU list</param>
            <returns>Found index; -1 if not in list</returns>
        </member>
        <member name="M:CSharpFramework.Controls.MRUList.Add(System.String)">
            <summary>
            Adds a file name to the MRU list. If already in there, put it to topmost position
            </summary>
            <param name="filename">file name to add</param>
        </member>
        <member name="M:CSharpFramework.Controls.MRUList.Remove(System.String)">
            <summary>
            Remove file name from MRU list (e.g. if file wasn't found)
            </summary>
            <param name="filename">file name to remove</param>
        </member>
        <member name="M:CSharpFramework.Controls.MRUList.OnItemClick(System.Object,System.EventArgs)">
            <summary>
            Notification when menu item has been selected
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.MRUList.SendMRUListEvent(CSharpFramework.Controls.MRUListArgs)">
            <summary>
            Send event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.Controls.MRUList.LoadFromRegistry(System.String)">
            <summary>
            Load the MRU list from registry
            </summary>
            <param name="path">Full path of the registry</param>
            <returns>Number of MRU entries found</returns>
        </member>
        <member name="M:CSharpFramework.Controls.MRUList.SaveToRegistry">
            <summary>
            Save MRU list to registry using the same path as for loading
            </summary>
            <returns>true, if successful</returns>
        </member>
        <member name="M:CSharpFramework.Controls.MRUList.SaveToRegistry(System.String)">
            <summary>
            Save MRU list to registry
            </summary>
            <param name="path">Full registry path to use</param>
            <returns>true, if successful</returns>
        </member>
        <member name="M:CSharpFramework.Controls.MRUList.BuildMenuItemList(System.Windows.Forms.Menu.MenuItemCollection,System.String)">
            <summary>
            Builds a list of menu items from the MRU entries
            </summary>
            <param name="destItems">collection to add the items to</param>
            <param name="prependName">Name string to prepend to each menu item name</param>
        </member>
        <member name="P:CSharpFramework.Controls.MRUList.Count">
            <summary>
            Get the number of entries in the MRU list
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.MRUList.MaxCount">
            <summary>
            Get (or set) the maximum number of entries. Default is 8
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.MRUList.LatestPathEntry">
            <summary>
            Gets the latest entry in the MRU list (as path).
            Returns null if the list is empty.
            </summary>
        </member>
        <member name="E:CSharpFramework.Controls.MRUList.MRUEvent">
            <summary>
            Event handler for the MRU events
            </summary>
        </member>
        <member name="T:CSharpFramework.Controls.MRUList.MRUMenuItem">
            <summary>
            MRUMenuItem: represents a single entry in the MRU list
            </summary>
        </member>
        <member name="M:CSharpFramework.Controls.MRUList.MRUMenuItem.#ctor(System.String,System.String,System.EventHandler)">
            <summary>
            Constructor of a single MRU entry
            </summary>
            <param name="pathname">Full path of this entry</param>
            <param name="displayname">Shorter name to be displayed in the menu</param>
            <param name="onClickHandler">Handler that reacts to the click event</param>
        </member>
        <member name="M:CSharpFramework.Controls.MRUList.MRUMenuItem.Clone">
            <summary>
            Clones a menu item
            </summary>
            <returns>Cloned item</returns>
        </member>
        <member name="P:CSharpFramework.Controls.MRUList.MRUMenuItem.PathName">
            <summary>
            Get the full pathname of the entry
            </summary>
        </member>
        <member name="P:CSharpFramework.Controls.MRUList.MRUMenuItem.DisplayName">
            <summary>
            Get the name displayed in the mneu
            </summary>
        </member>
        <member name="T:CSharpFramework.Contexts.KeyModifier">
            <summary>
            KeyModifier : bitmask passed to OnMouseXYZ functions
            </summary>
        </member>
        <member name="F:CSharpFramework.Contexts.KeyModifier.None">
            <summary>
            no modifier
            </summary>
        </member>
        <member name="F:CSharpFramework.Contexts.KeyModifier.Shift">
            <summary>
            bit for SHIFT key
            </summary>
        </member>
        <member name="F:CSharpFramework.Contexts.KeyModifier.Ctrl">
            <summary>
            bit for CTRL key
            </summary>
        </member>
        <member name="F:CSharpFramework.Contexts.KeyModifier.Alt">
            <summary>
             bit for ALT key
            </summary>
        </member>
        <member name="T:CSharpFramework.Contexts.ContextChangedArgs">
            <summary>
            ContextChangedArgs keeps info about new context
            </summary>
        </member>
        <member name="M:CSharpFramework.Contexts.ContextChangedArgs.#ctor(CSharpFramework.VisionViewBase,CSharpFramework.Contexts.IMouseContext)">
            <summary>
            Constructor
            </summary>
            <param name="view">The view for which the context changes</param>
            <param name="_newcontext">The new context</param>
        </member>
        <member name="F:CSharpFramework.Contexts.ContextChangedArgs.newContext">
            <summary>
            The new context
            </summary>
        </member>
        <member name="F:CSharpFramework.Contexts.ContextChangedArgs.View">
            <summary>
            The owner view
            </summary>
        </member>
        <member name="T:CSharpFramework.Contexts.ContextChangedEventHandler">
            <summary>
            Delegate declaration.
            </summary>
        </member>
        <member name="T:CSharpFramework.Contexts.IMouseContext">
            <summary>
            Base class of a mouse context. A mouse context handles the mouse input in the engine view and moves the
            camera accordingly.
            </summary>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.OnMouseUp(System.Windows.Forms.MouseEventArgs,CSharpFramework.Contexts.KeyModifier,System.Int32,System.Int32)">
            <summary>
            Overridable that is called when a mouse button is released
            </summary>
            <param name="e">Mouse event arguments directly passed through</param>
            <param name="eKeyMod">Key modifier bitmask (Shift, Alt, ...)</param>
            <param name="iOldX">Previous screen x position</param>
            <param name="iOldY">Previous screen y position</param>
            <returns>return true to redraw the view immediately</returns>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.OnMouseDown(System.Windows.Forms.MouseEventArgs,CSharpFramework.Contexts.KeyModifier,System.Int32,System.Int32)">
            <summary>
            Overridable that is called when a mouse button is pressed
            </summary>
            <param name="e">Mouse event arguments directly passed through</param>
            <param name="eKeyMod">Key modifier bitmask (Shift, Alt, ...)</param>
            <param name="iOldX">Previous screen x position</param>
            <param name="iOldY">Previous screen y position</param>
            <returns>return true to redraw the view immediately</returns>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.OnMouseMove(System.Windows.Forms.MouseEventArgs,CSharpFramework.Contexts.KeyModifier,System.Int32,System.Int32)">
            <summary>
            Overridable that is called when the mouse cursor moves in the view
            </summary>
            <param name="e">Mouse event arguments directly passed through</param>
            <param name="eKeyMod">Key modifier bitmask (Shift, Alt, ...)</param>
            <param name="iOldX">Previous screen x position</param>
            <param name="iOldY">Previous screen y position</param>
            <returns>return true to redraw the view immediately</returns>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.OnMouseWheel(System.Windows.Forms.MouseEventArgs,CSharpFramework.Contexts.KeyModifier,System.Int32,System.Int32)">
            <summary>
            Overridable that is called when the mouse wheel is used
            </summary>
            <param name="e">Mouse event arguments directly passed through</param>
            <param name="eKeyMod">Key modifier bitmask (Shift, Alt, ...)</param>
            <param name="iOldX">Previous screen x position</param>
            <param name="iOldY">Previous screen y position</param>
            <returns>return true to redraw the view immediately</returns>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.OnKeyModifierChanged(CSharpFramework.Contexts.KeyModifier,CSharpFramework.Contexts.KeyModifier)">
            <summary>
            Overridable that is called when modifier keys change state, e.g. Shift/Alt/Ctrl key.
            </summary>
            <param name="eOldMod">Old modifier bitmask</param>
            <param name="eNewMod">New (current) modifier bitmask</param>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.OnMouseClick">
            <summary>
            Called when the user clicked into the view
            </summary>
            <returns>return true to redraw the view immediately</returns>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.OnMouseDoubleClick">
            <summary>
            Called when the user double-clicked into the view
            </summary>
            <returns>return true to redraw the view immediately</returns>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.OnPopupContextMenu(System.Windows.Forms.ContextMenu)">
            <summary>
            Gets called right before showing a context menu and allows to modify the entries
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.OnPopupContextMenuStrip(System.Windows.Forms.ContextMenuStrip)">
            <summary>
            Gets called right before showing a context menu and allows to modify the entries
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.ShowContextMenu(System.Windows.Forms.ContextMenu,System.Int32,System.Int32)">
            <summary>
            Non-overridable function to open the context menu
            </summary>
            <param name="menu">The context menu to show</param>
            <param name="x">x-position on screen</param>
            <param name="y">y-position on screen</param>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.ShowContextMenuStrip(System.Windows.Forms.ContextMenuStrip,System.Int32,System.Int32)">
            <summary>
            Helper fucntion to display a context menu at specified position
            </summary>
            <param name="menu"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.PreRenderTickFunction(System.Single)">
            <summary>
            Overridable tick function that is called before scene rendering
            </summary>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.PostRenderTickFunction(System.Single)">
            <summary>
            Overridable tick function that is called after scene rendering
            </summary>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.WantsViewUpdate">
            <summary>
            This flag gets queries right after rendering a frame. Return true if the next update should be triggered right away.
            Note that UpdateView(false) from inside PreRenderTickFunction/PostRenderTickFunction does not have any effect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overridable that is called when a key is pressed
            </summary>
            <param name="e">Key event arguments directly passed through</param>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overridable that is called when a key is released
            </summary>
            <param name="e">Key event arguments directly passed through</param>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.OnActivate(CSharpFramework.VisionViewBase)">
            <summary>
            Function that is called when a context is activated
            </summary>
            <param name="currentView">The current view that uses the context</param>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.OnDeactivate">
            <summary>
            Function that is called when a context is deactivated
            </summary>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.View_LostFocus(System.Object,System.EventArgs)">
            <summary>
            Occurs when the View loses focus.
            </summary>
        </member>
        <member name="F:CSharpFramework.Contexts.IMouseContext._view">
            <summary>
            The current view the context is attached to
            </summary>
        </member>
        <member name="F:CSharpFramework.Contexts.IMouseContext._iMouseX">
            <summary>
            Current mouse position
            </summary>
        </member>
        <member name="F:CSharpFramework.Contexts.IMouseContext._iMouseY">
            <summary>
            Current mouse position
            </summary>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.MoveShapes(CSharpFramework.ShapeCollection,CSharpFramework.Math.Vector3F[])">
            <summary>
            Move a collection of shapes. Spawns actions that use current (=new) position and old position from the array.
            This is because the shapes have already been moved by the gizmo.
            </summary>
            <param name="shapes">The shapes to be moved</param>
            <param name="oldPos">An array of stored old positions</param>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.RotateShapes(CSharpFramework.ShapeCollection,CSharpFramework.Math.Vector3F[],CSharpFramework.Math.Vector3F[])">
            <summary>
            Rotate a collection of shapes. Spawns actions that use current (=new) orientation and old orientation from the array.
            This is because the shapes have already been rotated by the gizmo.
            </summary>
            <param name="shapes">The shapes to be rotated</param>
            <param name="oldOri">The array of old orientations</param>
        </member>
        <member name="M:CSharpFramework.Contexts.IMouseContext.ScaleShapes(CSharpFramework.ShapeCollection,CSharpFramework.Math.Vector3F[])">
            <summary>
            Scale a collection of shapes. Spawns actions that use current (=new) scaling and old scaling from the array.
            This is because the shapes have already been scaled by the gizmo.
            </summary>
            <param name="shapes">The shapes to be scaled</param>
            <param name="oldScale">The array of old scalings</param>
        </member>
        <member name="F:CSharpFramework.Contexts.IMouseContext.DraggingInProgress">
            <summary>
            Global variable to prevent switching mode while dragging is in progress
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.IMouseContext.ProjectionMode">
            <summary>
            Returns the projection mode of the associated view
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.IMouseContext.IsPerspective">
            <summary>
            Returns true if the associated view is in perspective moce
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.IMouseContext.MouseX">
            <summary>
            Returns the current mouse x-position in the view
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.IMouseContext.MouseY">
            <summary>
            Returns the current mouse y-position in the view
            </summary>
        </member>
        <member name="T:CSharpFramework.Contexts.CameraMoveContext">
            <summary>
            Implements the IMouseContext interface and adds standard camera movement control. This is the default camera context in vForge.
            </summary>
        </member>
        <member name="M:CSharpFramework.Contexts.CameraMoveContext.#ctor">
            <summary>
            Constructor of the camera context
            </summary>
        </member>
        <member name="M:CSharpFramework.Contexts.CameraMoveContext.TraceShape(System.Int32,System.Int32)">
            <summary>
            Traces a shape using the ray under the 2D mouse position
            </summary>
            <param name="iScreenX">Mouse x position</param>
            <param name="iScreenY">Mouse y position</param>
            <returns>The traced shape (or null)</returns>
        </member>
        <member name="M:CSharpFramework.Contexts.CameraMoveContext.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overridden key down function
            </summary>
            <param name="e">key event</param>
        </member>
        <member name="M:CSharpFramework.Contexts.CameraMoveContext.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overridden key up function
            </summary>
            <param name="e">key event</param>
        </member>
        <member name="M:CSharpFramework.Contexts.CameraMoveContext.OnKeyModifierChanged(CSharpFramework.Contexts.KeyModifier,CSharpFramework.Contexts.KeyModifier)">
            <summary>
            Overridden key modifier (SHIFT,...) function
            </summary>
            <param name="eOldMod">old modifier bitmask</param>
            <param name="eNewMod">new modifier bitmask</param>
        </member>
        <member name="M:CSharpFramework.Contexts.CameraMoveContext.CloneSelection">
            <summary>
            Helper function to clone the selected shapes
            </summary>
        </member>
        <member name="M:CSharpFramework.Contexts.CameraMoveContext.PreRenderTickFunction(System.Single)">
            <summary>
            Some of the line rendering has to be performed every frame and not just when mouse moves
            </summary>
        </member>
        <member name="M:CSharpFramework.Contexts.CameraMoveContext.ShouldAddSelection(CSharpFramework.Contexts.KeyModifier)">
            <summary>
            Global helper function that determines whether selected shapes should be added
            </summary>
            <param name="eKeyMod"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Contexts.CameraMoveContext.OnMouseDown(System.Windows.Forms.MouseEventArgs,CSharpFramework.Contexts.KeyModifier,System.Int32,System.Int32)">
            <summary>
            Overridden mouse button down function
            </summary>
            <param name="e"></param>
            <param name="eKeyMod"></param>
            <param name="iOldX"></param>
            <param name="iOldY"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Contexts.CameraMoveContext.OnMouseUp(System.Windows.Forms.MouseEventArgs,CSharpFramework.Contexts.KeyModifier,System.Int32,System.Int32)">
            <summary>
            Overridden mouse button up function
            </summary>
            <param name="e"></param>
            <param name="eKeyMod"></param>
            <param name="iOldX"></param>
            <param name="iOldY"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Contexts.CameraMoveContext.OnMouseMove(System.Windows.Forms.MouseEventArgs,CSharpFramework.Contexts.KeyModifier,System.Int32,System.Int32)">
            <summary>
            Overridden mouse button move function
            </summary>
            <param name="e"></param>
            <param name="eKeyMod"></param>
            <param name="iOldX"></param>
            <param name="iOldY"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Contexts.CameraMoveContext.OnMouseWheel(System.Windows.Forms.MouseEventArgs,CSharpFramework.Contexts.KeyModifier,System.Int32,System.Int32)">
            <summary>
            Overridden mouse button wheel function
            </summary>
            <param name="e"></param>
            <param name="eKeyMod"></param>
            <param name="iOldX"></param>
            <param name="iOldY"></param>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Contexts.CameraMoveContext.AllowShapeSelection">
            <summary>
            Gets or sets the flag that determines whether this context can pick shapes in the view (e.g. using SHIFT key). Default is true.
            Can be disabled for custom contexts of derived classes.
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.CameraMoveContext.ShowContextMenuOnRMB">
            <summary>
            If enabled (default), this context opens a context menu when right clicking into the view 
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.CameraMoveContext.AllowRecenterMouse">
            <summary>
            If enabled (default), the mouse cursor is re-centered to the last position when the mouse button is released
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.CameraMoveContext.AlignMode">
            <summary>
            Gets or Sets the Alignment mode
            </summary>
        </member>
        <member name="P:CSharpFramework.Contexts.CameraMoveContext.MoveCameraWithKeys">
            <summary>
            Determines whether the user can move the camera by pressing the arrow or W,A,S,D keys
            </summary>
        </member>
        <member name="T:CSharpFramework.BaseTypes.CurvePoint">
            <summary>
            Class that represents a single point of a curve (position and tangents)
            </summary>
        </member>
        <member name="T:CSharpFramework.BaseTypes.PointList">
            <summary>
            Class that represents a single curve (array of curve points)
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.PointList.CreateCurvePointAt(System.Single,System.Single)">
            <summary>
            Creates a new point at x-position. If epsilon>=0 then it re-uses an existing one
            </summary>
            <param name="fX"></param>
            <param name="fEpsilon"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.PointList.SortKeys">
            <summary>
            Sort the Points according to their x-Position
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.PointList.GetPoint(System.Single)">
            <summary>
            Get a point (with x/y coordinates) from bezier curve
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.PointList.GetValue(System.Drawing.PointF[],System.Single)">
            <summary>
            Calcualtes the y value at x position where x is clamped to [0..Duration]
            </summary>
            <param name="points">array of points</param>
            <param name="x">x-coordinate</param>
            <returns>y-coordinate</returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.PointList.CreateLookupArray(System.Int32)">
            <summary>
            Returns a float array that represents lookups for this curve
            </summary>
            <param name="iWidth">width of the control, thus also size of lookup array</param>
            <returns>a float array that represents lookups for this curve</returns>
        </member>
        <member name="P:CSharpFramework.BaseTypes.PointList.Duration">
            <summary>
            Returns the largest x value in the curve
            </summary>
        </member>
        <member name="T:CSharpFramework.BaseTypes.ColorCurves">
            <summary>
            This class has 4 curves for separate RGBA
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorCurves.SetCurveColors">
            <summary>
            Sets the display colors for each channel
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorCurves.GetColorCurve(CSharpFramework.BaseTypes.ColorCurves.ColorType)">
            <summary>
            Returns a color channel
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorCurves.GetColorCurve(System.Int32)">
            <summary>
            Returns a color channel
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorCurves.CreateColorArray(System.Int32)">
            <summary>
            Returns an array of color values that represent a lookup for this curve
            </summary>
            <param name="iWidth"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorCurves.Clear">
            <summary>
            Clear all color curves (R, G, B, A)
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorCurves.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorCurves.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CSharpFramework.BaseTypes.ColorCurves.Empty">
            <summary>
            Indicates whether this curve is empty or not
            </summary>
        </member>
        <member name="T:CSharpFramework.BaseTypes.CurveDefinition">
            <summary>
            CurveDefinition : Either has a single curve, a color curve or a bitmap lookup (legacy)
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.CurveDefinition.Filename">
            <summary>
            Gets or sets the filename
            </summary>
        </member>
        <member name="T:CSharpFramework.BaseTypes.Color4">
            <summary>
            Class that represents a RGBA color value, each component represented by a byte [0..255] value
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4.#ctor">
            <summary>
            Parameterless constructor for de-serialization. Sets (0,0,0,0)
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Color constructor
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4.#ctor(System.Drawing.Color)">
            <summary>
            Constructor that converts a Color value
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4.#ctor(System.UInt32)">
            <summary>
            Constructor that converts a 32 bit color value
            </summary>
            <param name="iColorRef"></param>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4.Clone">
            <summary>
            Creates a clone of the color
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to
            the specified object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4.Parse(System.String)">
            <summary>
            Converts the specified string to a color value.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4.op_Equality(CSharpFramework.BaseTypes.Color4,CSharpFramework.BaseTypes.Color4)">
            <summary>
            Tests two colors for equality
            </summary>
            <param name="u">operand 1</param>
            <param name="v">operand 2</param>
            <returns>true, if all components match</returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4.op_Inequality(CSharpFramework.BaseTypes.Color4,CSharpFramework.BaseTypes.Color4)">
            <summary>
            Tests two colors are not equal
            </summary>
            <param name="u">operand 1</param>
            <param name="v">operand 2</param>
            <returns>true, if any component does not match</returns>
        </member>
        <member name="F:CSharpFramework.BaseTypes.Color4.WHITE">
            <summary>
            White color (a=255)
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.Color4.BLACK">
            <summary>
            Black color (a=255)
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4.R">
            <summary>
            Get or set the red component of the color
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4.G">
            <summary>
            Get or set the green component of the color
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4.B">
            <summary>
            Get or set the blue component of the color
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4.A">
            <summary>
            Get or set the alpha component of the color
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4.VisionColor">
            <summary>
            Gets or sets an unsigned int that represets a Vision VColorRef compatible color value
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4.Color">
            <summary>
            Gets or sets this color as a Color object
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4.DisplayColor">
            <summary>
            Gets this color as a Color object with alpha set to 255 (for some displaying)
            </summary>
        </member>
        <member name="T:CSharpFramework.BaseTypes.Color4F">
            <summary>
            Class that represents a RGBA color value, each component represented by a float [0..1] value
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4F.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor that takes r,g,b and a values
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4F.#ctor(System.Drawing.Color)">
            <summary>
            Constructor that converts a Color value
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4F.Clone">
            <summary>
            Creates a clone of the color
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4F.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4F.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to
            the specified object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.Color4F.Parse(System.String)">
            <summary>
            Converts the specified string to a color value.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.BaseTypes.Color4F.WHITE">
            <summary>
            White color (a=1.0)
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.Color4F.BLACK">
            <summary>
            Black color (a=1.0)
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4F.R">
            <summary>
            Get or set the red component of the color
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4F.G">
            <summary>
            Get or set the green component of the color
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4F.B">
            <summary>
            Get or set the blue component of the color
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4F.A">
            <summary>
            Get or set the alpha component of the color
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4F.R255">
            <summary>
            Get or set the red component of the color as value in range [0..255]
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4F.G255">
            <summary>
            Get or set the green component of the color as value in range [0..255]
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4F.B255">
            <summary>
            Get or set the blue component of the color as value in range [0..255]
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4F.A255">
            <summary>
            Get or set the alpha component of the color as value in range [0..255]
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4F.Color">
            <summary>
            Gets or sets this color as a Color object
            </summary>
        </member>
        <member name="P:CSharpFramework.BaseTypes.Color4F.DisplayColor">
            <summary>
            Gets this color as a Color object with alpha set to 255 (for some displaying)
            </summary>
        </member>
        <member name="T:CSharpFramework.BaseTypes.ColorComponentSlider">
            <summary>
            Type editor for color component slider (byte)
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorComponentSlider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorComponentSlider.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorComponentSlider.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorComponentSlider._trackBar_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorComponentSlider._trackBar_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:CSharpFramework.BaseTypes.ColorPickerEditor">
            <summary>
            Type editor that opens a modal color picker dialog
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorPickerEditor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorPickerEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorPickerEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorPickerEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.BaseTypes.ColorPickerEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Overridden function : Paints a color and alpha rectangle
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:CSharpFramework.ShortCuts.ToolStripItemShortCut">
            <summary>
            Implements ShortCutAction that is bound to a ToolStripItem
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ToolStripItemShortCut.#ctor(System.Windows.Forms.ToolStripItem,System.Windows.Forms.Keys)">
            <summary>
            Constructor that takes a ToolStripItem
            </summary>
            <param name="item"></param>
            <param name="defaultKey"></param>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ToolStripItemShortCut.Do">
            <summary>
            Overridden Do function, simulates a click on the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.ToolStripItemShortCut.OnShortCutChanged(System.Windows.Forms.Keys)">
            <summary>
            Update the menu item
            </summary>
            <param name="oldVal"></param>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ToolStripItemShortCut.ActionName">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ToolStripItemShortCut.Category">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ToolStripItemShortCut.Description">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.ToolStripItemShortCut.Enabled">
            <summary>
            Overridden function. Returns always true since the item's status is 
            evaluated at parent's popup and is thus not up-to-date
            </summary>
        </member>
        <member name="T:CSharpFramework.ShortCuts.MenuItemShortCut">
            <summary>
            Implements ShortCutAction that is bound to a menu item
            </summary>
        </member>
        <member name="M:CSharpFramework.ShortCuts.MenuItemShortCut.#ctor(System.Windows.Forms.MenuItem,System.Windows.Forms.Keys)">
            <summary>
            Constructor
            </summary>
            <param name="item"></param>
            <param name="defaultKey"></param>
        </member>
        <member name="M:CSharpFramework.ShortCuts.MenuItemShortCut.#ctor(System.Windows.Forms.ToolStripMenuItem,System.Windows.Forms.Keys)">
            <summary>
            Constructor that takes a ToolStripMenuItem item
            </summary>
            <param name="item"></param>
            <param name="defaultKey"></param>
        </member>
        <member name="M:CSharpFramework.ShortCuts.MenuItemShortCut.Do">
            <summary>
            Overridden Do function, simulates a click on the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.ShortCuts.MenuItemShortCut.OnShortCutChanged(System.Windows.Forms.Keys)">
            <summary>
            Update the menu item
            </summary>
            <param name="oldVal"></param>
        </member>
        <member name="P:CSharpFramework.ShortCuts.MenuItemShortCut.ActionName">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.MenuItemShortCut.Category">
            <summary>
            Overridden function
            </summary>
        </member>
        <member name="P:CSharpFramework.ShortCuts.MenuItemShortCut.Enabled">
            <summary>
            Overridden function. Returns always tru since the item's status is evaluated at parent's popup and is
            thus not up-to-date
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeRenderMode">
            <summary>
            Enum for shape preview render mode
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeRenderMode.None">
            <summary>
            For internal use - shape is not rendered
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeRenderMode.Normal">
            <summary>
            Render the shape in normal mode
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeRenderMode.Selected">
            <summary>
            Render the shape in selected mode
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.NiceNameAttribute">
            <summary>
            Generic attribute to provide a class with a nice name.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.NiceNameAttribute.#ctor(System.String)">
            <summary>
            Constructor that takes the nice name
            </summary>
            <param name="niceName">the nice name of the shape</param>
        </member>
        <member name="P:CSharpFramework.Shapes.NiceNameAttribute.NiceName">
            <summary>
            Nice name of the shape type
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeTypeNiceNameAttribute">
            <summary>
            Use this attribute to specify a nice name for a shape type/class.
            The nice name is e.g. used in the shape search panel to provide user readable names
            for the shape types.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeTypeNiceNameAttribute.#ctor(System.String)">
            <summary>
            Constructor that takes the nice name
            </summary>
            <param name="niceName">the nice name of the shape</param>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeSearchableAttribute">
            <summary>
            Use this attribute to exclude a shape type from  search operations.
            
            The shape search panel by default searches all available shape types.
            Setting this attribute to false will exclude the shape type from searches.
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeSearchableAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor that takes the searchable state
            </summary>
            <param name="searchable"></param>
        </member>
        <member name="P:CSharpFramework.Shapes.ShapeSearchableAttribute.Searchable">
            <summary>
            Searchable state of the shape
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.LinkPropertyDescriptor">
            <summary>
            Shows either a link as a root element with connections shown as sub-properties or as the connection sub-property itself
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShowLinksObjectConverter">
            <summary>
            Expands the link connections of a single link
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.LinkCollectionViewObject">
            <summary>
            Instance that shows the collection of link connections
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeChangedArgs">
            <summary>
            Event class for changing shapes
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.ShapeChangedArgs.#ctor(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeChangedArgs.Action)">
            <summary>
            Constructor
            </summary>
            <param name="_shape"></param>
            <param name="_action"></param>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeChangedArgs.shape">
            <summary>
            Shape that has been changed
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeChangedArgs.action">
            <summary>
            The changed status
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.ShapeChangedArgs.Action">
            <summary>
            Status
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeChangedArgs.Action.Added">
            <summary>
            Shape has been added
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeChangedArgs.Action.Removed">
            <summary>
            Shape has been removed
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeChangedArgs.Action.Clicked">
            <summary>
            Shape has been clicked on (in tree view)
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeChangedArgs.Action.NameChanged">
            <summary>
            Name of shape has changed
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeChangedArgs.Action.ParentChanged">
            <summary>
            The parent of the shape changed
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeChangedArgs.Action.ChildCollectionChanged">
            <summary>
            The child collection has changed
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeChangedArgs.Action.IconChanged">
            <summary>
            The icon of the shape in the tree view has changed
            </summary>
        </member>
        <member name="F:CSharpFramework.Shapes.ShapeChangedArgs.Action.RefreshProperties">
            <summary>
            Called to indicate that the property grid should be refreshed
            </summary>
        </member>
        <member name="T:CSharpFramework.Shapes.IShapeComparer">
            <summary>
            Interface that is used to compare two shapes for equality. 
            </summary>
        </member>
        <member name="M:CSharpFramework.Shapes.IShapeComparer.CompareShapes(CSharpFramework.Shapes.ShapeBase,CSharpFramework.Shapes.ShapeBase)">
            <summary>
            Key function of this interface. Compare two shapes
            </summary>
            <param name="shapeA">The first shape</param>
            <param name="shapeB">The second shape</param>
            <returns>0 if both shapes are identical, 1 if shapeA is 'greater' than shapeB or -1 if shapeB is 'greater' than shapeA</returns>
        </member>
        <member name="T:CSharpFramework.Shapes.DuplicateShapeComparer">
            <summary>
            This class implements the IShapeComparer interface using a few criteria to compare. These criteria are defined by properties
            </summary>
        </member>
        <member name="T:CSharpFramework.Serialization.FileLockDisk">
            <summary>
            Implementation of the IFileLock interface for physical disk file locks.
            </summary>
        </member>
        <member name="F:CSharpFramework.Serialization.FileLockDisk._lockFileName">
            File extension for lock files
        </member>
        <member name="F:CSharpFramework.Serialization.FileLockDisk._DiskLock">
            Filename of the lock file
        </member>
        <member name="M:CSharpFramework.Serialization.FileLockDisk.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor. Takes the file to lock as a parameter.
            </summary>
            <param name="fileName">Name of the file to get a lock for (absolute path)</param>
        </member>
        <member name="M:CSharpFramework.Serialization.FileLockDisk.TryLock">
            <summary>
            Disk lock: Tries to get the Disk lock
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.FileLockDisk.Unlock">
            <summary>
            Disk lock: Deletes the temporary .LOCK file
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.FileLockDisk.OwnsLock">
            <summary>
            Disk lock: Indicates whether the file has already a disk lock file
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.FileLockDisk.LockFileExists">
            <summary>
            Disk lock: Indicates whether the physical lock file exists.
            </summary>
        </member>
        <member name="M:CSharpFramework.Serialization.FileLockDisk.IsLocked">
            <summary>
            Disk lock: Checks whether the file is either write protected or locked by any process.
            </summary>
        </member>
        <member name="T:CSharpFramework.EditorManager">
            <summary>
            Static class that manages the editor state
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.InitPlugins(System.String)">
            <summary>
            Initialize the editor manager. Loads the global plugins from the startup path
            </summary>
            <param name="StartupPath"></param>
        </member>
        <member name="M:CSharpFramework.EditorManager.Deinit">
            <summary>
            Deinitialize the editor manager and unload the global plugins.
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorManager.AppInterface">
            <summary>
            Access one global instance of the app interface.
            This interface provides functionality to trigger editor events from outside
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.GetPluginByName(System.String)">
            <summary>
            Find an editor plugin by specified name (using AllEditorPlugins collection)
            </summary>
            <param name="name">fullname of the plugin class type (pluginModule.GetType().FullName)</param>
            <returns>plugin instance (or null)</returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.DeInitializeNonStandardPlugins">
            <summary>
            Calls Initialize=false on all global plugins that are not standard
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.InitializeNonStandardPlugin(System.String)">
            <summary>
            Find a global non-standard plugin with given name and call Initialized=true on it
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.EditorManager.Progress">
            <summary>
            Current Progress status
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.ShowProgressDialog(System.String)">
            <summary>
            Displays a progress dialog
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.ShowProgressDialog(System.String,System.Boolean)">
            <summary>
            Displays a progress dialog
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.HideProgressDialog">
            <summary>
            Hides the progress dialog again
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorManager._layoutManager">
            <summary>
            Application layout manager
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.GetDirectory(CSharpFramework.EditorManager.DirectoryType)">
            <summary>
            Gets the directory of the specified type
            </summary>
            <param name="dirType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.OnSceneChanged(CSharpFramework.SceneChangedArgs)">
            <summary>
            The OnSceneChanged triggers the SceneChanged event. The SceneChangedArgs provide information about
            the old and the new scene
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.CallShapeOnSceneEventRecursive(CSharpFramework.Shapes.ShapeBase,CSharpFramework.SceneEventArgs)">
            <summary>
            Static helper function. Use TriggerSceneEvent instead
            </summary>
            <param name="shape"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.EditorManager.OnSceneEvent(CSharpFramework.SceneEventArgs)">
            <summary>
            The OnSceneEvent triggers the SceneEvent at important events such as saving or re-lighting.
            This function also calls the ShapeBase.OnSceneEvent function on every shape in the scene.
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.TriggerSceneEvent(CSharpFramework.SceneEventArgs.Action,System.Boolean)">
            <summary>
            Helper function to trigger the SceneEvent delegate
            </summary>
            <param name="_action"></param>
            <param name="bSuccess"></param>
            <returns>The return value is the SceneEventArgs.Success value</returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.TriggerSaveResources">
            <summary>
            This function triggers the SaveResources event
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.WantsToCloseScene">
            <summary>
            WantsToCloseScene triggers the SceneClosing event and returns true if none of the listeners set the
            CancelEventArgs.Cancel flag to true.
            </summary>
            <returns>true if the scene can be closed</returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.OnExternalFileDrop(CSharpFramework.ExternalFileDropArgs)">
            <summary>
            The OnExternalFileDrop triggers the ProcessExternalFileDrop event whenever an external file is dropped on vForge
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.OnBeforeEditorModeChanging">
            <summary>
            The OnBeforeEditorModeChanging method triggers the BeforeEditorModeChanging event whenever the editor mode (animate, play the game,...) is about to change.
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.OnEditorModeChanged(CSharpFramework.EditorModeChangedArgs)">
            <summary>
            The OnEditorModeChanged triggers the EditorModeChanged event whenever the editor mode (animate, play the game,...) changes
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.OnEditorComponentChanged(CSharpFramework.EditorComponentChangedArgs)">
            <summary>
            The OnEditorComponentChanged triggers the EditorComponentChanged event whenenver the user switches to a different editor component
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.OnEditorSettingsChanged(CSharpFramework.EditorSettingsChangedArgs)">
            <summary>
            The OnEditorSettingsChanged method triggers the EditorSettingsChanged event whenever the editor settings are changed.
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.OnShapeSelectionChanged(CSharpFramework.ShapeSelectionChangedArgs)">
            <summary>
            The OnShapeSelectionChanged triggers the ShapeSelectionChanged event whenever the collection of selected shapes changes.
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.OnCustomSceneSerialization(CSharpFramework.CustomSceneSerializationArgs)">
            <summary>
            The OnCustomSceneSerialization triggers the CustomSceneSerialization event while the scene is saves.
            It allows a tool to hook into the loading/saving process and save custom scene objects
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.OnLoadCustomFile(CSharpFramework.CustomFileLoadingArgs)">
            <summary>
            The OnLoadCustomFile method triggers the LoadCustomFile event whenever the editor is started with a filename
            with unsupported file extension (neither scene, nor project). Tools can hook in here to load files that they support.
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorManager._menuItemPlugins">
            <summary>
            Internal list of tool plugins
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.GetMenuItemPluginByName(System.String)">
            <summary>
            Finds a menu item plugin by its name
            </summary>
            <param name="name">Name of the menu item plugin to find</param>
            <returns>Menu item plugin instance (or null)</returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.AddMenuItemPlugin(CSharpFramework.IMenuItemPlugin)">
            <summary>
            You can register menu item plugins (IMenuItemPlugin) here.
            These items show up in the main menu.
            </summary>
            <param name="plugin">The menu item plugin which has to be added</param>
        </member>
        <member name="M:CSharpFramework.EditorManager.RemoveMenuItemPlugin(CSharpFramework.IMenuItemPlugin)">
            <summary>
            Remove a menu item plugin to from editor manager
            </summary>
            <param name="plugin">The menu item plugin which has to be removed</param>
        </member>
        <member name="M:CSharpFramework.EditorManager.GetParentMenuForCategory(CSharpFramework.IMenuItemPlugin.Category)">
            <summary>
            Gets the menu item for the specified category
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.GetShapeCreatorPluginByName(System.String)">
            <summary>
            Finds a creator plugin by its name
            </summary>
            <param name="name">Name of the creator to find</param>
            <returns>Plugin instance (or null)</returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.FindSubMenuItem(System.Windows.Forms.Menu.MenuItemCollection,System.String)">
            <summary>
            Helper function to find a submenu item by name. Removes the ampersand for shortcuts from the item names to match names
            </summary>
            <param name="list">item collection to search</param>
            <param name="name">name of the submenu to find</param>
            <returns>the item or null</returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.FindSubMenuItem(System.Windows.Forms.ToolStripItemCollection,System.String)">
            <summary>
            Helper function to find a submenu item by name. Removes the ampersand for shortcuts from the item names to match names
            </summary>
            <param name="list">item collection to search</param>
            <param name="name">name of the submenu to find</param>
            <returns>the item or null</returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.AddSubMenuItem(System.Windows.Forms.MenuItem,System.String,System.EventHandler,System.Char,System.Type)">
            <summary>
            Adds a menu sub item (name and event handler) to the parent item. Unlike parent.MenuItems.Add, this
            function takes the path-separator character into account to create sub items. The item class can be specified
            via the type parameter
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
            <param name="onClick"></param>
            <param name="separator"></param>
            <param name="itemType"></param>
            <returns>the menu item with the trimmed name</returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.AddSubMenuItem(System.Windows.Forms.ToolStripMenuItem,System.String,System.EventHandler,System.Char,System.Type)">
            <summary>
            Adds a menu sub item (name and event handler) to the parent item. Unlike parent.MenuItems.Add, this
            function takes the path-separator character into account to create sub items. The item class can be specified
            via the type parameter
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
            <param name="onClick"></param>
            <param name="separator"></param>
            <param name="itemType"></param>
            <returns>the menu item with the trimmed name</returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.BuildCreateMenu(System.Windows.Forms.MenuItem)">
            <summary>
            Clears and fills a menu item with all the dynamic shape creation plugins
            </summary>
            <param name="parent">Parent menu item to attach the list as child menu items</param>
        </member>
        <member name="M:CSharpFramework.EditorManager.BuildCreateMenu(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Clears and fills a menu item with all the dynamic shape creation plugins
            </summary>
            <param name="parent">Parent menu item to attach the list as child menu items</param>
        </member>
        <member name="M:CSharpFramework.EditorManager.ParseManifestCommand(CSharpFramework.IProject,System.String)">
            <summary>
            Parses a single line in the manifest file
            </summary>
            <param name="project"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.LoadManifestFile(CSharpFramework.IProject,System.String)">
            <summary>
            Loads a text-based manifest file from the specified location and processes the commands in it
            </summary>
            <param name="project"></param>
            <param name="absFilename"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.ShowMessageBox(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Simple parameter override
            </summary>
            <param name="text"></param>
            <param name="caption"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.ShowMessageBox(System.String,System.String)">
            <summary>
            Simple parameter override
            </summary>
            <param name="text"></param>
            <param name="caption"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.ShowMessageBox(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Simple parameter override
            </summary>
            <param name="owner"></param>
            <param name="text"></param>
            <param name="caption"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.ShowMessageBox(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Simple parameter override
            </summary>
            <param name="owner"></param>
            <param name="text"></param>
            <param name="caption"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.ShowMessageBox(System.String)">
            <summary>
            Simple parameter override
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.ShowMessageBox(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Simple parameter override
            </summary>
            <param name="owner"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.ShowMessageBox(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Wrapper function for displaying message boxes. Redirects messages to the Vision log output
            if the automated tests are active or the editor runs in silent mode.
            </summary>
            <param name="text">The text to display in the message box</param>
            <param name="caption">The text to display in the title bar of the message box</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box</param>
            <param name="icons">One of the MessageBoxIcon values that specifies which icon to display in the message box</param>
            <returns>One of the DialogResult values. In silent or test mode it returns OK/Abort/NO/Cancel depending on the input buttons</returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.ShowMessageBox(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Overloaded version that takes an owner window (for compatibility)
            </summary>
            <param name="owner"></param>
            <param name="text"></param>
            <param name="caption"></param>
            <param name="buttons"></param>
            <param name="icons"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.ShowMessageBox(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.DialogResult)">
            <summary>
            Overloaded version that takes an owner window (for compatibility)
            </summary>
            <param name="owner"></param>
            <param name="text"></param>
            <param name="caption"></param>
            <param name="buttons"></param>
            <param name="icons"></param>
            <param name="SilentModeResult">In silent mode this value is returned.</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.SaveSettingsToFile(System.String)">
            <summary>
            Writes the Settings to an XML file
            </summary>
            <param name="pathname">Absolute file name</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.LoadSettingsFromFile(System.String)">
            <summary>
            Reads the Settings from an XML file
            </summary>
            <param name="pathname">Absolute file name</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.EditorManager.DumpException(System.Exception,System.Boolean)">
            <summary>
            helper function for exception output
            </summary>
            <param name="ex"></param>
            <param name="bShowMsgBox">if true, a modal error dialog is shown</param>
        </member>
        <member name="M:CSharpFramework.EditorManager.DumpException(System.Exception)">
            <summary>
            helper function for exception output
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:CSharpFramework.EditorManager.WriteExceptionInfo(System.Exception)">
            <summary>
            helper function for exception output
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:CSharpFramework.EditorManager.WriteExceptionInfo(System.Exception,System.String)">
            <summary>
            helper function for exception output
            </summary>
            <param name="ex"></param>
            <param name="filename"></param>
        </member>
        <member name="P:CSharpFramework.EditorManager.GlobalPlugins">
            <summary>
            Returns the collection of all global plugins (from the bin directory). Use AllEditorPlugins to get all plugins
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.AllEditorPlugins">
            <summary>
            Get the collection of all loaded plugins (global and project specific ones).
            Returns a new EditorPluginCollection instance containing all plugins.
            </summary>     
        </member>
        <member name="P:CSharpFramework.EditorManager.Project">
            <summary>
            Get (or set) the current project
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.Scene">
            <summary>
            Get (or set) the current scene
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.ProgressDialog">
            <summary>
            Access the current Progress Dialog
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.EditorMode">
            <summary>
            Get (or set) the current editor animation mode
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.InPlayingMode">
            <summary>
            Indicates whether the editor is currently in playing mode
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.AnimationSpeed">
            <summary>
            Get (or set) the current animation speed. 1.0 for normal speed, 0.5 for slow motion
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.Clipboard">
            <summary>
            Get or set the global clipboard instance that is used for most components.
            Some components might however have their own clipboard
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.SelectedShapes">
            <summary>
            Get (or set) the collection of currently selected shapes, e.g. in the engine view
            The set function filters out the shapes that actually can be selected
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.ActiveComponent">
            <summary>
            Get or set the currently active editor component, for instance engine view. Each component has its own
            copy and paste operations
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.EngineManager">
            <summary>
            Get (or set) the current engine manager. Usually initialized once
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.RemoteManagerXbox360">
            <summary>
            Get (or set) the current remote manager for the Xbox 360.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.RemoteManagerPS3">
            <summary>
            Get (or set) the current remote manager for the Ps3.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.RemoteManagerWii">
            <summary>
            Get (or set) the current remote manager for the Wii.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.AssetManager">
            <summary>
            Future use
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.FileLockFactory">
            <summary>
            Gets or sets the file lock factory (either disk lock or RCS)
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.ApplicationLayout">
            <summary>
            Gets the layout manager which is responsible for the application layout.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.ActiveView">
            <summary>
            Returns the engine view
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.BaseDataDir">
            <summary>
            Absolute directory that stores the base data
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.ResolvedBaseDataDir">
            <summary>
            The resolved verion of BaseDataDir, i.e. this file path does not contain any ..\, otherwise it describes the same path
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.AppDataDir">
            <summary>
            Absolute directory that stores the application data (e.g. "C:\VisionSDK\shared\data\vForge")
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.VisibilityBuilder">
            <summary>
            Returns the instance of the visibility builder interface. The editor is responsible to set this instance at startup
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.GUI">
            <summary>
            static instance to access GUI related image lists and the gui updatelock feature
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.Actions">
            <summary>
            Get the action stack used by the engine manager
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.LoadCustomFile">
            <summary>
            This event gets triggered when vForge finds an unknown file extension in the argument string.
            Hook into this callback to support custom file types
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.SceneChanged">
            <summary>
            This event gets triggered when a new scene has been set. The arguments provide information about the new scene and the old scene object.
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.SceneEvent">
            <summary>
            This event gets triggered for various occasions. See SceneEventArgs, resp. SceneEventArgs.Action for an enum of supported sub-actions.
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.SceneClosing">
            <summary>
            This event gets triggered when the user wants to close the scene. Hook into this callback to output warnings about unsaved data.
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.BeforeSceneClosing">
            <summary>
            This event gets triggered when the user wants to close the scene, but before the SceneClosing event. Hook into this callback to revert temporary changes to data for example.
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.ProcessExternalFileDrop">
            <summary>
            This event gets triggered when an external file is dropped on vForge by the user.
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.EditorModeChanged">
            <summary>
            This event gets triggered when the editor mode (Animate, Play-the-game,..) has changed
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.BeforeEditorModeChanging">
            <summary>
            This event gets triggered before the editor mode (Animate, Play-the-game,..) is about to change
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.EditorComponentChanged">
            <summary>
            This event gets triggered when a new editor component (class IEditorComponent) receives focus.
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.EditorSettingsChanged">
            <summary>
            This event gets triggered when the editor settings have changed
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.ShapeSelectionChanged">
            <summary>
            This event gets triggered when the actual collection of selected shapes has changed, e.g. when new shapes have been selected.
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.CustomSceneSerialization">
            <summary>
            This event gets triggered while (de-)serializing a scene. Hook into this callback to serialize custom scene data along with the scene. 
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.SaveResources">
            <summary>
            This event gets triggered when open resources are about to be saved (e.g. particle effect files). It is for instance triggered by the "Save All" menu item.
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.ExceptionTriggered">
            <summary>
            This event gets triggered when an exception is thrown
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.ShapeCreatorPlugins">
            <summary>
            You can register shape creator plugins (IShapeCreatorPlugin) here.
            These items show up on the main Create menu or the right-click Create menu.
            Examples:
            EditorManager.ShapeCreatorPlugins.Add( myObjCreator );
            EditorManager.ShapeCreatorPlugins.Remove( myObjCreator );
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.SortedShapeCreatorPlugins">
            <summary>
            Same as ShapeCreatorPlugins but gurantees that the selection is sorted alphabetically
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.ShapeTypes">
            <summary>
            Gets all available shape types (via reflection)
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.SearchableShapeTypes">
            <summary>
            Gets all searchable shape types (via reflection).
            Shape classes with the ShapeSearchable attribute set to false are excluded.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.Settings">
            <summary>
            Access the global editor settings
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.DesignMode">
            <summary>
            This is a common workaround for the fact, that the built in version of DesignMode does not work as expected
            This flag however works nicely.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.SilentMode">
            <summary>
            Gets or sets vForge 'silent mode'. In silent mode, message boxes should not pop up so batch export
            processes via command line (for instance) are not interrupted. The default state is naturally false,
            but it can be set via the command line parameters.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.EditorConsole">
            <summary>
            Access the console to output log info. The default implementation is empty, but a custom console can be implemented and assigned.
            To guarantee that log output is written to the log window, please use EditorManager.EngineManager.LogPrint.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.IHelpSystem">
            <summary>
            The iHelp System of the Editor Manager
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.ShortCuts">
            <summary>
            Gets or sets the global keyboard shortcut configuration. Can be used to register custom hotkeys
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.MainForm">
            <summary>
            Gets the main form of the application
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.ShapeFactory">
            <summary>
            The shape factory 
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.SceneFactory">
            <summary>
            Get or set a scene factory. This factory is used by the editor to create new instances of the scene (either when creating a new scene or
            when loading from file). A custom factory can be installed to work with custom scene classes (e.g. to override the loading or saving).
            A list of two parameters is passed to the CreateInstance function: First, the reference to the owner project and second the relative filename of the scene.
            See sample default implementation EditorSceneFactory.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.ProjectFactory">
            <summary>
            Get or set a project factory. This factory is used by the editor to create new instances of the project (either when creating a new project or
            when loading from file). A custom factory can be installed to work with custom project classes (e.g. to override the loading or saving).
            No parameters are passed to the CreateInstance function.
            See sample default implementation EditorProjectFactory.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.LayerFactory">
            <summary>
            Get or set a layer factory. This factory is used by the editor to create new instances of the layer . A custom factory can be installed to work with custom layer classes (e.g. to override properties).
            A list with one parameter is passed to the CreateInstance function: the name of the layer.
            See sample default implementation EditorLayerFactory.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.ZoneFactory">
            <summary>
            Get or set a zone factory. This factory is used by the editor to create new instances of the zone . A custom factory can be installed to work with custom zone classes (e.g. to override properties).
            A list with one parameter is passed to the CreateInstance function: the name of the zone.
            See sample default implementation EditorZoneFactory.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.RemoveShapeActionFactory">
            <summary>
            Get or set a RemoveShapeAction factory. This factory is used by the editor to create new instances of the RemoveShapeAction . A custom factory can be installed to replace the default RemoveShapeAction.
            A list with one parameter is passed to the CreateInstance function: the name of the zone.
            See sample default implementation EditorRemoveShapeActionFactory.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.AddShapeActionFactory">
            <summary>
            Get or set a AddShapeAction factory. This factory is used by the editor to create new instances of the AddShapeAction . A custom factory can be installed to replace the default AddShapeAction.
            A list with one parameter is passed to the CreateInstance function: the name of the zone.
            See sample default implementation EditorAddShapeActionFactory.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.SetPropertyActionFactory">
            <summary>
            Get or set a AddShapeAction factory. This factory is used by the editor to create new instances of the AddShapeAction . A custom factory can be installed to replace the default AddShapeAction.
            A list with one parameter is passed to the CreateInstance function: the name of the zone.
            See sample default implementation EditorSetPropertyActionFactory.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.RemoveShapesActionFactory">
            <summary>
            Get or set a RemoveShapesAction factory. This factory is used by the editor to create new instances of the RemoveShapesAction . A custom factory can be installed to replace the default RemoveShapesAction.
            A list with one parameter is passed to the CreateInstance function: the name of the zone.
            See sample default implementation EditorRemoveShapesActionFactory.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.AddShapesActionFactory">
            <summary>
            Get or set a AddShapesAction factory. This factory is used by the editor to create new instances of the AddShapesAction . A custom factory can be installed to replace the default AddShapesAction.
            A list with one parameter is passed to the CreateInstance function: the name of the zone.
            See sample default implementation EditorAddShapesActionFactory.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.MaterialFactory">
            <summary>
            Gets or sets the global material factory. An instance of this class can create materials of custom types to attach
            custom properties.
            </summary>
        </member>
        <member name="E:CSharpFramework.EditorManager.OnSelectedMaterialsChanged">
            <summary>
            Event that is triggered whenever the list of selected materials changed. The actual material selection can be queried by SelectedMaterialList.
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.SelectedMaterialList">
            <summary>
            Gets or sets a new list of selected materials. The return value might be null.
            If the list changes, the OnSelectedMaterialsChanged event is triggered.
            All elements in the returned ArrayList can be casted to Material class
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.SelectedMaterialCount">
            <summary>
            Returns the number of selected materials
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.SelectedMaterial">
            <summary>
            This version returns the first material from the selected material list (or null)
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.CustomColors">
            <summary>
            Custom colors that are stored in a working session
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.RendererNodeManager">
            <summary>
            Holds all engine renderer node classes
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.Tablet">
            <summary>
            Gets or sets the table input of the application
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.UserName">
            <summary>
            Returns the user name of the computer
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.ComputerName">
            <summary>
            Returns machine name
            </summary>
        </member>
        <member name="P:CSharpFramework.EditorManager.UserSettingsFilename">
            <summary>
            Combination of ComputerName and UserName used to store a settings file
            </summary>
        </member>
        <member name="T:CSharpFramework.EditorManager.Mode">
            <summary>
            Enumeration for current editor animation mode
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorManager.Mode.EM_NONE">
            <summary>
            Editor is not playing
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorManager.Mode.EM_ANIMATING">
            <summary>
            Editor view is animating
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorManager.Mode.EM_PLAYING_IN_EDITOR">
            <summary>
            Editor is playing the scene while still having input control
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorManager.Mode.EM_PLAYING_IN_GAME">
            <summary>
            Editor is playing the scene; game has full input control
            </summary>
        </member>
        <member name="T:CSharpFramework.EditorManager.DirectoryType">
            <summary>
            Enumeration of available vForge specific directories
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorManager.DirectoryType.StartupPath">
            <summary>
            Path to the application binary directory (e.g. "C:\VisionSDK\Tools\vForge)"
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorManager.DirectoryType.AppDataPath">
            <summary>
            Path to the vForge data directory (e.g. "C:\VisionSDK\shared\data\vForge"
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorManager.DirectoryType.UserDataPath">
            <summary>
            Path to the application data directory of the local user (local settings).
            Use this path to store custom data in.
            </summary>
        </member>
        <member name="T:CSharpFramework.EditorManager.PluginMenuItem">
            <summary>
            Helper class: Menu item for a plugin item
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.PluginMenuItem.#ctor(System.String,CSharpFramework.IEditorPlugin)">
            <summary>
            Constructor that takes the menu name and the creator plugin
            </summary>
            <param name="name">name of the menu item</param>
            <param name="plugin">creator plugin instance</param>
        </member>
        <member name="M:CSharpFramework.EditorManager.PluginMenuItem.OnItemClicked(System.Object,System.EventArgs)">
            <summary>
            Handles the click on this item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:CSharpFramework.EditorManager.PluginToolStripMenuItem">
            <summary>
            Helper class: Menu item for a plugin item
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.PluginToolStripMenuItem.#ctor(System.String,CSharpFramework.IEditorPlugin)">
            <summary>
            Constructor that takes the menu name and the creator plugin
            </summary>
            <param name="name">name of the menu item</param>
            <param name="plugin">creator plugin instance</param>
        </member>
        <member name="M:CSharpFramework.EditorManager.PluginToolStripMenuItem.OnItemClicked(System.Object,System.EventArgs)">
            <summary>
            Handles the click on this item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:CSharpFramework.EditorManager.CrashDump">
            <summary>
            MiniDump Helper Class
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorManager.CrashDump.DumpToFile(System.String)">
            <summary>
            Dump to file
            </summary>
        </member>
        <member name="T:CSharpFramework.SceneChangedArgs">
            <summary>
            Class for event notification if a scene changed
            </summary>
        </member>
        <member name="M:CSharpFramework.SceneChangedArgs.#ctor(CSharpFramework.IScene,CSharpFramework.IScene)">
            <summary>
            Constructor
            </summary>
            <param name="_newscene"></param>
            <param name="_oldscene"></param>
        </member>
        <member name="F:CSharpFramework.SceneChangedArgs.newscene">
            <summary>
            New scene
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneChangedArgs.oldscene">
            <summary>
            Old scene
            </summary>
        </member>
        <member name="T:CSharpFramework.CustomFileLoadingArgs">
            <summary>
            This event class gets passed to the LoadCustomFileEventHandler delegate
            </summary>
        </member>
        <member name="M:CSharpFramework.CustomFileLoadingArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="absPathName">path name with file extension</param>
        </member>
        <member name="M:CSharpFramework.CustomFileLoadingArgs.LoadProject(System.Boolean)">
            <summary>
            This virtual function can be called to load a project file that is in the hierarchy of the file path.
            The editor implements this function to return an editor project
            </summary>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.CustomFileLoadingArgs.AbsPathName">
            <summary>
            Absolute file name with extension to load
            </summary>
        </member>
        <member name="F:CSharpFramework.CustomFileLoadingArgs.LowerCaseExt">
            <summary>
            File extension only (lowercase). Convenient for comparions.
            </summary>
        </member>
        <member name="F:CSharpFramework.CustomFileLoadingArgs.Success">
            <summary>
            Should be set if the file could be loaded. It should also be checked whehter it is already processed.
            </summary>
        </member>
        <member name="F:CSharpFramework.CustomFileLoadingArgs.Supported">
            <summary>
            Should be set if the file extension is supported. If in addition the loading was successful, set the Success flag
            </summary>
        </member>
        <member name="T:CSharpFramework.SceneEventArgs">
            <summary>
            Class for event notification for important actions for a scene such as scene saving
            </summary>
        </member>
        <member name="M:CSharpFramework.SceneEventArgs.#ctor(CSharpFramework.SceneEventArgs.Action,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="_action"></param>
            <param name="bSuccess"></param>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.action">
            <summary>
            This member describes the scene action that is performed with the scene
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Success">
            <summary>
            Some actions need the result status (after saving for instance)
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.CustomData">
            <summary>
            An object that may contain additional data. See description for action
            </summary>
        </member>
        <member name="T:CSharpFramework.SceneEventArgs.Action">
            <summary>
            Enum that describes the scene action
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Action.BeforeSaving">
            <summary>
            Called directly before the scene is to be saved
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Action.AfterSaving">
            <summary>
            Called directly after the scene has been saved (check Success member)
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Action.BeforeStaticLighting">
            <summary>
            Called before the static lighting process is started
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Action.AfterStaticLighting">
            <summary>
            Called after the static lighting process is finished (check Success member)
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Action.BeforeExport">
            <summary>
            Called right before export starts. The SceneEventArgs parameter in that case uses derived class ExportSceneEventArgs
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Action.AfterExport">
            <summary>
            Called when export has ended
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Action.BeforeClosing">
            <summary>
            Called right before the currect scene actually closes (Note this is different from the SceneClosing handler)
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Action.BeforeResourceUpdate">
            <summary>
            Called right before modified engine resources are to be reloaded. Setting Success to false can abort the operation
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Action.AfterResourceUpdate">
            <summary>
            Called after modified engine resources have been reloaded
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Action.AfterRendererNodeChanged">
            <summary>
            The renderer node on the main layer has changed. Listen to this callback to respond to changes in the rendering
            paradigm, e.g. the user switches to deferred shading mode.
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Action.UpdateNativeVariable">
            <summary>
            A native variable has been changed by the native client side and should be set on the shape
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Action.ViewIconSettingsChanged">
            <summary>
            The UI changed settings related to displaying the view icons (static VisionViewBase.IconSettings property structure)
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Action.BeforeUniqueIDRepaired">
            <summary>
            Triggered when the unique IDs of the scene are to be repaired (only when they were broken)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:CSharpFramework.SceneEventArgs.Action.AfterUniqueIDRepaired" -->
        <member name="F:CSharpFramework.SceneEventArgs.Action.BeforePrefabBinaryExport">
            <summary>
            Triggered right before the content of a prefab is exported to binary prefab file. This event gets only called on shapes that are
            underneath the prefab shape hierarchy.
            </summary>
        </member>
        <member name="F:CSharpFramework.SceneEventArgs.Action.AfterPrefabBinaryExport">
            <summary>
            Counterpart of BeforePrefabBinaryExport
            </summary>
        </member>
        <member name="T:CSharpFramework.ExportSceneEventArgs">
            <summary>
            Derived event class that is triggered for the BeforeExport/AfterExport event. This class additionally holds the export info object
            </summary>
        </member>
        <member name="M:CSharpFramework.ExportSceneEventArgs.#ctor(CSharpFramework.SceneEventArgs.Action,System.Boolean,CSharpFramework.Scene.SceneExportInfo)">
            <summary>
            Constructor
            </summary>
            <param name="_action"></param>
            <param name="bSuccess"></param>
            <param name="exportInfo"></param>
        </member>
        <member name="F:CSharpFramework.ExportSceneEventArgs.ExportInfo">
            <summary>
            Current export info
            </summary>
        </member>
        <member name="T:CSharpFramework.UpdateVariableEventArgs">
            <summary>
            Derived event class that is triggered for the UpdateNativeVariable scene event
            </summary>
        </member>
        <member name="M:CSharpFramework.UpdateVariableEventArgs.#ctor(CSharpFramework.SceneEventArgs.Action,System.IntPtr,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="_action"></param>
            <param name="_nativeObject"></param>
            <param name="_variableName"></param>
            <param name="_variableValue"></param>
            <param name="_isSubProperty"></param>
            <param name="_setViaAction"></param>
        </member>
        <member name="F:CSharpFramework.UpdateVariableEventArgs.NativeObject">
            <summary>
            Native RTTI object to update
            </summary>
        </member>
        <member name="F:CSharpFramework.UpdateVariableEventArgs.VariableName">
            <summary>
            Name of the variable
            </summary>
        </member>
        <member name="F:CSharpFramework.UpdateVariableEventArgs.VariableValue">
            <summary>
            New value string
            </summary>
        </member>
        <member name="F:CSharpFramework.UpdateVariableEventArgs.IsSubProperty">
            <summary>
            Is a sub property?
            </summary>
        </member>
        <member name="F:CSharpFramework.UpdateVariableEventArgs.SetViaAction">
            <summary>
            Update has been triggered through action
            </summary>
        </member>
        <member name="T:CSharpFramework.IStaticLightingTool">
            <summary>
            Interface that can be set in EditorManager.LightingTool to hook in a custom lighting tool
            </summary>
        </member>
        <member name="T:CSharpFramework.ExternalFileDropArgs">
            <summary>
            Class for event notification if external file was dropped on the engine view
            </summary>
        </member>
        <member name="M:CSharpFramework.ExternalFileDropArgs.#ctor(System.Windows.Forms.DragEventArgs)">
            <summary>
            Constructor
            </summary>
            <param name="a"></param>
        </member>
        <member name="P:CSharpFramework.ExternalFileDropArgs.Processed">
            <summary>
            Operation has been processed
            </summary>
        </member>
        <member name="T:CSharpFramework.EditorModeChangedArgs">
            <summary>
            Class for event notification if editor animation mode (or speed) changed
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorModeChangedArgs.#ctor(CSharpFramework.EditorManager.Mode,CSharpFramework.EditorManager.Mode)">
            <summary>
            event constructor for changed mode
            </summary>
            <param name="newMode"></param>
            <param name="oldMode"></param>
        </member>
        <member name="M:CSharpFramework.EditorModeChangedArgs.#ctor(System.Single)">
            <summary>
            event constructor for changed animation speed
            </summary>
            <param name="fNewAnimSpeed"></param>
        </member>
        <member name="F:CSharpFramework.EditorModeChangedArgs.action">
            <summary>
            Status
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorModeChangedArgs._newMode">
            <summary>
            New editor mode
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorModeChangedArgs._oldMode">
            <summary>
            Old editor mode
            </summary>
        </member>
        <member name="T:CSharpFramework.EditorModeChangedArgs.Action">
            <summary>
            Specifier for mode changed event
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorModeChangedArgs.Action.ModeChanged">
            <summary>
            The editor mode changed
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorModeChangedArgs.Action.SpeedChanged">
            <summary>
            The playback speed changed
            </summary>
        </member>
        <member name="T:CSharpFramework.EditorComponentChangedArgs">
            <summary>
            Class for event notification if current editor component changed
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorComponentChangedArgs.#ctor(CSharpFramework.View.IEditorComponent,CSharpFramework.View.IEditorComponent)">
            <summary>
            Constructor
            </summary>
            <param name="_old"></param>
            <param name="_new"></param>
        </member>
        <member name="F:CSharpFramework.EditorComponentChangedArgs.NewComponent">
            <summary>
            New selected component
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorComponentChangedArgs.OldComponent">
            <summary>
            Old component
            </summary>
        </member>
        <member name="T:CSharpFramework.EditorSettingsChangedArgs">
            <summary>
            Class for event notification if current editor settings changed
            </summary>
        </member>
        <member name="M:CSharpFramework.EditorSettingsChangedArgs.#ctor(CSharpFramework.Scene.EditorSettingsBase,CSharpFramework.Scene.EditorSettingsBase)">
            <summary>
            Constructor
            </summary>
            <param name="_old"></param>
            <param name="_new"></param>
        </member>
        <member name="F:CSharpFramework.EditorSettingsChangedArgs.NewSettings">
            <summary>
            New editor settings
            </summary>
        </member>
        <member name="F:CSharpFramework.EditorSettingsChangedArgs.OldSettings">
            <summary>
            Old editor settings
            </summary>
        </member>
        <member name="T:CSharpFramework.ShapeSelectionChangedArgs">
            <summary>
            Class for event notification if shape selection changed
            </summary>
        </member>
        <member name="M:CSharpFramework.ShapeSelectionChangedArgs.#ctor(CSharpFramework.ShapeCollection,CSharpFramework.ShapeCollection)">
            <summary>
            Constructor
            </summary>
            <param name="_old"></param>
            <param name="_new"></param>
        </member>
        <member name="M:CSharpFramework.ShapeSelectionChangedArgs.#ctor(CSharpFramework.ShapeCollection,CSharpFramework.ShapeCollection,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="_old"></param>
            <param name="_new"></param>
            <param name="_forceUpdateScrollPositionInShapeTree"></param>
        </member>
        <member name="F:CSharpFramework.ShapeSelectionChangedArgs.NewSelection">
            <summary>
            New collection
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeSelectionChangedArgs.OldSelection">
            <summary>
            Old selection
            </summary>
        </member>
        <member name="F:CSharpFramework.ShapeSelectionChangedArgs.ForceUpdateScrollPositionInShapeTree">
            <summary>
            Forces shape tree to scroll to selected node. This is only needed in case you focused the shapetreepanel.
            </summary>
        </member>
        <member name="T:CSharpFramework.CustomSceneSerializationArgs">
            <summary>
            Class for event notification that gets passed to tools that are registered to the CustomSceneSerialization event
            </summary>
        </member>
        <member name="M:CSharpFramework.CustomSceneSerializationArgs.#ctor(System.Boolean,CSharpFramework.Layer)">
            <summary>
            Constructor
            </summary>
            <param name="_isSaving"></param>
            <param name="owner"></param>
        </member>
        <member name="F:CSharpFramework.CustomSceneSerializationArgs.IsSaving">
            <summary>
            This bool indicates whether the scene file is currently saving or loading
            </summary>
        </member>
        <member name="F:CSharpFramework.CustomSceneSerializationArgs.CustomObjects">
            <summary>
            This collection can be used to append your own objects that should be serialized along with the scene
            </summary>
        </member>
        <member name="F:CSharpFramework.CustomSceneSerializationArgs.OwnerLayer">
            <summary>
            Layer that owns the custom objects
            </summary>
        </member>
        <member name="M:CSharpFramework.CustomSceneSerializationArgs.FindCustomObjectOfType(System.Type)">
            <summary>
            Helper function to find an object of specified type in the CustomObjects array. Useful while deserialization in custom plugins.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.ExceptionTriggeredArgs">
            <summary>
            Class for event notification if an exception was triggered
            </summary>
        </member>
        <member name="M:CSharpFramework.ExceptionTriggeredArgs.#ctor(System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:CSharpFramework.ExceptionTriggeredArgs.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="T:CSharpFramework.IEditorPluginList">
            <summary>
            Array class that overrides the Add/Remove function
            </summary>
        </member>
        <member name="M:CSharpFramework.IEditorPluginList.Add(CSharpFramework.IEditorPlugin)">
            <summary>
            Overrides the Add function to call OnRegistered on the object
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:CSharpFramework.IEditorPluginList.Remove(CSharpFramework.IEditorPlugin)">
            <summary>
            Overrides the Remove function to call OnUnregistered on the object
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:CSharpFramework.IEditorPluginList.EnsureSorted">
            <summary>
            Makes sure that the list is sorted alphabetically
            </summary>
        </member>
        <member name="T:CSharpFramework.IMenuItemPlugin">
            <summary>
            Interface for menu item plugins. Can be used in plugins to dynamically add menu
            items to the application's main menu.
            </summary>
        </member>
        <member name="M:CSharpFramework.IMenuItemPlugin.OnInitialize(System.Windows.Forms.MenuItem)">
            <summary>
            This method is on initialization of the plugin.
            Here you can ie. register events in the parent MenuItem
            </summary>
        </member>
        <member name="M:CSharpFramework.IMenuItemPlugin.OnDeinitialize(System.Windows.Forms.MenuItem)">
            <summary>
            This method is called on deinitialization of the plugin.
            Here you can ie. unregister events in the parent MenuItem
            </summary>
        </member>
        <member name="P:CSharpFramework.IMenuItemPlugin.Name">
            <summary>
            The name of the menu item plugin
            </summary>
        </member>
        <member name="P:CSharpFramework.IMenuItemPlugin.MenuItem">
            <summary>
            The MenuItem which is provided by this plugin
            </summary>
        </member>
        <member name="P:CSharpFramework.IMenuItemPlugin.ParentMenu">
            <summary>
            Gets the parent menu the item will be added to
            </summary>
        </member>
        <member name="T:CSharpFramework.IMenuItemPlugin.Category">
            <summary>
            List of available parent menu categories
            </summary>
        </member>
        <member name="F:CSharpFramework.IMenuItemPlugin.Category.StaticLighting">
            <summary>
            "Static lighting" menu
            </summary>
        </member>
        <member name="F:CSharpFramework.IMenuItemPlugin.Category.Extras">
            <summary>
            "Extras" menu
            </summary>
        </member>
        <member name="T:CSharpFramework.LoadCustomFileEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.SceneChangedEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.SceneEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.ExternalFileDropHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.EditorModeChangedEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.EditorComponentChangedEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.EditorSettingsChangedEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.ShapeSelectionChangedEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.CustomSceneSerializationEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.ExceptionTriggeredEventHandler">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.BeforeSceneClosing">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.BeforeEditorModeChanging">
            <summary>
            Delegate declaration
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.SceneObjectKeyTypeAttribute">
            <summary>
            Attribute for setting the key type. Works with SceneObjectKeyConverter
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.SceneObjectKeyTypeAttribute.#ctor(CSharpFramework.IEngineManager.ObjectKeyType_e)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.SceneObjectKeyTypeAttribute.Types">
            <summary>
            Supported bitmask
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.SceneObjectKeyConverter">
            <summary>
            String converter that enumerates the key strings of scene elements. Works together with the SceneObjectKeyTypeAttribute.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.SceneObjectKeyConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: We provide standard values
            </summary>
            <param name="context">The descriptor context</param>
            <returns>In our case : true</returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.SceneObjectKeyConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: Returns the standard values that the dropdown should have
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Collection of standard values</returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.SceneObjectKeyConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden StringConverter function: 
            We also allow non-standard values (i.e. when typing in key manually)
            </summary>
            <param name="context">The descriptor context</param>
            <returns>In our case : false</returns>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.AllowedIntValuesAttribute">
            <summary>
            Attribute that allows to set an array of in values.
            This attribute is required for the IntListTypeConverter type converter attribute.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.AllowedIntValuesAttribute.#ctor(System.Int32[])">
            <summary>
            Constructor. Takes the array of allowed int values
            </summary>
            <param name="allowedValues">The array of allowed int values</param>
        </member>
        <member name="F:CSharpFramework.PropertyEditors.AllowedIntValuesAttribute.AllowedValues">
            <summary>
            The collection passed in the constructor
            </summary>
        </member>
        <member name="T:CSharpFramework.PropertyEditors.IntListTypeConverter">
            <summary>
            A TypeConverter that allows to select an int value from a pre-defined set of int values. The allowed int values must
            be specified in the AllowedIntValuesAttribute that takes an int array in the constructor.
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.IntListTypeConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.IntListTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.IntListTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.IntListTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.IntListTypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.IntListTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.PropertyEditors.IntListTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden function
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.Math.BoundingBox">
            <summary>
            Bounding box class
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.#ctor(CSharpFramework.Math.Vector3F[])">
            <summary>
            Constructor that initializes the box with a list of containing points
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.Reset">
            <summary>
            Rests the box so that min>max
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor that creates box from 6 floats
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="z1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z2"></param>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.Set(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the bounding box (6 floats input)
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="z1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z2"></param>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.#ctor(CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Constructor that creates the bounding box from min and max position vectors
            </summary>
            <param name="_min">minimum position</param>
            <param name="_max">maximum position</param>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.Validate">
            <summary>
            Validates the bounding box so that min>=max. Note that Valid checks strictly min>max
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.GetCorner(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Accesses the corners of the bounding box. Uses flags to determine whether min or max coordinates are used
            </summary>
            <param name="xmax">if true, use max x-coordinate, else min x</param>
            <param name="ymax">if true, use max y-coordinate, else min y</param>
            <param name="zmax">if true, use max z-coordinate, else min z</param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.AddPoint(System.Single,System.Single,System.Single)">
            <summary>
            Add a point to the box, i.e. increase box size so that the point is inside
            </summary>
            <param name="x">x-coordinate of the point to add</param>
            <param name="y">y-coordinate of the point to add</param>
            <param name="z">z-coordinate of the point to add</param>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.AddPoint(CSharpFramework.Math.Vector3F)">
            <summary>
            Add a point to the box, i.e. increase box size so that the point is inside
            </summary>
            <param name="p">point to add</param>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.AddPoints(CSharpFramework.Math.Vector3F[])">
            <summary>
            Add a list of points to the box, i.e. increase box size so that all poinst are inside
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.AddBox(CSharpFramework.Math.BoundingBox)">
            <summary>
            Add a box to this box, so that the other box is inside
            </summary>
            <param name="bbox">The box to be added</param>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.AddOrientedBox(CSharpFramework.Math.BoundingBox,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Matrix3F)">
            <summary>
            Add an oriented bounding box to this box so that the oriented box is completely inside
            </summary>
            <param name="localbox">The bounding box around the origin</param>
            <param name="center">The position of the origin</param>
            <param name="rotation">The rotation of the box around the origin</param>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.AddBorder(System.Single)">
            <summary>
            Inflates the box by the specified border
            </summary>
            <param name="fBorder"></param>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.Translate(CSharpFramework.Math.Vector3F)">
            <summary>
            Translates the bounding box by the given amount
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.Intersects(CSharpFramework.Math.BoundingBox)">
            <summary>
            Indicates whether the two boxes intersect
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.IsInside(CSharpFramework.Math.Vector3F)">
            <summary>
            Indicates whether the passed position is inside the box
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.IsInside(CSharpFramework.Math.BoundingBox)">
            <summary>
            Indicates whether the passed box is completely inside this box
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.GetUnionBox(CSharpFramework.Math.BoundingBox)">
            <summary>
            Return the union box between this and other. The returned box indicates VAlid==false if the two boxes don't intersect
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.ClampPosition(CSharpFramework.Math.Vector3F)">
            <summary>
            Returns a new point that is inside the box (componentwise clamping). This is the closest point to the box
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.GetDistanceSqr(CSharpFramework.Math.Vector3F)">
            <summary>
            Returns the squared distance of the point to the box
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.GetDistance(CSharpFramework.Math.Vector3F)">
            <summary>
            Returns the distance of the point to the box
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.GetDistance(CSharpFramework.Math.BoundingBox)">
            <summary>
            Returns the distance of the two bounding boxes
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="F:CSharpFramework.Math.BoundingBox.vMin">
            <summary>
            Min position of the bounding box
            </summary>
        </member>
        <member name="F:CSharpFramework.Math.BoundingBox.vMax">
            <summary>
            Max position of the bounding box
            </summary>
        </member>
        <member name="M:CSharpFramework.Math.BoundingBox.Clone">
            <summary>
            Clones this bounding box
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.Valid">
            <summary>
            checks whether the box is valid, i.e. max>min
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.Center">
            <summary>
            Get the center of the bounding box
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.SizeX">
            <summary>
            Get the box dimension in x-direction
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.SizeY">
            <summary>
            Get the box dimension in y-direction
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.SizeZ">
            <summary>
            Get the box dimension in z-direction
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.MaxExtent">
            <summary>
            Get the largest extent of the box
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.MinExtent">
            <summary>
             Get minimum extent of the bounding box
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.Radius">
            <summary>
            Returns the radius of the bounding box. Sphere radius that contains the full box
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.Volume">
            <summary>
            returns the volume (sizex*sizey*sizez) or -1 if box is not valid
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.X1">
            <summary>
            min x position of the box
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.Y1">
            <summary>
            min y position of the box
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.Z1">
            <summary>
            min z position of the box
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.X2">
            <summary>
            max x position of the box
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.Y2">
            <summary>
            max y position of the box
            </summary>
        </member>
        <member name="P:CSharpFramework.Math.BoundingBox.Z2">
            <summary>
            max z position of the box
            </summary>
        </member>
        <member name="T:CSharpFramework.Helper.AssemblyHelper">
            <summary>
            Provides functions for gathering the loaded assemblies and checking the consistency of their
            build configurations (debug/release)
            </summary>
        </member>
        <member name="F:CSharpFramework.Helper.AssemblyHelper._warningDialogShown">
            <summary>
            indicates whether the assembly consistency warning dialog has been shown
            </summary>
        </member>
        <member name="M:CSharpFramework.Helper.AssemblyHelper.#ctor">
            <summary>
            Private constructor: prevent from creation
            </summary>
        </member>
        <member name="M:CSharpFramework.Helper.AssemblyHelper.CheckAssemblyConsistency">
            <summary>
            Shows a warning dialog if the loaded assemblies have different build configuration
            (mixed debug and release builds).
            
            This function ensures that the dialog is only shown once while the application is running.
            </summary>
        </member>
        <member name="M:CSharpFramework.Helper.AssemblyHelper.IsConsistentBuildConfiguration">
            <summary>
            Determines whether all editor assemblies have the same build configuration (release or debug)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.Helper.AssemblyHelper.GetEditorAssemblies">
            <summary>
            Gets the list of loaded editor and plugin assemblies
            </summary>
            <returns>assembly array</returns>
        </member>
        <member name="M:CSharpFramework.Helper.AssemblyHelper.GetLoadedAssemblyByName(System.String)">
            <summary>
            Returns the assembly with the specified name if it is loaded
            </summary>
            <param name="assemblyName">name of the assembly to look for</param>
            <returns>assembly instance</returns>
        </member>
        <member name="M:CSharpFramework.Helper.AssemblyHelper.IsAssemblyDebugBuild(System.Reflection.Assembly)">
            <summary>
            Determines whether an assembly is a debug build
            </summary>
            <param name="assemb">assembly instance</param>
            <returns>true if the assembly is a debug build</returns>
        </member>
        <member name="M:CSharpFramework.Helper.AssemblyHelper.GetAssemblyVersion(System.Reflection.Assembly)">
            <summary>
            Determines the version of an assembly
            </summary>
            <param name="assemb">assembly instance</param>
            <returns>version as string</returns>
        </member>
        <member name="M:CSharpFramework.Helper.AssemblyHelper.GetClassesDerivedFrom(System.Type,System.Reflection.Assembly[])">
            <summary>
            This function returns an array of all types that are derived from the passed baseType
            </summary>
            <param name="baseType">The base class to check</param>
            <param name="assemblies">The assemblies to search. Can be null to search in all (GetEditorAssemblies)</param>
            <returns></returns>
        </member>
        <member name="T:CSharpFramework.LayerListView">
            <summary>
            List view class for a layer list
            </summary>
        </member>
        <member name="M:CSharpFramework.LayerListView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CSharpFramework.LayerListView.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Overriden function to preprocess command keys
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:CSharpFramework.LayerListView.OnCut">
            <summary>
            Performs cut operation on currently selected item (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="M:CSharpFramework.LayerListView.OnCopy">
            <summary>
            Performs copy operation on currently selected item (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="M:CSharpFramework.LayerListView.OnPaste">
            <summary>
            Performs paste operation on currently selected item (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="M:CSharpFramework.LayerListView.OnDelete">
            <summary>
            Performs delete operation on currently selected item (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="M:CSharpFramework.LayerListView.HasSelection">
            <summary>
            Checks if a layer is selected to cut or copy (overridden IEditorComponent function)
            </summary>
            <returns>true, if a layer is selected</returns>
        </member>
        <member name="M:CSharpFramework.LayerListView.RenameLayer(CSharpFramework.Layer)">
            <summary>
            Starts renaming the layer item
            </summary>
            <param name="layer">The layer to be renamed</param>
        </member>
        <member name="M:CSharpFramework.LayerListView.AddLayer(CSharpFramework.Layer,System.Boolean)">
            <summary>
            Adds a layer to the list
            </summary>
            <param name="layer">Layer to add</param>
            <param name="bEditLabel">if true, the layer will be switched to editing mode immediately</param>
        </member>
        <member name="M:CSharpFramework.LayerListView.RemoveLayer(CSharpFramework.Layer)">
            <summary>
            Removes a layer ftom list
            </summary>
            <param name="layer">Layer to remove</param>
        </member>
        <member name="M:CSharpFramework.LayerListView.ClearLayerList">
            <summary>
            Clears the whole list
            </summary>
        </member>
        <member name="M:CSharpFramework.LayerListView.FindLayerInList(CSharpFramework.Layer)">
            <summary>
            Finds the accoring layer list item
            </summary>
            <param name="layer">Layer to find</param>
            <returns>Layer list item</returns>
        </member>
        <member name="M:CSharpFramework.LayerListView.GetSelectedItem">
            <summary>
            Get the currently selected layer list item
            </summary>
            <returns>Selected list item</returns>
        </member>
        <member name="M:CSharpFramework.LayerListView.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Overridden function that gets called if layer selection changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.LayerListView.OnClick(System.EventArgs)">
            <summary>
            Select the new active layer when clicking on it
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.LayerListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)">
            <summary>
            Used to check whether the layer name can be edited in the first place
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.LayerListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)">
            <summary>
            Change the layer name after renaming the item
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.LayerListView.BuildLayerList(CSharpFramework.LayerCollection)">
            <summary>
            Fill the list view with the passed layer collection
            </summary>
            <param name="layers">source Layer collection</param>
        </member>
        <member name="M:CSharpFramework.LayerListView.OnSceneChanged(System.Object,CSharpFramework.SceneChangedArgs)">
            <summary>
            Listens to scene changes, i.e. rebuild the list view
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.LayerListView.OnLayerChanged(System.Object,CSharpFramework.LayerChangedArgs)">
            <summary>
            Listens to changes in layer list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.LayerListView.LayerListView_ItemCheck(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
             Clicking the checkmark changes the visible status of the selected layer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.LayerListView.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:CSharpFramework.LayerListView.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:CSharpFramework.LayerListView.OnDragLeave(System.EventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSharpFramework.LayerListView.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden function
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="P:CSharpFramework.LayerListView.Clipboard">
            <summary>
            returns clipboard instance to use for cut/copy/paste operations (overridden IEditorComponent function)
            </summary>
        </member>
        <member name="P:CSharpFramework.LayerListView.SelectedLayer">
            <summary>
            Get the currently selected layer (from the layer list item)
            </summary>
        </member>
        <member name="T:CSharpFramework.BaseTypes.ColorComponentBits">
            <summary>
            Enum for bit-wise combinable color portions
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.ColorComponentBits.None">
            <summary>
            No color component
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.ColorComponentBits.Red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.ColorComponentBits.Green">
            <summary>
            Green component
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.ColorComponentBits.Blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.ColorComponentBits.Alpha">
            <summary>
            Alpha component
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.ColorComponentBits.RGB">
            <summary>
            Red, green and blue component
            </summary>
        </member>
        <member name="F:CSharpFramework.BaseTypes.ColorComponentBits.RGBA">
            <summary>
            All components
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.ScaleShapeAction">
            <summary>
            Action to scale a single shape
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.ScaleShapeAction.#ctor(CSharpFramework.Shapes.Shape3D,CSharpFramework.Math.Vector3F,CSharpFramework.Math.Vector3F)">
            <summary>
            Constructor that takes the shape to rotate and new resp. old Euler rotation
            </summary>
            <param name="_shape">Shape to scale</param>
            <param name="_oldScale">old scaling (xyz)</param>
            <param name="_newScale">new scaling (xyz)</param>
        </member>
        <member name="M:CSharpFramework.Actions.ScaleShapeAction.Do">
            <summary>
            Sets the new scaling
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.ScaleShapeAction.Undo">
            <summary>
            Sets the old scaling
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.ScaleShapeAction.ShortName">
            <summary>
            Short name of the action, to show in the menu
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.ScaleShapeAction.LongName">
            <summary>
            Long name of the action, to show in the history
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.ScaleShapeAction.Valid">
            <summary>
            Overridden valid function (checks layer editable flag)
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.ScaleShapeAction.IconIndex">
            <summary>
            Get the icon for this action
            </summary>
        </member>
        <member name="P:CSharpFramework.Actions.ScaleShapeAction.IconImage">
            <summary>
            Static function to return the image used to display this type of action in the history
            </summary>
        </member>
        <member name="T:CSharpFramework.Actions.ScaleShapesAction">
            <summary>
             Group action to scale a collection of shapes individually
            </summary>
        </member>
        <member name="M:CSharpFramework.Actions.ScaleShapesAction.#ctor(CSharpFramework.ShapeCollection,CSharpFramework.Math.Vector3F[],CSharpFramework.Math.Vector3F[])">
            <summary>
            Constructor that takes a collection of shapes to scale and the according arrays of old and new scalings
            </summary>
            <param name="shapes">Collection of shapes to scale</param>
            <param name="_oldScales">Array of old scaling factors</param>
            <param name="_newScales">Optional array of new scalings (if null it uses the current shape orientation)</param>
        </member>
        <member name="P:CSharpFramework.Actions.ScaleShapesAction.IconIndex">
            <summary>
            Return the icon index for this action
            </summary>
        </member>
    </members>
</doc>
